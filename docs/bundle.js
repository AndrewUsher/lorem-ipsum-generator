!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===b&&C()}(e,n),t&&t(e,n)};var n,r=!0,o="38a9d6a7afd3395112dd",a=1e4,i={},s=[],l=[];function u(e){var t=E[e];if(!t)return O;var r=function(r){return t.hot.active?(E[r]?-1===E[r].parents.indexOf(e)&&E[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),O(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(t){O[e]=t}}};for(var a in O)Object.prototype.hasOwnProperty.call(O,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===d&&f("prepare"),b++,O.e(e).then(t,function(e){throw t(),e});function t(){b--,"prepare"===d&&(v[e]||k(e),0===b&&0===y&&C())}},r}var c=[],d="idle";function f(e){d=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var p,h,m,y=0,b=0,v={},g={},x={};function w(e){return+e+""===e?+e:e}function _(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,f("check"),(t=a,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=O.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;g={},v={},x=e.c,m=e.h,f("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return k(0),"prepare"===d&&0===b&&0===y&&C(),t});var t}function k(e){x[e]?(g[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=O.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):v[e]=!0}function C(){f("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return j(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function j(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,a,l,u;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((l=E[a])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var s=0;s<l.parents.length;s++){var u=l.parents[s],c=E[u];if(c){if(c.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),p(n[u],[a])):(delete n[u],t.push(u),r.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var y={},b=[],v={},g=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var _ in h)if(Object.prototype.hasOwnProperty.call(h,_)){var k;u=w(_);var C=!1,j=!1,T=!1,P="";switch((k=h[_]?c(u):{type:"disposed",moduleId:_}).chain&&(P="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(C=new Error("Aborted because of self decline: "+k.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(C=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(C=new Error("Aborted because "+u+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(k),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),T=!0;break;default:throw new Error("Unexception type "+k.type)}if(C)return f("abort"),Promise.reject(C);if(j)for(u in v[u]=h[u],p(b,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,u)&&(y[u]||(y[u]=[]),p(y[u],k.outdatedDependencies[u]));T&&(p(b,[k.moduleId]),v[u]=g)}var S,N=[];for(r=0;r<b.length;r++)u=b[r],E[u]&&E[u].hot._selfAccepted&&N.push({module:u,errorHandler:E[u].hot._selfAccepted});f("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var A,R,I=b.slice();I.length>0;)if(u=I.pop(),l=E[u]){var M={},z=l.hot._disposeHandlers;for(a=0;a<z.length;a++)(n=z[a])(M);for(i[u]=M,l.hot.active=!1,delete E[u],delete y[u],a=0;a<l.children.length;a++){var F=E[l.children[a]];F&&((S=F.parents.indexOf(u))>=0&&F.parents.splice(S,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(l=E[u]))for(R=y[u],a=0;a<R.length;a++)A=R[a],(S=l.children.indexOf(A))>=0&&l.children.splice(S,1);for(u in f("apply"),o=m,v)Object.prototype.hasOwnProperty.call(v,u)&&(e[u]=v[u]);var D=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(l=E[u])){R=y[u];var L=[];for(r=0;r<R.length;r++)if(A=R[r],n=l.hot._acceptedDependencies[A]){if(-1!==L.indexOf(n))continue;L.push(n)}for(r=0;r<L.length;r++){n=L[r];try{n(R)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:R[r],error:e}),t.ignoreErrored||D||(D=e)}}}for(r=0;r<N.length;r++){var U=N[r];u=U.module,s=[u];try{O(u)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||D||(D=n),D||(D=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||D||(D=e)}}return D?(f("fail"),Promise.reject(D)):(f("idle"),new Promise(function(e){e(b)}))}var E={};function O(t){if(E[t])return E[t].exports;var r=E[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:j,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(l=s,s=[],l),children:[]};return e[t].call(r.exports,r,r.exports,u(t)),r.l=!0,r.exports}O.m=e,O.c=E,O.d=function(e,t,n){O.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},O.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},O.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(t,"a",t),t},O.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},O.p="",O.h=function(){return o},u("./src/index.js")(O.s="./src/index.js")}({"./node_modules/axios/index.js":function(e,t,n){e.exports=n("./node_modules/axios/lib/axios.js")},"./node_modules/axios/lib/adapters/xhr.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js"),o=n("./node_modules/axios/lib/core/settle.js"),a=n("./node_modules/axios/lib/helpers/buildURL.js"),i=n("./node_modules/axios/lib/helpers/parseHeaders.js"),s=n("./node_modules/axios/lib/helpers/isURLSameOrigin.js"),l=n("./node_modules/axios/lib/core/createError.js"),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n("./node_modules/axios/lib/helpers/btoa.js");e.exports=function(e){return new Promise(function(t,c){var d=e.data,f=e.headers;r.isFormData(d)&&delete f["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(e.url)||(p=new window.XDomainRequest,h="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var y=e.auth.username||"",b=e.auth.password||"";f.Authorization="Basic "+u(y+":"+b)}if(p.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onerror=function(){c(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n("./node_modules/axios/lib/helpers/cookies.js"),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(f,function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===d&&(d=null),p.send(d)})}},"./node_modules/axios/lib/axios.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js"),o=n("./node_modules/axios/lib/helpers/bind.js"),a=n("./node_modules/axios/lib/core/Axios.js"),i=n("./node_modules/axios/lib/defaults.js");function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var l=s(i);l.Axios=a,l.create=function(e){return s(r.merge(i,e))},l.Cancel=n("./node_modules/axios/lib/cancel/Cancel.js"),l.CancelToken=n("./node_modules/axios/lib/cancel/CancelToken.js"),l.isCancel=n("./node_modules/axios/lib/cancel/isCancel.js"),l.all=function(e){return Promise.all(e)},l.spread=n("./node_modules/axios/lib/helpers/spread.js"),e.exports=l,e.exports.default=l},"./node_modules/axios/lib/cancel/Cancel.js":function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},"./node_modules/axios/lib/cancel/CancelToken.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/cancel/Cancel.js");function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},"./node_modules/axios/lib/cancel/isCancel.js":function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},"./node_modules/axios/lib/core/Axios.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/defaults.js"),o=n("./node_modules/axios/lib/utils.js"),a=n("./node_modules/axios/lib/core/InterceptorManager.js"),i=n("./node_modules/axios/lib/core/dispatchRequest.js");function s(e){this.defaults=e,this.interceptors={request:new a,response:new a}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},"./node_modules/axios/lib/core/InterceptorManager.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},"./node_modules/axios/lib/core/createError.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/core/enhanceError.js");e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},"./node_modules/axios/lib/core/dispatchRequest.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js"),o=n("./node_modules/axios/lib/core/transformData.js"),a=n("./node_modules/axios/lib/cancel/isCancel.js"),i=n("./node_modules/axios/lib/defaults.js"),s=n("./node_modules/axios/lib/helpers/isAbsoluteURL.js"),l=n("./node_modules/axios/lib/helpers/combineURLs.js");function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!s(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},"./node_modules/axios/lib/core/enhanceError.js":function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},"./node_modules/axios/lib/core/settle.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/core/createError.js");e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},"./node_modules/axios/lib/core/transformData.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},"./node_modules/axios/lib/defaults.js":function(e,t,n){"use strict";(function(t){var r=n("./node_modules/axios/lib/utils.js"),o=n("./node_modules/axios/lib/helpers/normalizeHeaderName.js"),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:("undefined"!=typeof XMLHttpRequest?s=n("./node_modules/axios/lib/adapters/xhr.js"):void 0!==t&&(s=n("./node_modules/axios/lib/adapters/xhr.js")),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(a)}),e.exports=l}).call(this,n("./node_modules/process/browser.js"))},"./node_modules/axios/lib/helpers/bind.js":function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},"./node_modules/axios/lib/helpers/btoa.js":function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,a=String(e),i="",s=0,l=r;a.charAt(0|s)||(l="=",s%1);i+=l.charAt(63&t>>8-s%1*8)){if((n=a.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return i}},"./node_modules/axios/lib/helpers/buildURL.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))}))}),a=i.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},"./node_modules/axios/lib/helpers/combineURLs.js":function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},"./node_modules/axios/lib/helpers/cookies.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},"./node_modules/axios/lib/helpers/normalizeHeaderName.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},"./node_modules/axios/lib/helpers/parseHeaders.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js"),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},"./node_modules/axios/lib/helpers/spread.js":function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},"./node_modules/axios/lib/utils.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/helpers/bind.js"),o=n("./node_modules/is-buffer/index.js"),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function s(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===a.call(e)}function u(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},"./node_modules/change-emitter/lib/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.createChangeEmitter=function(){var e=[],t=e;function n(){t===e&&(t=e.slice())}return{listen:function(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var r=!0;return n(),t.push(e),function(){if(r){r=!1,n();var o=t.indexOf(e);t.splice(o,1)}}},emit:function(){for(var n=e=t,r=0;r<n.length;r++)n[r].apply(n,arguments)}}}},"./node_modules/emotion/dist/index.es.js":function(e,t,n){"use strict";function r(e){return function(e,t){var n=1540483477,r=t^e.length,s=e.length,l=0;for(;s>=4;){var u=o(e,l);u=i(u,n),u=i(u^=u>>>24,n),r=i(r,n),r^=u,l+=4,s-=4}switch(s){case 3:r^=a(e,l),r=i(r^=e.charCodeAt(l+2)<<16,n);break;case 2:r=i(r^=a(e,l),n);break;case 1:r=i(r^=e.charCodeAt(l),n)}return r=i(r^=r>>>13,n),(r^=r>>>15)>>>0}(e,e.length).toString(36)}function o(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function a(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function i(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}n.r(t);var s="__emotion_styles",l="__emotion_target",u={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineClamp:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},c=n("./node_modules/emotion/node_modules/stylis-rule-sheet/index.js"),d=n.n(c);function f(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-emotion",""),e.appendChild(document.createTextNode("")),document.head.appendChild(e),e}n.d(t,"sheet",function(){return p}),n.d(t,"useStylisPlugin",function(){return v}),n.d(t,"registered",function(){return g}),n.d(t,"inserted",function(){return x}),n.d(t,"css",function(){return R}),n.d(t,"keyframes",function(){return I}),n.d(t,"injectGlobal",function(){return M}),n.d(t,"fontFace",function(){return z}),n.d(t,"getRegisteredStyles",function(){return F}),n.d(t,"merge",function(){return D}),n.d(t,"cx",function(){return L}),n.d(t,"hydrate",function(){return U}),n.d(t,"flush",function(){return H});var p=new(function(){function e(){this.isBrowser="undefined"!=typeof window,this.isSpeedy=!0,this.tags=[],this.ctr=0}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.isBrowser?this.tags[0]=f():this.sheet=[],this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isBrowser){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=f();this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(f())}else this.sheet.push(e)},t.flush=function(){this.isBrowser?(this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0):this.sheet=[],this.injected=!1},e}());p.inject();var h=new function e(t){function n(e,t,n){var o=t.trim().split(v);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var s=0;for(e=0===i?"":e[0]+" ";s<a;++s)t[s]=r(e,t[s],n,i).trim();break;default:var l=s=0;for(t=[];s<a;++s)for(var u=0;u<i;++u)t[l++]=r(e[u]+" ",o[s],n,i).trim()}return t}function r(e,t,n,r){var o=t.charCodeAt(0);switch(33>o&&(o=(t=t.trim()).charCodeAt(0)),o){case 38:switch(D+r){case 0:case 1:if(0===e.trim().length)break;default:return t.replace(g,"$1"+e.trim())}break;case 58:switch(t.charCodeAt(1)){case 103:if(0<U&&0<D)return t.replace(x,"$1").replace(g,"$1"+Z);break;default:return e.trim()+t}default:if(0<n*D&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var o=0,i=e+";";if(944==(t=2*t+3*n+4*r)){switch(o=i.length,e=i.indexOf(":",9)+1,n=i.substring(0,e).trim(),r=i.substring(e,o-1).trim(),i.charCodeAt(9)*Q){case 0:break;case 45:if(110!==i.charCodeAt(10))break;default:for(e=t=0,o=(i=r.split((r="",m))).length;t<o;e=0,++t){for(var s=i[t],l=s.split(y);s=l[e];){var u=s.charCodeAt(0);if(1===Q&&(64<u&&90>u||96<u&&123>u||95===u||45===u&&45!==s.charCodeAt(1)))switch(isNaN(parseFloat(s))+(-1!==s.indexOf("("))){case 1:switch(s){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:s+=Y}}l[e++]=s}r+=(0===t?"":",")+l.join(" ")}}return r=n+r+";",1===L||2===L&&a(r,1)?"-webkit-"+r+r:r}if(0===L||2===L&&!a(i,1))return i;switch(t){case 1015:return 45===i.charCodeAt(9)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:return 45===i.charCodeAt(8)?"-webkit-"+i+i:i;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(e=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+e+i;case 1005:return p.test(i)?i.replace(f,":-webkit-")+i.replace(f,":-moz-")+i:i;case 1e3:switch(o=(e=i.substring(13).trim()).indexOf("-")+1,e.charCodeAt(0)+e.charCodeAt(o)){case 226:e=i.replace(S,"tb");break;case 232:e=i.replace(S,"tb-rl");break;case 220:e=i.replace(S,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+e+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(o=(i=e).length-10,t=(e=(33===i.charCodeAt(o)?i.substring(0,o):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|e.charCodeAt(7))){case 203:if(111>e.charCodeAt(8))break;case 115:i=i.replace(e,"-webkit-"+e)+";"+i;break;case 207:case 102:i=i.replace(e,"-webkit-"+(102<t?"inline-":"")+"box")+";"+i.replace(e,"-webkit-"+e)+";"+i.replace(e,"-ms-"+e+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return"-webkit-"+i+"-webkit-box-"+(e=i.replace("-items",""))+"-ms-flex-"+e+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(R,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","")+i}break;case 953:if(0<(o=i.indexOf("-content",9))&&109===i.charCodeAt(o-3)&&45!==i.charCodeAt(o-4))return"width:-webkit-"+(e=i.substring(o-3))+"width:-moz-"+e+"width:"+e;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),K(2!==t?r:r.replace(I,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(A," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,a,i,s,l){for(var c,d=0,f=t;d<q;++d)switch(c=$[d].call(u,e,f,n,r,o,a,i,s,l)){case void 0:case!1:case!0:case null:break;default:f=c}switch(f){case void 0:case!1:case!0:case null:case t:break;default:return f}}function l(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Q=0|n;break;case"global":U=0|n;break;case"cascade":D=0|n;break;case"compress":H=0|n;break;case"semicolon":B=0|n;break;case"preserve":V=0|n;break;case"prefix":K=null,n?"function"!=typeof n?L=1:(L=2,K=n):L=0}}return l}function u(t,r){if(void 0!==this&&this.constructor===u)return e(t);var l=t,f=l.charCodeAt(0);if(33>f&&(f=(l=l.trim()).charCodeAt(0)),0<Q&&(Y=l.replace(w,91===f?"":"-")),f=1,1===D?Z=l:G=l,l=[Z],0<q){var p=s(-1,r,l,l,z,M,0,0,0);void 0!==p&&"string"==typeof p&&(r=p)}var h=function e(t,r,l,u,f){for(var p,h,m,y,v=0,g=0,x=0,w=0,j=0,E=0,O=0,T=0,S=0,A=0,R=0,I=0,H=h=0,$=0,K=0,J=l.length,ee=J-1,te="",ne="",re="",oe="";I<J;){if(m=l.charCodeAt(I),I===ee&&0!==g+w+x+v&&(0!==g&&(m=47===g?10:47),w=x=v=0,J++,ee++),0===g+w+x+v){if(I===ee&&(0<h&&(te=te.replace(d,"")),0<te.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:te+=l.charAt(I)}m=59}if(1===H)switch(m){case 123:case 125:case 59:case 34:case 39:case 40:case 41:case 44:H=0;case 9:case 13:case 10:case 32:break;default:for(H=0,K=I,p=m,I--,m=59;K<J;)switch(l.charCodeAt(++K)){case 10:case 13:case 59:I++,m=p;case 58:case 123:K=J}}switch(m){case 123:for(p=(te=te.trim()).charCodeAt(0),T=1,K=++I;I<J;){switch(m=l.charCodeAt(I)){case 123:T++;break;case 125:T--}if(0===T)break;I++}switch(A=l.substring(K,I),0===p&&(p=(te=te.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<h&&(te=te.replace(d,"")),h=te.charCodeAt(1)){case 100:case 109:case 115:case 45:p=r;break;default:p=W}if(K=(A=e(r,p,A,h,f+1)).length,0<V&&0===K&&(K=te.length),0<q&&(y=s(3,A,p=n(W,te,$),r,z,M,K,h,f),te=p.join(""),void 0!==y&&0===(K=(A=y.trim()).length)&&(h=0,A="")),0<K)switch(h){case 115:te=te.replace(N,i);case 100:case 109:case 45:A=te+"{"+A+"}";break;case 107:A=(te=te.replace(_,"$1 $2"+(0<Q?Y:"")))+"{"+A+"}",A=1===L||2===L&&a("@"+A,3)?"@-webkit-"+A+"@"+A:"@"+A;break;default:A=te+A,112===u&&(ne+=A,A="")}else A="";break;default:A=e(r,n(r,te,$),A,u,f+1)}re+=A,A=$=h=R=H=S=0,te="",m=l.charCodeAt(++I);break;case 125:case 59:if(1<(K=(te=(0<h?te.replace(d,""):te).trim()).length))switch(0===R&&(p=te.charCodeAt(0),45===p||96<p&&123>p)&&(K=(te=te.replace(" ",":")).length),0<q&&void 0!==(y=s(1,te,r,t,z,M,ne.length,u,f))&&0===(K=(te=y.trim()).length)&&(te="\0\0"),p=te.charCodeAt(0),h=te.charCodeAt(1),p+h){case 0:break;case 169:case 163:oe+=te+l.charAt(I);break;default:58!==te.charCodeAt(K-1)&&(ne+=o(te,p,h,te.charCodeAt(2)))}$=h=R=H=S=0,te="",m=l.charCodeAt(++I)}}switch(m){case 13:case 10:if(0===g+w+x+v+B)switch(O){case 41:case 39:case 34:case 64:case 126:case 62:case 42:case 43:case 47:case 45:case 58:case 44:case 59:case 123:case 125:break;default:0<R&&(H=1)}47===g?g=0:0===D+S&&(h=1,te+="\0"),0<q*X&&s(0,te,r,t,z,M,ne.length,u,f),M=1,z++;break;case 59:case 125:if(0===g+w+x+v){M++;break}default:switch(M++,p=l.charAt(I),m){case 9:case 32:if(0===w+v+g)switch(j){case 44:case 58:case 9:case 32:p="";break;default:32!==m&&(p=" ")}break;case 0:p="\\0";break;case 12:p="\\f";break;case 11:p="\\v";break;case 38:0===w+g+v&&0<D&&(h=$=1,p="\f"+p);break;case 108:if(0===w+g+v+F&&0<R)switch(I-R){case 2:112===j&&58===l.charCodeAt(I-3)&&(F=j);case 8:111===E&&(F=E)}break;case 58:0===w+g+v&&(R=I);break;case 44:0===g+x+w+v&&(h=1,p+="\r");break;case 34:case 39:0===g&&(w=w===m?0:0===w?m:w);break;case 91:0===w+g+x&&v++;break;case 93:0===w+g+x&&v--;break;case 41:0===w+g+v&&x--;break;case 40:if(0===w+g+v){if(0===S)switch(2*j+3*E){case 533:break;default:T=0,S=1}x++}break;case 64:0===g+x+w+v+R+A&&(A=1);break;case 42:case 47:if(!(0<w+v+x))switch(g){case 0:switch(2*m+3*l.charCodeAt(I+1)){case 235:g=47;break;case 220:K=I,g=42}break;case 42:47===m&&42===j&&(33===l.charCodeAt(K+2)&&(ne+=l.substring(K,I+1)),p="",g=0)}}if(0===g){if(0===D+w+v+A&&107!==u&&59!==m)switch(m){case 44:case 126:case 62:case 43:case 41:case 40:if(0===S){switch(j){case 9:case 32:case 10:case 13:p+="\0";break;default:p="\0"+p+(44===m?"":"\0")}h=1}else switch(m){case 40:S=++T;break;case 41:0==(S=--T)&&(h=1,p+="\0")}break;case 9:case 32:switch(j){case 0:case 123:case 125:case 59:case 44:case 12:case 9:case 32:case 10:case 13:break;default:0===S&&(h=1,p+="\0")}}te+=p,32!==m&&9!==m&&(O=m)}}E=j,j=m,I++}if(K=ne.length,0<V&&0===K&&0===re.length&&0===r[0].length==0&&(109!==u||1===r.length&&(0<D?G:Z)===r[0])&&(K=r.join(",").length+2),0<K){if(0===D&&107!==u){for(l=0,v=r.length,g=Array(v);l<v;++l){for(E="",O=0,J=(j=r[l].split(b)).length;O<J;++O)if(!(0===(T=(w=j[O]).length)&&1<J)){if(I=E.charCodeAt(E.length-1),$=w.charCodeAt(0),x="",0!==O)switch(I){case 42:case 126:case 62:case 43:case 32:case 40:break;default:x=" "}switch($){case 38:w=x+G;case 126:case 62:case 43:case 32:case 41:case 40:break;case 91:w=x+w+G;break;case 58:switch(2*w.charCodeAt(1)+3*w.charCodeAt(2)){case 530:if(0<U){w=x+w.substring(8,T-1);break}default:(1>O||1>j[O-1].length)&&(w=x+G+w)}break;case 44:x="";default:w=1<T&&0<w.indexOf(":")?x+w.replace(P,"$1"+G+"$2"):x+w+G}E+=w}g[l]=E.replace(d,"").trim()}r=g}if(p=r,0<q&&void 0!==(y=s(2,ne,p,t,z,M,K,u,f))&&0===(ne=y).length)return oe+ne+re;if(ne=p.join(",")+"{"+ne+"}",0!=L*F){switch(2!==L||a(ne,2)||(F=0),F){case 111:ne=ne.replace(C,":-moz-$1")+ne;break;case 112:ne=ne.replace(k,"::-webkit-input-$1")+ne.replace(k,"::-moz-$1")+ne.replace(k,":-ms-input-$1")+ne}F=0}}return oe+ne+re}(W,l,r,0,0);return 0<q&&void 0!==(p=s(-2,h,l,l,z,M,h.length,0,0))&&"string"!=typeof(h=p)&&(f=0),G=Z=Y="",F=0,M=z=1,0==H*f?h:h.replace(d,"").replace(j,"").replace(E,"$1").replace(O,"$1").replace(T," ")}var c=/^\0+/g,d=/[\0\r\f]/g,f=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,+\s*(?![^(]*[)])/g,y=/ +\s*(?![^(]*[)])/g,b=/ *[\0] */g,v=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,x=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,w=/\W+/g,_=/@(k\w+)\s*(\S*)\s*/,k=/::(place)/g,C=/:(read-only)/g,j=/\s+(?=[{\];=:>])/g,E=/([[}=:>])\s+/g,O=/(\{[^{]+?);(?=\})/g,T=/\s{2,}/g,P=/([^\(])(:+) */g,S=/[svh]\w+-[tblr]{2}/,N=/\(\s*(.*)\s*\)/g,A=/([^]*?);/g,R=/-self|flex-/g,I=/[^]*?(:[rp][el]a[\w-]+)[^]*/,M=1,z=1,F=0,D=1,L=1,U=1,H=0,B=0,V=0,W=[],$=[],q=0,K=null,X=0,Q=1,Y="",G="",Z="";return u.use=function e(t){switch(t){case void 0:case null:q=$.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:$[q++]=t;break;case Boolean:X=0|!!t}}return e},u.set=l,void 0!==t&&l(t),u}({keyframe:!1}),m=[],y=h.use;var b=d()(function(e){p.insert(e,w)}),v=function(e){m.push(e),y(null)(m)(b)},g={},x={},w="";function _(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":return void 0!==e[s]?"."+e[l]:_.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return function(e){if(S.has(e))return S.get(e);var t="";Array.isArray(e)?e.forEach(function(e){t+=_.call(this,e,!1)},this):Object.keys(e).forEach(function(n){"object"!=typeof e[n]?void 0!==g[e[n]]?t+=n+"{"+g[e[n]]+"}":t+=T(n)+":"+P(n,e[n])+";":t+=n+"{"+_.call(this,e[n],!1)+"}"},this);return S.set(e,t),t}.call(this,e);default:var n=g[e];return!1===t&&void 0!==n?n:e}}h.use(b);var k,C,j,E,O=/[A-Z]|^ms/g,T=(k=function(e){return e.replace(O,"-$&").toLowerCase()},C={},function(e){return void 0===C[e]&&(C[e]=k(e)),C[e]}),P=function(e,t){return void 0===t||null===t||"boolean"==typeof t?"":1===u[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},S=new WeakMap;var N=/label:\s*([^\s;\n]+)\s*[;\n]/g;function A(e){var t=!0,n="",o="";null==e||void 0===e.raw?(t=!1,n=_.call(this,e,!1)):n=e[0];for(var a=arguments.length,i=new Array(a>1?a-1:0),s=1;s<a;s++)i[s-1]=arguments[s];return i.forEach(function(r,o){var a;n+=_.call(this,r,46===(a=n).charCodeAt(a.length-1)),!0===t&&void 0!==e[o+1]&&(n+=e[o+1])},this),n=n.replace(N,function(e,t){return o+="-"+t,""}),j=r(n+o),E=j+o,n}function R(){var e=A.apply(this,arguments),t="css-"+E;return void 0===g[t]&&(g[t]=e),void 0===x[j]&&(h("."+t,e),x[j]=!0),t}function I(){var e=A.apply(this,arguments),t="animation-"+E;return void 0===x[j]&&(h("","@keyframes "+t+"{"+e+"}"),x[j]=!0),t}function M(){var e=A.apply(this,arguments);void 0===x[j]&&(h("",e),x[j]=!0)}function z(){var e=A.apply(void 0,arguments);void 0===x[j]&&(h("","@font-face{"+e+"}"),x[j]=!0)}function F(e,t){var n="";return t.split(" ").forEach(function(t){void 0!==g[t]?e.push(t):n+=t+" "}),n}function D(e,t){var n=[],r=F(n,e);return n.length<2?e:r+R(n,t)}function L(){return D(function e(){for(var t=arguments.length,n=0,r="";n<t;n++){var o=arguments[n];if(null!=o){var a=r&&r+" "||r;switch(typeof o){case"boolean":break;case"function":r=a+e(o());break;case"object":if(Array.isArray(o))r=a+e.apply(null,o);else for(var i in o)o[i]&&(r&&(r+=" "),r+=i);break;default:r=a+o}}}return r}.apply(void 0,arguments))}function U(e){e.forEach(function(e){x[e]=!0})}function H(){p.flush(),x={},g={},p.inject()}},"./node_modules/emotion/node_modules/stylis-rule-sheet/index.js":function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,s,l,u,c){switch(n){case 1:0===c&&64===r.charCodeAt(0)&&e(r);break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+"/*|*/"}case-2:r.split("/*|*/}").forEach(t)}}}}()},"./node_modules/fbjs/lib/ExecutionEnvironment.js":function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},"./node_modules/fbjs/lib/containsNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isTextNode.js");e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},"./node_modules/fbjs/lib/emptyFunction.js":function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},"./node_modules/fbjs/lib/emptyObject.js":function(e,t,n){"use strict";e.exports={}},"./node_modules/fbjs/lib/getActiveElement.js":function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},"./node_modules/fbjs/lib/invariant.js":function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,s,l],d=0;(u=new Error(t.replace(/%s/g,function(){return c[d++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},"./node_modules/fbjs/lib/isNode.js":function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},"./node_modules/fbjs/lib/isTextNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isNode.js");e.exports=function(e){return r(e)&&3==e.nodeType}},"./node_modules/fbjs/lib/shallowEqual.js":function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},"./node_modules/hoist-non-react-statics/index.js":function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,s=i&&i(Object);return function l(u,c,d){if("string"!=typeof c){if(s){var f=i(c);f&&f!==s&&l(u,f,d)}var p=r(c);o&&(p=p.concat(o(c)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||d&&d[m])){var y=a(c,m);try{n(u,m,y)}catch(e){}}}return u}return u}}()},"./node_modules/is-buffer/index.js":function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},"./node_modules/is-plain-object/index.js":function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n("./node_modules/isobject/index.js");function o(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==o(e)&&("function"==typeof(t=e.constructor)&&(!1!==o(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},"./node_modules/isobject/index.js":function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},"./node_modules/object-assign/index.js":function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))o.call(n,u)&&(s[u]=n[u]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(s[i[c]]=n[i[c]])}}return s}},"./node_modules/process/browser.js":function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var l,u=[],c=!1,d=-1;function f(){c&&l&&(c=!1,l.length?u=l.concat(u):d=-1,u.length&&p())}function p(){if(!c){var e=s(f);c=!0;for(var t=u.length;t;){for(l=u,u=[];++d<t;)l&&l[d].run();d=-1,t=u.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||c||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"./node_modules/prop-types/factoryWithThrowingShims.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/emptyFunction.js"),o=n("./node_modules/fbjs/lib/invariant.js"),a=n("./node_modules/prop-types/lib/ReactPropTypesSecret.js");e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},"./node_modules/prop-types/index.js":function(e,t,n){e.exports=n("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-dom/cjs/react-dom.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/react/index.js"),o=n("./node_modules/fbjs/lib/ExecutionEnvironment.js"),a=n("./node_modules/object-assign/index.js"),i=n("./node_modules/fbjs/lib/emptyFunction.js"),s=n("./node_modules/fbjs/lib/getActiveElement.js"),l=n("./node_modules/fbjs/lib/shallowEqual.js"),u=n("./node_modules/fbjs/lib/containsNode.js"),c=n("./node_modules/fbjs/lib/emptyObject.js");function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||d("227");var f={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,s,l){(function(e,t,n,r,o,a,i,s,l){this._hasCaughtError=!1,this._caughtError=null;var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(f,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,s,l){if(f.invokeGuardedCallback.apply(this,arguments),f.hasCaughtError()){var u=f.clearCaughtError();f._hasRethrowError||(f._hasRethrowError=!0,f._rethrowError=u)}},rethrowCaughtError:function(){return function(){if(f._hasRethrowError){var e=f._rethrowError;throw f._rethrowError=null,f._hasRethrowError=!1,e}}.apply(f,arguments)},hasCaughtError:function(){return f._hasCaughtError},clearCaughtError:function(){if(f._hasCaughtError){var e=f._caughtError;return f._caughtError=null,f._hasCaughtError=!1,e}d("198")}};var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||d("96",e),!b[n])for(var r in t.extractEvents||d("97",e),b[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,s=r;v.hasOwnProperty(s)&&d("99",s),v[s]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&y(l[o],i,s);o=!0}else a.registrationName?(y(a.registrationName,i,s),o=!0):o=!1;o||d("98",r,e)}}}function y(e,t,n){g[e]&&d("100",e),g[e]=t,x[e]=t.eventTypes[n].dependencies}var b=[],v={},g={},x={};function w(e){p&&d("101"),p=Array.prototype.slice.call(e),m()}function _(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&d("102",t),h[t]=r,n=!0)}n&&m()}var k=Object.freeze({plugins:b,eventNameDispatchConfigs:v,registrationNameModules:g,registrationNameDependencies:x,possibleRegistrationNames:null,injectEventPluginOrder:w,injectEventPluginsByName:_}),C=null,j=null,E=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=E(r),f.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function T(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function A(e){return N(e,!0)}function R(e){return N(e,!1)}var I={injectEventPluginOrder:w,injectEventPluginsByName:_};function M(e,t){var n=e.stateNode;if(!n)return null;var r=C(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function z(e,t){null!==e&&(S=T(S,e)),e=S,S=null,e&&(P(e,t?A:R),S&&d("95"),f.rethrowCaughtError())}function F(e,t,n,r){for(var o=null,a=0;a<b.length;a++){var i=b[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=T(o,i))}z(o,!1)}var D=Object.freeze({injection:I,getListener:M,runEventsInBatch:z,runExtractedEventsInBatch:F}),L=Math.random().toString(36).slice(2),U="__reactInternalInstance$"+L,H="__reactEventHandlers$"+L;function B(e){if(e[U])return e[U];for(;!e[U];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[U]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function W(e){return e[H]||null}var $=Object.freeze({precacheFiberNode:function(e,t){t[U]=e},getClosestInstanceFromNode:B,getInstanceFromNode:function(e){return!(e=e[U])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[H]=t}});function q(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function K(e,t,n){for(var r=[];e;)r.push(e),e=q(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function X(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&K(e._targetInst,X,e)}function Y(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;K(t=t?q(t):null,X,e)}}function G(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&G(e._targetInst,null,e)}function J(e){P(e,Q)}function ee(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,s=o;s;s=q(s))i++;s=0;for(var l=a;l;l=q(l))s++;for(;0<i-s;)o=q(o),i--;for(;0<s-i;)a=q(a),s--;for(;i--;){if(o===a||o===a.alternate)break e;o=q(o),a=q(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=q(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=q(r);for(r=0;r<o.length;r++)G(o[r],"bubbled",e);for(e=n.length;0<e--;)G(n[e],"captured",t)}var te=Object.freeze({accumulateTwoPhaseDispatches:J,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,Y)},accumulateEnterLeaveDispatches:ee,accumulateDirectDispatches:function(e){P(e,Z)}}),ne=null;function re(){return!ne&&o.canUseDOM&&(ne="textContent"in document.documentElement?"textContent":"innerText"),ne}var oe={_root:null,_startText:null,_fallbackText:null};function ae(){if(oe._fallbackText)return oe._fallbackText;var e,t,n=oe._startText,r=n.length,o=ie(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return oe._fallbackText=o.slice(e,1<t?1-t:void 0),oe._fallbackText}function ie(){return"value"in oe._root?oe._root.value:oe._root[re()]}var se="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=de}a(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<se.length;t++)this[se[t]]=null}}),ue.Interface=le,ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var pe=ue.extend({data:null}),he=ue.extend({data:null}),me=[9,13,27,32],ye=o.canUseDOM&&"CompositionEvent"in window,be=null;o.canUseDOM&&"documentMode"in document&&(be=document.documentMode);var ve=o.canUseDOM&&"TextEvent"in window&&!be,ge=o.canUseDOM&&(!ye||be&&8<be&&11>=be),xe=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},_e=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ce(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var je=!1;var Ee={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(ye)e:{switch(e){case"topCompositionStart":o=we.compositionStart;break e;case"topCompositionEnd":o=we.compositionEnd;break e;case"topCompositionUpdate":o=we.compositionUpdate;break e}o=void 0}else je?ke(e,n)&&(o=we.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&(je||o!==we.compositionStart?o===we.compositionEnd&&je&&(a=ae()):(oe._root=r,oe._startText=ie(),je=!0)),o=pe.getPooled(o,t,n,r),a?o.data=a:null!==(a=Ce(n))&&(o.data=a),J(o),a=o):a=null,(e=ve?function(e,t){switch(e){case"topCompositionEnd":return Ce(t);case"topKeyPress":return 32!==t.which?null:(_e=!0,xe);case"topTextInput":return(e=t.data)===xe&&_e?null:e;default:return null}}(e,n):function(e,t){if(je)return"topCompositionEnd"===e||!ye&&ke(e,t)?(e=ae(),oe._root=null,oe._startText=null,oe._fallbackText=null,je=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return ge?null:t.data;default:return null}}(e,n))?((t=he.getPooled(we.beforeInput,t,n,r)).data=e,J(t)):t=null,null===a?t:null===t?a:[a,t]}},Oe=null,Te=null,Pe=null;function Se(e){if(e=j(e)){Oe&&"function"==typeof Oe.restoreControlledState||d("194");var t=C(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}var Ne={injectFiberControlledHostComponent:function(e){Oe=e}};function Ae(e){Te?Pe?Pe.push(e):Pe=[e]:Te=e}function Re(){return null!==Te||null!==Pe}function Ie(){if(Te){var e=Te,t=Pe;if(Pe=Te=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}var Me=Object.freeze({injection:Ne,enqueueStateRestore:Ae,needsStateRestore:Re,restoreStateIfNeeded:Ie});function ze(e,t){return e(t)}function Fe(e,t,n){return e(t,n)}function De(){}var Le=!1;function Ue(e,t){if(Le)return e(t);Le=!0;try{return ze(e,t)}finally{Le=!1,Re()&&(De(),Ie())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Be(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Ve(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!o.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function $e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function qe(e){e._valueTracker||(e._valueTracker=function(e){var t=$e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function Ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$e(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Xe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Ye=Qe?Symbol.for("react.element"):60103,Ge=Qe?Symbol.for("react.call"):60104,Ze=Qe?Symbol.for("react.return"):60105,Je=Qe?Symbol.for("react.portal"):60106,et=Qe?Symbol.for("react.fragment"):60107,tt=Qe?Symbol.for("react.strict_mode"):60108,nt=Qe?Symbol.for("react.provider"):60109,rt=Qe?Symbol.for("react.context"):60110,ot=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,it="function"==typeof Symbol&&Symbol.iterator;function st(e){return null===e||void 0===e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case et:return"ReactFragment";case Je:return"ReactPortal";case Ge:return"ReactCall";case Ze:return"ReactReturn"}return null}function ut(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=lt(e),a=null;n&&(a=lt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt={},ft={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-\:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ft.hasOwnProperty(e)||!dt.hasOwnProperty(e)&&(ct.test(e)?ft[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function vt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function gt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ct(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function wt(e,t){xt(e,t);var n=Ct(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,Ct(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function _t(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ct(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new pt("tabIndex",1,!1,"tabindex",null);var jt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Et(e,t,n){return(e=ue.getPooled(jt.change,e,t,n)).type="change",Ae(n),J(e),e}var Ot=null,Tt=null;function Pt(e){z(e,!1)}function St(e){if(Ke(V(e)))return e}function Nt(e,t){if("topChange"===e)return t}var At=!1;function Rt(){Ot&&(Ot.detachEvent("onpropertychange",It),Tt=Ot=null)}function It(e){"value"===e.propertyName&&St(Tt)&&Ue(Pt,e=Et(Tt,e,Ve(e)))}function Mt(e,t,n){"topFocus"===e?(Rt(),Tt=n,(Ot=t).attachEvent("onpropertychange",It)):"topBlur"===e&&Rt()}function zt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return St(Tt)}function Ft(e,t){if("topClick"===e)return St(t)}function Dt(e,t){if("topInput"===e||"topChange"===e)return St(t)}o.canUseDOM&&(At=We("input")&&(!document.documentMode||9<document.documentMode));var Lt={eventTypes:jt,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?V(t):window,a=void 0,i=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?a=Nt:Be(o)?At?a=Dt:(a=zt,i=Mt):!(s=o.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=Ft),a&&(a=a(e,t)))return Et(a,n,r);i&&i(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},Ut=ue.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Vt(){return Bt}var Wt=Ut.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),$t={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},qt={eventTypes:$t,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?B(t):null):e=null,e===t)return null;var a=null==e?o:V(e);o=null==t?o:V(t);var i=Wt.getPooled($t.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=Wt.getPooled($t.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,ee(i,n,e,t),[i,n]}};function Kt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Xt(e){return!!(e=e._reactInternalFiber)&&2===Kt(e)}function Qt(e){2!==Kt(e)&&d("188")}function Yt(e){var t=e.alternate;if(!t)return 3===(t=Kt(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return Qt(o),e;if(i===r)return Qt(o),t;i=i.sibling}d("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i){for(s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}i||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}var Gt=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Zt=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jt=Ut.extend({relatedTarget:null});function en(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var tn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},nn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rn=Ut.extend({key:function(e){if(e.key){var t=tn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=en(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?nn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?en(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?en(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),on=Wt.extend({dataTransfer:null}),an=Ut.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),sn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un={},cn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},un[e]=t,cn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var fn={eventTypes:un,isInteractiveTopLevelEventType:function(e){return void 0!==(e=cn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=cn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===en(n))return null;case"topKeyDown":case"topKeyUp":e=rn;break;case"topBlur":case"topFocus":e=Jt;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=on;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=an;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Gt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Ut;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=Zt;break;default:e=ue}return J(t=e.getPooled(o,t,n,r)),t}},pn=fn.isInteractiveTopLevelEventType,hn=[];function mn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=B(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],F(e.topLevelType,t,e.nativeEvent,Ve(e.nativeEvent))}var yn=!0;function bn(e){yn=!!e}function vn(e,t,n){if(!n)return null;e=(pn(e)?xn:wn).bind(null,e),n.addEventListener(t,e,!1)}function gn(e,t,n){if(!n)return null;e=(pn(e)?xn:wn).bind(null,e),n.addEventListener(t,e,!0)}function xn(e,t){Fe(wn,e,t)}function wn(e,t){if(yn){var n=Ve(t);if(null!==(n=B(n))&&"number"==typeof n.tag&&2!==Kt(n)&&(n=null),hn.length){var r=hn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ue(mn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>hn.length&&hn.push(e)}}}var _n=Object.freeze({get _enabled(){return yn},setEnabled:bn,isEnabled:function(){return yn},trapBubbledEvent:vn,trapCapturedEvent:gn,dispatchEvent:wn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Cn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},jn={},En={};function On(e){if(jn[e])return jn[e];if(!Cn[e])return e;var t,n=Cn[e];for(t in n)if(n.hasOwnProperty(t)&&t in En)return jn[e]=n[t];return e}o.canUseDOM&&(En=document.createElement("div").style,"AnimationEvent"in window||(delete Cn.animationend.animation,delete Cn.animationiteration.animation,delete Cn.animationstart.animation),"TransitionEvent"in window||delete Cn.transitionend.transition);var Tn={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},Pn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Sn={},Nn=0,An="_reactListenersID"+(""+Math.random()).slice(2);function Rn(e){return Object.prototype.hasOwnProperty.call(e,An)||(e[An]=Nn++,Sn[e[An]]={}),Sn[e[An]]}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Mn(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Fn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Dn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Ln=null,Un=null,Hn=null,Bn=!1;function Vn(e,t){if(Bn||null==Ln||Ln!==s())return null;var n=Ln;return"selectionStart"in n&&zn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&l(Hn,n)?null:(Hn=n,(e=ue.getPooled(Dn.select,Un,e,t)).type="select",e.target=Ln,J(e),e)}var Wn={eventTypes:Dn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Rn(a),o=x.onSelect;for(var i=0;i<o.length;i++){var s=o[i];if(!a.hasOwnProperty(s)||!a[s]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?V(t):window,e){case"topFocus":(Be(a)||"true"===a.contentEditable)&&(Ln=a,Un=t,Hn=null);break;case"topBlur":Hn=Un=Ln=null;break;case"topMouseDown":Bn=!0;break;case"topContextMenu":case"topMouseUp":return Bn=!1,Vn(n,r);case"topSelectionChange":if(Fn)break;case"topKeyDown":case"topKeyUp":return Vn(n,r)}return null}};function $n(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function qn(e,t,n){var r=e.alternate;return null===r?((r=new $n(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Kn(e,t,n){var r=e.type,o=e.key;e=e.props;var a=void 0;if("function"==typeof r)a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case et:return Xn(e.children,t,n,o);case ot:a=11,t|=3;break;case tt:a=11,t|=2;break;case Ge:a=7;break;case Ze:a=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case nt:a=13;break;case rt:a=12;break;case at:a=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;d("130",null==r?r:typeof r,"")}else d("130",null==r?r:typeof r,"")}return(t=new $n(a,e,o,t)).type=r,t.expirationTime=n,t}function Xn(e,t,n,r){return(e=new $n(10,e,r,t)).expirationTime=n,e}function Qn(e,t,n){return(e=new $n(6,e,null,t)).expirationTime=n,e}function Yn(e,t,n){return(t=new $n(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),C=$.getFiberCurrentPropsFromNode,j=$.getInstanceFromNode,E=$.getNodeFromInstance,I.injectEventPluginsByName({SimpleEventPlugin:fn,EnterLeaveEventPlugin:qt,ChangeEventPlugin:Lt,SelectEventPlugin:Wn,BeforeInputEventPlugin:Ee});var Gn=null,Zn=null;function Jn(e){return function(t){try{return e(t)}catch(e){}}}function er(e){"function"==typeof Gn&&Gn(e)}function tr(e){"function"==typeof Zn&&Zn(e)}function nr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function rr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var or=void 0,ar=void 0;function ir(e){or=ar=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=nr(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=nr(null)):e=null,or=n,ar=e!==n?e:null}function sr(e,t){ir(e),e=or;var n=ar;null===n?rr(e,t):null===e.last||null===n.last?(rr(e,t),rr(n,t)):(rr(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function ur(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,l=n.first,u=!1;null!==l;){var c=l.expirationTime;if(c>i){var d=n.expirationTime;(0===d||d>c)&&(n.expirationTime=c),u||(u=!0,n.baseState=e)}else u||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=lr(l,r,e,o),s=!0):(c=lr(l,r,e,o))&&(e=s?a({},e,c):a(e,c),s=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(l)),null!==l.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[l.capturedValue]:c.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),u||(n.baseState=e),e}function cr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var dr=Array.isArray;function fr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),r=n.stateNode),r||d("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===c?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&d("148"),n._owner||d("254",e)}return e}function pr(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=qn(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Qn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=fr(e,t,n),r.return=e,r):((r=Kn(n,e.mode,r)).ref=fr(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=Xn(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=Kn(t,e.mode,n)).ref=fr(e,null,t),n.return=e,n;case Je:return(t=Yn(t,e.mode,n)).return=e,t}if(dr(t)||st(t))return(t=Xn(t,e.mode,n,null)).return=e,t;pr(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===o?n.type===et?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case Je:return n.key===o?u(e,t,n,r):null}if(dr(n)||st(n))return null!==o?null:c(e,t,n,r,null);pr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ye:return e=e.get(null===r.key?n:r.key)||null,r.type===et?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case Je:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||st(r))return c(t,e=e.get(n)||null,r,o,null);pr(t,r)}return null}function m(o,i,s,l){for(var u=null,c=null,d=i,m=i=0,y=null;null!==d&&m<s.length;m++){d.index>m?(y=d,d=null):y=d.sibling;var b=p(o,d,s[m],l);if(null===b){null===d&&(d=y);break}e&&d&&null===b.alternate&&t(o,d),i=a(b,i,m),null===c?u=b:c.sibling=b,c=b,d=y}if(m===s.length)return n(o,d),u;if(null===d){for(;m<s.length;m++)(d=f(o,s[m],l))&&(i=a(d,i,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);m<s.length;m++)(y=h(d,o,m,s[m],l))&&(e&&null!==y.alternate&&d.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?u=y:c.sibling=y,c=y);return e&&d.forEach(function(e){return t(o,e)}),u}function y(o,i,s,l){var u=st(s);"function"!=typeof u&&d("150"),null==(s=u.call(s))&&d("151");for(var c=u=null,m=i,y=i=0,b=null,v=s.next();null!==m&&!v.done;y++,v=s.next()){m.index>y?(b=m,m=null):b=m.sibling;var g=p(o,m,v.value,l);if(null===g){m||(m=b);break}e&&m&&null===g.alternate&&t(o,m),i=a(g,i,y),null===c?u=g:c.sibling=g,c=g,m=b}if(v.done)return n(o,m),u;if(null===m){for(;!v.done;y++,v=s.next())null!==(v=f(o,v.value,l))&&(i=a(v,i,y),null===c?u=v:c.sibling=v,c=v);return u}for(m=r(o,m);!v.done;y++,v=s.next())null!==(v=h(m,o,y,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?y:v.key),i=a(v,i,y),null===c?u=v:c.sibling=v,c=v);return e&&m.forEach(function(e){return t(o,e)}),u}return function(e,r,a,s){"object"==typeof a&&null!==a&&a.type===et&&null===a.key&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case Ye:e:{var u=a.key;for(l=r;null!==l;){if(l.key===u){if(10===l.tag?a.type===et:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===et?a.props.children:a.props,s)).ref=fr(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===et?((r=Xn(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Kn(a,e.mode,s)).ref=fr(e,r,a),s.return=e,e=s)}return i(e);case Je:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yn(a,e.mode,s)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,a,s)):(n(e,r),r=Qn(a,e.mode,s)),r.return=e,i(e=r);if(dr(a))return m(e,r,a,s);if(st(a))return y(e,r,a,s);if(l&&pr(e,a),void 0===a)switch(e.tag){case 2:case 1:d("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var mr=hr(!0),yr=hr(!1);function br(e,t,n,r,o,i,s){function u(e,t,n){f(e,t,n,t.expirationTime)}function f(e,t,n,r){t.child=null===e?yr(t,null,n,r):mr(t,e.child,n,r)}function p(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,a){if(p(e,t),!n&&!o)return r&&T(t,!1),b(e,t);n=t.stateNode,Xe.current=t;var i=o?null:n.render();return t.effectTag|=1,o&&(f(e,t,null,a),t.child=null),f(e,t,i,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&T(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?O(e,t.pendingContext,t.pendingContext!==t.context):t.context&&O(e,t.context,!1),w(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){a=o;break}a=a.return}o=a}}function b(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=qn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,g=e.shouldDeprioritizeSubtree,x=t.pushHostContext,w=t.pushHostContainer,_=r.pushProvider,k=n.getMaskedContext,C=n.getUnmaskedContext,j=n.hasContextChanged,E=n.pushContextProvider,O=n.pushTopLevelContextObject,T=n.invalidateContextProvider,P=o.enterHydrationState,S=o.resetHydrationState,N=o.tryToClaimNextHydratableInstance,A=(e=function(e,t,n,r,o){function i(e,t,n,r,o,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,o))}function s(e,t){t.updater=b,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&b.enqueueReplaceState(t,t.state,null)}function d(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var f=e.cacheContext,p=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,y=e.hasContextChanged,b={isMounted:Xt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:d,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),i=o?p(e,r):c,l=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=l,null!==(t=d(e,0,t,l))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&f(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,a=e.pendingProps,i=h(e);o.props=a,o.state=e.memoizedState,o.refs=c,o.context=p(e,i),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&b.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=ur(r,e,n,o,a,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var l=e.memoizedProps,c=e.pendingProps,f=s.context,m=h(e);m=p(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==c||f!==m)&&u(e,s,c,m),f=e.memoizedState,t=null!==e.updateQueue?ur(null,e,e.updateQueue,s,c,t):f;var b=void 0;return l!==c&&(b=d(e,0,c,t)),null!==b&&void 0!==b&&(t=null===t||void 0===t?b:a({},t,b)),l!==c||f!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=i(e,l,c,f,t,m))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,c),o(e,t)),s.props=c,s.state=t,s.context=m,l):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var c=t.memoizedProps,f=t.pendingProps,m=l.context,b=h(t);b=p(t,b),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(c!==f||m!==b)&&u(t,l,f,b),m=t.memoizedState,n=null!==t.updateQueue?ur(e,t,t.updateQueue,l,f,n):m;var v=void 0;return c!==f&&(v=d(t,0,f,n)),null!==v&&void 0!==v&&(n=null===n||void 0===n?v:a({},n,v)),c!==f||m!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,c,f,m,n,b))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(f,n,b),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(f,n,b)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,f),o(t,n)),l.props=f,l.state=n,l.context=b,v):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,R=e.callGetDerivedStateFromProps,I=e.constructClassInstance,M=e.mountClassInstance,z=e.resumeMountClassInstance,F=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:E(t);break;case 4:w(t,t.stateNode.containerInfo);break;case 13:_(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var r=t.type,o=t.pendingProps,i=C(t);return r=r(o,i=k(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=R(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=E(t),A(t,r),M(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,j()||t.memoizedProps!==n?(r=C(t),o=o(n,r=k(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=b(e,t),e;case 2:o=E(t),null===e?null===t.stateNode?(I(t,t.pendingProps),M(t,n),r=!0):r=z(t,n):r=F(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=ur(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){S(),e=b(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&P(t)?(t.effectTag|=2,t.child=yr(t,null,r,n)):(S(),u(e,t,r)),t.memoizedState=o,e=t.child}else S(),e=b(e,t);return e;case 5:return x(t),null===e&&N(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,j()||s!==r||((s=1&t.mode&&g(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,v(o,r)?s=null:i&&v(o,i)&&(t.effectTag|=16),p(e,t),1073741823!==n&&1&t.mode&&g(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=b(e,t),e;case 6:return null===e&&N(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,j()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?yr(t,t.stateNode,r,n):mr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return w(t,t.stateNode.containerInfo),o=t.pendingProps,j()||t.memoizedProps!==o?(null===e?t.child=mr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=b(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,j()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=b(e,t),e;case 11:return n=t.pendingProps.children,j()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=b(e,t),e;case 13:return function(e,t,n){var r=t.type.context,o=t.pendingProps,a=t.memoizedProps;if(!j()&&a===o)return t.stateNode=0,_(t),b(e,t);var i=o.value;if(t.memoizedProps=o,null===a)i=1073741823;else if(a.value===o.value){if(a.children===o.children)return t.stateNode=0,_(t),b(e,t);i=0}else{var s=a.value;if(s===i&&(0!==s||1/s==1/i)||s!=s&&i!=i){if(a.children===o.children)return t.stateNode=0,_(t),b(e,t);i=0}else if(i="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823,0==(i|=0)){if(a.children===o.children)return t.stateNode=0,_(t),b(e,t)}else y(t,r,i,n)}return t.stateNode=i,_(t),u(e,t,o.children),t.child}(e,t,n);case 12:r=t.type,i=t.pendingProps;var l=t.memoizedProps;return o=r._currentValue,s=r._changedBits,j()||0!==s||l!==i?(t.memoizedProps=i,void 0!==(l=i.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(s&l)&&y(t,r,s,n),u(e,t,n=(n=i.children)(o)),e=t.child):e=b(e,t),e;default:d("156")}}}}function vr(e,t){var n=t.source;null===t.stack&&ut(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var gr={};function xr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)I(e),e=e.return;te=null,ne=0,ee=null,ae=!1}function n(e){return null!==ie&&ie.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=N(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var a=o.updateQueue;a=null===a?0:a.expirationTime;break e;default:a=0}for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ae=!0;break}e=n}else{if(null!==(e=R(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=S(e.alternate,e,ne);return null===t&&(t=r(e)),Xe.current=null,t}function i(e,n,a){J&&d("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=qn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(a)for(;null!==ee&&!C();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){i=!0,j(e);break}var s=(a=ee).return;if(null===s){i=!0,j(e);break}A(s,a,e),ee=r(a)}break}return J=!1,i||null!==ee?null:ae?(e.pendingCommitExpirationTime=n,e.current.alternate):void d("262")}function s(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ut(e)},next:null}),f(t,r)}function l(e,t){e:{J&&!oe&&d("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function u(e){return e=0!==Z?Z:J?oe?1:ne:1&e.mode?we?10*(1+((p()+50)/10|0)):25*(1+((p()+500)/25|0)):1,we&&(0===he||e>he)&&(he=e),e}function f(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!oe&&te===r||y(r,n),Ce>ke&&d("185")}e=e.return}n=void 0}return n}function p(){return Y=W()-Q,2+(Y/10|0)}function h(e,t,n,r,o){var a=Z;Z=1;try{return e(t,n,r,o)}finally{Z=a}}function m(e){if(0!==ue){if(e>ue)return;q(ce)}var t=W()-Q;ue=e,ce=$(v,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(se=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}de||(ge?xe&&(fe=e,pe=1,_(e,1,!1)):1===t?g():m(t))}function b(){var e=0,t=null;if(null!==le)for(var n=le,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&d("244"),r===r.nextScheduledRoot){se=le=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=fe)&&n===t&&1===e?Ce++:Ce=0,fe=t,pe=e}function v(e){x(0,!0,e)}function g(){x(1,!1,null)}function x(e,t,n){if(ve=n,b(),t)for(;null!==fe&&0!==pe&&(0===e||e>=pe)&&(!me||p()>=pe);)_(fe,pe,!me),b();else for(;null!==fe&&0!==pe&&(0===e||e>=pe);)_(fe,pe,!1),b();null!==ve&&(ue=0,ce=-1),0!==pe&&m(pe),ve=null,me=!1,w()}function w(){if(Ce=0,null!==_e){var e=_e;_e=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,be=e)}}}if(ye)throw e=be,be=null,ye=!1,e}function _(e,t,n){de&&d("245"),de=!0,n?null!==(n=e.finishedWork)?k(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(C()?e.finishedWork=n:k(e,n,t))):null!==(n=e.finishedWork)?k(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&k(e,n,t)),de=!1}function k(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===_e?_e=[r]:_e.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=J=!0,(n=t.stateNode).current===t&&d("177"),0===(r=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0;var o=p();if(Xe.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;for(K(n.containerInfo),re=a;null!==re;){var i=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&M(re.alternate,re),re=re.nextEffect}catch(e){i=!0,s=e}i&&(null===re&&d("178"),l(re,s),null!==re&&(re=re.nextEffect))}for(re=a;null!==re;){i=!1,s=void 0;try{for(;null!==re;){var u=re.effectTag;if(16&u&&z(re),128&u){var c=re.alternate;null!==c&&V(c)}switch(14&u){case 2:F(re),re.effectTag&=-3;break;case 6:F(re),re.effectTag&=-3,L(re.alternate,re);break;case 4:L(re.alternate,re);break;case 8:D(re)}re=re.nextEffect}}catch(e){i=!0,s=e}i&&(null===re&&d("178"),l(re,s),null!==re&&(re=re.nextEffect))}for(X(n.containerInfo),n.current=t,re=a;null!==re;){u=!1,c=void 0;try{for(a=n,i=o,s=r;null!==re;){var f=re.effectTag;36&f&&U(a,re.alternate,re,i,s),256&f&&H(re,j),128&f&&B(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){u=!0,c=e}u&&(null===re&&d("178"),l(re,c),null!==re&&(re=re.nextEffect))}J=oe=!1,er(t.stateNode),0===(t=n.current.expirationTime)&&(ie=null),e.remainingExpirationTime=t}function C(){return!(null===ve||ve.timeRemaining()>je)&&(me=!0)}function j(e){null===fe&&d("246"),fe.remainingExpirationTime=0,ye||(ye=!0,be=e)}var E=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),O=function(e,t){function n(e){return e===gr&&d("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var a=t.push,i=t.pop,s=e(gr),l=e(gr),u=e(gr);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(u.current)},popHostContainer:function(e){i(s,e),i(l,e),i(u,e)},popHostContext:function(e){l.current===e&&(i(s,e),i(l,e))},pushHostContainer:function(e,t){a(u,t,e),t=o(t),a(l,e,e),a(s,t,e)},pushHostContext:function(e){var t=n(u.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(a(l,e,e),a(s,t,e))}}}(e,E),T=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",lt(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,s=e.pop,l=o(c),u=o(!1),f=c;return{getUnmaskedContext:function(e){return n(e)?f:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return c;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=n[a];return o&&t(e,n,i),i},hasContextChanged:function(){return u.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(u,e),s(l,e))},popTopLevelContextObject:function(e){s(u,e),s(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&d("168"),i(l,t,e),i(u,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||c,f=l.current,i(l,t,e),i(u,u.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||d("169"),t){var o=r(e,f);n.__reactInternalMemoizedMergedChildContext=o,s(u,e),s(l,e),i(l,o,e)}else s(u,e);i(u,t,e)},findCurrentUnmaskedContext:function(e){for((2!==Kt(e)||2!==e.tag)&&d("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||d("171")}return e.stateNode.context}}}(E);E=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),a=t(null),i=t(0);return{pushProvider:function(e){var t=e.type.context;n(i,t._changedBits,e),n(a,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=i.current,n=a.current;r(o,e),r(a,e),r(i,e),(e=e.type.context)._currentValue=n,e._changedBits=t}}}(E);var P=function(e){function t(e,t){var n=new $n(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,s=e.getNextHydratableSibling,l=e.getFirstHydratableChild,u=e.hydrateInstance,c=e.hydrateTextInstance,f=null,p=null,h=!1;return{enterHydrationState:function(e){return p=l(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){p=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=p;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,p)}f=e,p=l(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=u(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=p;n;)t(e,n),n=s(n);return r(e),p=f?s(e.stateNode):null,!0}}}(e),S=br(e,O,T,E,P,f,u).beginWork,N=function(e,t,n,r,o){function a(e){e.effectTag|=4}var i=e.createInstance,s=e.createTextInstance,l=e.appendInitialChild,u=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.persistence,p=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,y=t.popHostContainer,b=n.popContextProvider,v=n.popTopLevelContextObject,g=r.popProvider,x=o.prepareToHydrateHostInstance,w=o.prepareToHydrateHostTextInstance,_=o.popHydrationState,k=void 0,C=void 0,j=void 0;return e.mutation?(k=function(){},C=function(e,t,n){(t.updateQueue=n)&&a(t)},j=function(e,t,n,r){n!==r&&a(t)}):d(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return b(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(_(t),t.effectTag&=-3),k(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=p();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,E=t.stateNode,O=m();E=c(E,o,f,r,n,O),C(e,t,E,o,f,r,n,O),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&d("166"),null;if(e=m(),_(t))x(t,n,e)&&a(t);else{f=i(o,r,n,e,t);e:for(O=t.child;null!==O;){if(5===O.tag||6===O.tag)l(f,O.stateNode);else if(4!==O.tag&&null!==O.child){O.child.return=O,O=O.child;continue}if(O===t)break;for(;null===O.sibling;){if(null===O.return||O.return===t)break e;O=O.return}O.sibling.return=O.return,O=O.sibling}u(f,o,r,n,e)&&a(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)j(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&d("166"),null;e=p(),n=m(),_(t)?w(t)&&a(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||d("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)d("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=mr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),k(t),null;case 13:return g(t),null;case 12:return null;case 0:d("167");default:d("156")}}}}(e,O,T,E,P).completeWork,A=(O=function(e,t,n,r,o){var a=e.popHostContainer,i=e.popHostContext,s=t.popContextProvider,l=t.popTopLevelContextObject,u=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ut(t)};do{switch(e.tag){case 3:return ir(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ir(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return a(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return i(e),null;case 4:return a(e),null;case 13:return u(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:a(e),l(e);break;case 5:i(e);break;case 4:a(e);break;case 13:u(e)}}}}(O,T,E,0,n)).throwException,R=O.unwindWork,I=O.unwindInterruptedWork,M=(O=function(e,t,n,r,o){function a(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function i(e){switch(tr(e),e.tag){case 2:a(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:a(e);break;case 7:s(e.stateNode);break;case 4:f&&u(e)}}function s(e){for(var t=e;;)if(i(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function u(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?_(r,t.stateNode):w(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:i(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,f=e.mutation;e=e.persistence,f||d(e?"235":"236");var p=f.commitMount,h=f.commitUpdate,m=f.resetTextContent,y=f.commitTextUpdate,b=f.appendChild,v=f.appendChildToContainer,g=f.insertBefore,x=f.insertInContainerBefore,w=f.removeChild,_=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:d("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?x(t,o.stateNode,n):g(t,o.stateNode,n):r?v(t,o.stateNode):b(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){u(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&h(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&cr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}cr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&p(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:d("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&d("264");var a=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<a.length;n++){var i=(r=a[n]).value,s=r.stack;vr(e,r),t.componentDidCatch(i,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&d("264"),a=n.capturedValues,n.capturedValues=null,n=0;n<a.length;n++)vr(e,r=a[n]),t(r.value);break;default:d("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ie?ie=new Set([e]):ie.add(e)})).commitBeforeMutationLifeCycles,z=O.commitResetTextContent,F=O.commitPlacement,D=O.commitDeletion,L=O.commitWork,U=O.commitLifeCycles,H=O.commitErrorLogging,B=O.commitAttachRef,V=O.commitDetachRef,W=e.now,$=e.scheduleDeferredCallback,q=e.cancelDeferredCallback,K=e.prepareForCommit,X=e.resetAfterCommit,Q=W(),Y=Q,G=0,Z=0,J=!1,ee=null,te=null,ne=0,re=null,oe=!1,ae=!1,ie=null,se=null,le=null,ue=0,ce=-1,de=!1,fe=null,pe=0,he=0,me=!1,ye=!1,be=null,ve=null,ge=!1,xe=!1,we=!1,_e=null,ke=1e3,Ce=0,je=1;return{recalculateCurrentTime:p,computeExpirationForFiber:u,scheduleWork:f,requestWork:y,flushRoot:function(e,t){de&&d("253"),fe=e,pe=t,_(e,t,!1),g(),w()},batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||de||g()}},unbatchedUpdates:function(e,t){if(ge&&!xe){xe=!0;try{return e(t)}finally{xe=!1}}return e(t)},flushSync:function(e,t){de&&d("187");var n=ge;ge=!0;try{return h(e,t)}finally{ge=n,g()}},flushControlled:function(e){var t=ge;ge=!0;try{h(e)}finally{(ge=t)||de||x(1,!1,null)}},deferredUpdates:function(e){var t=Z;Z=25*(1+((p()+500)/25|0));try{return e()}finally{Z=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(we)return e(t,n);ge||de||0===he||(x(he,!1,null),he=0);var r=we,o=ge;ge=we=!0;try{return e(t,n)}finally{we=r,(ge=o)||de||g()}},flushInteractiveUpdates:function(){de||0===he||(x(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((p()+500)/25|0));return e<=G&&(e=G+1),G=e},legacyContext:T}}function wr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var i=u(n);n=d(n)?f(n,i):i}else n=c;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),s(r,o),o}function n(e){return null===(e=function(e){if(!(e=Yt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var r=e.getPublicInstance,o=(e=xr(e)).recalculateCurrentTime,i=e.computeExpirationForFiber,s=e.scheduleWork,l=e.legacyContext,u=l.findCurrentUnmaskedContext,d=l.isContextProvider,f=l.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new $n(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,r,a){var s=n.current;return t(e,n,r,o(),s=i(s),a)},updateContainerAtExpirationTime:function(e,n,r,a,i){return t(e,n,r,o(),a,i)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return r(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:n,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Yt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Gn=Jn(function(e){return t.onCommitFiberRoot(n,e)}),Zn=Jn(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return n(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var _r=Object.freeze({default:wr}),kr=_r&&wr||_r,Cr=kr.default?kr.default:kr;var jr="object"==typeof performance&&"function"==typeof performance.now,Er=void 0;Er=jr?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Tr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Pr=null,Sr=!1,Nr=-1,Ar=!1,Rr=0,Ir=33,Mr=33,zr=void 0;zr=jr?{didTimeout:!1,timeRemaining:function(){var e=Rr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Rr-Date.now();return 0<e?e:0}};var Fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Fr){if(Sr=!1,e=Er(),0>=Rr-e){if(!(-1!==Nr&&Nr<=e))return void(Ar||(Ar=!0,requestAnimationFrame(Dr)));zr.didTimeout=!0}else zr.didTimeout=!1;Nr=-1,e=Pr,Pr=null,null!==e&&e(zr)}},!1);var Dr=function(e){Ar=!1;var t=e-Rr+Mr;t<Mr&&Ir<Mr?(8>t&&(t=8),Mr=t<Ir?Ir:t):Ir=t,Rr=e+Mr,Sr||(Sr=!0,window.postMessage(Fr,"*"))};Or=function(e,t){return Pr=e,null!=t&&"number"==typeof t.timeout&&(Nr=Er()+t.timeout),Ar||(Ar=!0,requestAnimationFrame(Dr)),0},Tr=function(){Pr=null,Sr=!1,Nr=-1}}else Or=window.requestIdleCallback,Tr=window.cancelIdleCallback;else Or=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Tr=function(e){clearTimeout(e)};function Lr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Ur(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Br(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Vr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Wr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function $r(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var qr="http://www.w3.org/1999/xhtml",Kr="http://www.w3.org/2000/svg";function Xr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Xr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Yr,Gr=void 0,Zr=(Yr=function(e,t){if(e.namespaceURI!==Kr||"innerHTML"in e)e.innerHTML=t;else{for((Gr=Gr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Gr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Yr(e,t)})}:Yr);function Jr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},to=["Webkit","ms","Moz","O"];function no(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||eo.hasOwnProperty(o)&&eo[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(eo).forEach(function(e){to.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),eo[t]=eo[e]})});var ro=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function oo(e,t,n){t&&(ro[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var io=qr,so=i.thatReturns("");function lo(e,t){var n=Rn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?gn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(gn("topFocus","focus",e),gn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&gn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&gn("topClose","close",e),n.topClose=!0):Tn.hasOwnProperty(o)&&vn(o,Tn[o],e),n[o]=!0)}}function uo(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===io&&(r=Xr(e)),r===io?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":vn("topLoad","load",e);var s=n;break;case"video":case"audio":for(s in Pn)Pn.hasOwnProperty(s)&&vn(s,Pn[s],e);s=n;break;case"source":vn("topError","error",e),s=n;break;case"img":case"image":case"link":vn("topError","error",e),vn("topLoad","load",e),s=n;break;case"form":vn("topReset","reset",e),vn("topSubmit","submit",e),s=n;break;case"details":vn("topToggle","toggle",e),s=n;break;case"input":gt(e,n),s=vt(e,n),vn("topInvalid","invalid",e),lo(r,"onChange");break;case"option":s=Lr(e,n);break;case"select":Hr(e,n),s=a({},n,{value:void 0}),vn("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":Vr(e,n),s=Br(e,n),vn("topInvalid","invalid",e),lo(r,"onChange");break;default:s=n}oo(t,s,so);var l,u=s;for(l in u)if(u.hasOwnProperty(l)){var c=u[l];"style"===l?no(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Zr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&Jr(e,c):"number"==typeof c&&Jr(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(g.hasOwnProperty(l)?null!=c&&lo(r,l):null!=c&&bt(e,l,c,o))}switch(t){case"input":qe(e),_t(e,n);break;case"textarea":qe(e),$r(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Ur(e,!!n.multiple,t,!1):null!=n.defaultValue&&Ur(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=i)}}function po(e,t,n,r,o){var s=null;switch(t){case"input":n=vt(e,n),r=vt(e,r),s=[];break;case"option":n=Lr(e,n),r=Lr(e,r),s=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),s=[];break;case"textarea":n=Br(e,n),r=Br(e,r),s=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=i)}oo(t,r,so),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var u=n[e];for(t in u)u.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(g.hasOwnProperty(e)?s||(s=[]):(s=s||[]).push(e,null));for(e in r){var c=r[e];if(u=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==u&&(null!=c||null!=u))if("style"===e)if(u){for(t in u)!u.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&u[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(s||(s=[]),s.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(e,""+c)):"children"===e?u===c||"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(g.hasOwnProperty(e)?(null!=c&&lo(o,e),s||u===c||(s=[])):(s=s||[]).push(e,c))}return l&&(s=s||[]).push("style",l),s}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),ao(n,r),r=ao(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],s=t[a+1];"style"===i?no(e,s):"dangerouslySetInnerHTML"===i?Zr(e,s):"children"===i?Jr(e,s):bt(e,i,s,r)}switch(n){case"input":wt(e,o);break;case"textarea":Wr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Ur(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Ur(e,!!o.multiple,o.defaultValue,!0):Ur(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":vn("topLoad","load",e);break;case"video":case"audio":for(var a in Pn)Pn.hasOwnProperty(a)&&vn(a,Pn[a],e);break;case"source":vn("topError","error",e);break;case"img":case"image":case"link":vn("topError","error",e),vn("topLoad","load",e);break;case"form":vn("topReset","reset",e),vn("topSubmit","submit",e);break;case"details":vn("topToggle","toggle",e);break;case"input":gt(e,n),vn("topInvalid","invalid",e),lo(o,"onChange");break;case"select":Hr(e,n),vn("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":Vr(e,n),vn("topInvalid","invalid",e),lo(o,"onChange")}for(var s in oo(t,n,so),r=null,n)n.hasOwnProperty(s)&&(a=n[s],"children"===s?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):g.hasOwnProperty(s)&&null!=a&&lo(o,s));switch(t){case"input":qe(e),_t(e,n);break;case"textarea":qe(e),$r(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=i)}return r}function yo(e,t){return e.nodeValue!==t}var bo=Object.freeze({createElement:uo,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(wt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||d("90"),Ke(r),wt(r,o)}}}break;case"textarea":Wr(e,n);break;case"select":null!=(t=n.value)&&Ur(e,!!n.multiple,t,!1)}}});Ne.injectFiberControlledHostComponent(bo);var vo=null,go=null;function xo(e){this._expirationTime=jo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function wo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function _o(e,t,n){this._internalRoot=jo.createContainer(e,t,n)}function ko(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Co(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}xo.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new wo;return jo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},xo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&d("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,jo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},xo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},wo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&d("191",n),n()}}},_o.prototype.render=function(e,t){var n=this._internalRoot,r=new wo;return null!==(t=void 0===t?null:t)&&r.then(t),jo.updateContainer(e,n,null,r._onCommit),r},_o.prototype.unmount=function(e){var t=this._internalRoot,n=new wo;return null!==(e=void 0===e?null:e)&&n.then(e),jo.updateContainer(null,t,null,n._onCommit),n},_o.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new wo;return null!==(n=void 0===n?null:n)&&o.then(n),jo.updateContainer(t,r,e,o._onCommit),o},_o.prototype.createBatch=function(){var e=new xo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var jo=Cr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=yn;var e=s();if(zn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,l=-1,u=0,c=0,d=e,f=null;t:for(;;){for(var p;d!==t||0!==r&&3!==d.nodeType||(i=a+r),d!==o||0!==n&&3!==d.nodeType||(l=a+n),3===d.nodeType&&(a+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===e)break t;if(f===t&&++u===r&&(i=a),f===o&&++c===n&&(l=a),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}t=-1===i||-1===l?null:{start:i,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;go={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=go,t=s(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&u(document.documentElement,n)){if(zn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[re()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Mn(n,e);var a=Mn(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}go=null,bn(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=uo(e,t,n,r))[U]=o,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),Co(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[U]=r,e},now:Er,mutation:{commitMount:function(e,t,n){Co(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[H]=o,ho(e,t,n,r,o)},resetTextContent:function(e){Jr(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[U]=a,e[H]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[U]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Tr}),Eo=jo;function Oo(e,t,n,r,o){ko(n)||d("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=jo.getPublicRootInstance(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new _o(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=jo.getPublicRootInstance(a._internalRoot);s.call(e)}}jo.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return jo.getPublicRootInstance(a._internalRoot)}function To(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ko(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Je,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ze=Eo.batchedUpdates,Fe=Eo.interactiveUpdates,De=Eo.flushInteractiveUpdates;var Po={createPortal:To,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return jo.findHostInstance(t);"function"==typeof e.render?d("188"):d("213",Object.keys(e))},hydrate:function(e,t,n){return Oo(null,e,t,!0,n)},render:function(e,t,n){return Oo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),Oo(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ko(e)||d("40"),!!e._reactRootContainer&&(jo.unbatchedUpdates(function(){Oo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return To.apply(void 0,arguments)},unstable_batchedUpdates:jo.batchedUpdates,unstable_deferredUpdates:jo.deferredUpdates,flushSync:jo.flushSync,unstable_flushControlled:jo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:D,EventPluginRegistry:k,EventPropagators:te,ReactControlledComponent:Me,ReactDOMComponentTree:$,ReactDOMEventListener:_n},unstable_createRoot:function(e,t){return new _o(e,!0,null!=t&&!0===t.hydrate)}};jo.injectIntoDevTools({findFiberByHostInstance:B,bundleType:0,version:"16.3.0",rendererPackageName:"react-dom"});var So=Object.freeze({default:Po}),No=So&&Po||So;e.exports=No.default?No.default:No},"./node_modules/react-dom/index.js":function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n("./node_modules/react-dom/cjs/react-dom.production.min.js")},"./node_modules/react-spinners/dist/helpers/index.js":function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.calculateRgba=function(e,t){if("#"===e[0]&&(e=e.slice(1)),3===e.length){var n="";e.split("").forEach(function(e){n+=e,n+=e}),e=n}var r=e.match(/.{2}/g).map(function(e){return parseInt(e,16)}).join(", ");return"rgba("+r+", "+t+")"}})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/index.js":function(e,t,n){var r,o,a;o=[e,n("./node_modules/react-spinners/dist/spinners/BarLoader.js"),n("./node_modules/react-spinners/dist/spinners/BeatLoader.js"),n("./node_modules/react-spinners/dist/spinners/BounceLoader.js"),n("./node_modules/react-spinners/dist/spinners/CircleLoader.js"),n("./node_modules/react-spinners/dist/spinners/ClipLoader.js"),n("./node_modules/react-spinners/dist/spinners/ClimbingBoxLoader.js"),n("./node_modules/react-spinners/dist/spinners/DotLoader.js"),n("./node_modules/react-spinners/dist/spinners/FadeLoader.js"),n("./node_modules/react-spinners/dist/spinners/GridLoader.js"),n("./node_modules/react-spinners/dist/spinners/HashLoader.js"),n("./node_modules/react-spinners/dist/spinners/MoonLoader.js"),n("./node_modules/react-spinners/dist/spinners/PacmanLoader.js"),n("./node_modules/react-spinners/dist/spinners/PropagateLoader.js"),n("./node_modules/react-spinners/dist/spinners/PulseLoader.js"),n("./node_modules/react-spinners/dist/spinners/RingLoader.js"),n("./node_modules/react-spinners/dist/spinners/RiseLoader.js"),n("./node_modules/react-spinners/dist/spinners/RotateLoader.js"),n("./node_modules/react-spinners/dist/spinners/ScaleLoader.js"),n("./node_modules/react-spinners/dist/spinners/SyncLoader.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a,i,s,l,u,c,d,f,p,h,m,y,b,v,g){"use strict";var x=L(t),w=L(n),_=L(r),k=L(o),C=L(a),j=L(i),E=L(s),O=L(l),T=L(u),P=L(c),S=L(d),N=L(f),A=L(p),R=L(h),I=L(m),M=L(y),z=L(b),F=L(v),D=L(g);function L(e){return e&&e.__esModule?e:{default:e}}e.exports={BarLoader:x.default,BeatLoader:w.default,BounceLoader:_.default,CircleLoader:k.default,ClipLoader:C.default,ClimbingBoxLoader:j.default,DotLoader:E.default,FadeLoader:O.default,GridLoader:T.default,HashLoader:P.default,MoonLoader:S.default,PacmanLoader:N.default,PropagateLoader:A.default,PulseLoader:R.default,RingLoader:I.default,RiseLoader:M.default,RotateLoader:z.default,ScaleLoader:F.default,SyncLoader:D.default}})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BarLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js"),n("./node_modules/react-spinners/dist/helpers/index.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;var i=l(t),s=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=(0,r.keyframes)("0%{left:-35%;right:100%}60%{left:100%;right:-90%}100%{left:100%;right:-90%}"),f=(0,r.keyframes)("0%{left:-200%;right:100%}60%{left:107%;right:-8%}100%{left:107%;right:-8%}"),p=e.Loader=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;overflow:hidden;background-color:",o.props.color,";background-clip:padding-box;display:block;border-radius:2px;will-change:left,right;animation-fill-mode:forwards;animation:",1===e?d:f," 2.1s ",2===e?"1.15s":""," ",1===e?"cubic-bezier(0.65, 0.815, 0.735, 0.395)":"cubic-bezier(0.165, 0.84, 0.44, 1)"," infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.width,"px;height:",o.props.height,"px;overflow:hidden;background-color:",(0,a.calculateRgba)(o.props.color,.2),";background-clip:padding-box;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);p.propTypes={loading:s.default.bool,color:s.default.string,width:s.default.number,height:s.default.number},p.defaultProps={loading:!0,color:"#000000",width:100,height:4};var h=(0,o.onlyUpdateForKeys)(["loading","color","width","height"])(p);h.defaultProps=p.defaultProps,e.default=h})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BeatLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("50%{transform:scale(0.75);opacity:0.2}100%{transform:scale(1);opacity:1}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;animation:",c," 0.7s ",e%2?"0s":"0.35s"," infinite linear;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},d.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BounceLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size,"px;width:",o.props.size,"px;background-color:",o.props.color,";border-radius:100%;opacity:0.6;top:0;left:0;animation-fill-mode:both;animation:",c," 2.1s ",1===e?"1s":"0s"," infinite ease-in-out;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},d.defaultProps={loading:!0,color:"#000000",size:60};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/CircleLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size*(1-e/10),"px;width:",o.props.size*(1-e/10),"px;border:1px solid ",o.props.color,";border-radius:100%;transition:2s;border-bottom:none;border-right:none;top:",.7*e*2.5,"%;left:",.35*e*2.5,"%;animation-fill-mode:'';animation:",c," 1s ",.2*e,"s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},d.defaultProps={loading:!0,color:"#000000",size:50};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ClimbingBoxLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:translate(0,-1em) rotate(-45deg)}5%{transform:translate(0,-1em) rotate(-50deg)}20%{transform:translate(1em,-2em) rotate(47deg)}25%{transform:translate(1em,-2em) rotate(45deg)}30%{transform:translate(1em,-2em) rotate(40deg)}45%{transform:translate(2em,-3em) rotate(137deg)}50%{transform:translate(2em,-3em) rotate(135deg)}55%{transform:translate(2em,-3em) rotate(130deg)}70%{transform:translate(3em,-4em) rotate(217deg)}75%{transform:translate(3em,-4em) rotate(220deg)}100%{transform:translate(0,-1em) rotate(-225deg)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(){return(0,r.css)("{position:absolute;left:0;bottom:-0.1em;height:1em;width:1em;background-color:transparent;border-radius:15%;border:0.25em solid ",o.props.color,";transform:translate(0,-1em) rotate(-45deg);animation-fill-mode:both;animation:",c," 2.5s infinite cubic-bezier(.79,0,.47,.97);}")},o.wrapper=function(){return(0,r.css)("{position:absolute;top:50%;left:50%;margin-top:-2.7em;margin-left:-2.7em;width:5.4em;height:5.4em;font-size:",o.props.size,";}")},o.hill=function(){return(0,r.css)("{position:absolute;width:7.1em;height:7.1em;top:1.7em;left:1.7em;border-left:0.25em solid ",o.props.color,";transform:rotate(45deg);}")},o.container=(0,r.css)("{position:relative;width:7.1em;height:7.1em;}"),u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.container},a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style()}),a.default.createElement("div",{className:this.hill()}))):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},d.defaultProps={loading:!0,color:"#000000",size:15};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ClipLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(0.8)}100%{transform:rotate(360deg) scale(1)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(){return(0,r.css)("{background:transparent !important;width:",o.props.size,"px;height:",o.props.size,"px;border-radius:100%;border:2px solid;border-color:",o.props.color,";border-bottom-color:transparent;display:inline-block;animation:",c," 0.75s 0s infinite linear;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.style()}):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},d.defaultProps={loading:!0,color:"#000000",size:35};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/DotLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("100%{transform:rotate(360deg)}"),d=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:",e%2?"0":"auto",";bottom:",e%2?"auto":"0",";height:",o.props.size/2,"px;width:",o.props.size/2,"px;background-color:",o.props.color,";border-radius:100%;animation-fill-mode:forwards;animation:",d," 2s ",2===e?"-1s":"0s"," infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;animation-fill-mode:forwards;animation:",c," 2s 0s infinite linear;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/FadeLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("50%{opacity:0.3}100%{opacity:1}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;width:",o.props.width,"px;margin:",o.props.margin,";background-color:",o.props.color,";border-radius:",o.props.radius,";transition:2s;animation-fill-mode:'both';animation:",c," 1.2s ",.12*e,"s infinite ease-in-out;}")},o.radius=20,o.quarter=o.radius/2+o.radius/5.5,o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;top:",o.radius,"px;left:",o.radius,"px;width:",3*o.radius,"px;height:",3*o.radius,"px;}")},o.a=function(){return(0,r.css)("composes:",o.style(1),";top:",o.radius,";left:0;")},o.b=function(){return(0,r.css)("composes:",o.style(2),";top:",o.quarter,";left:",o.quarter,";transform:rotate(-45deg);")},o.c=function(){return(0,r.css)("composes:",o.style(3),";top:0;left:",o.radius,";transform:rotate(90deg);")},o.d=function(){return(0,r.css)("composes:",o.style(4),";top:",-o.quarter,";left:",o.quarter,";transform:rotate(45deg);")},o.e=function(){return(0,r.css)("composes:",o.style(5),";top:",-o.radius,";left:0;")},o.f=function(){return(0,r.css)("composes:",o.style(6),";top:",-o.quarter,";left:",-o.quarter,";transform:rotate(-45deg);")},o.g=function(){return(0,r.css)("composes:",o.style(7),";top:0;left:",-o.radius,";transform:rotate(90deg);")},o.h=function(){return(0,r.css)("composes:",o.style(8),";top:",o.quarter,";left:",-o.quarter,";transform:rotate(45deg);")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.a()}),a.default.createElement("div",{className:this.b()}),a.default.createElement("div",{className:this.c()}),a.default.createElement("div",{className:this.d()}),a.default.createElement("div",{className:this.e()}),a.default.createElement("div",{className:this.f()}),a.default.createElement("div",{className:this.g()}),a.default.createElement("div",{className:this.h()})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number},d.defaultProps={loading:!0,color:"#000000",height:15,width:5,margin:"2px",radius:2};var f=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/GridLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1)}50%{transform:scale(0.5);opacity:0.7}100%{transform:scale(1);opacity:1}"),d=function(e){return Math.random()*e},f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,";height:",o.props.size,";margin:",o.props.margin,";border-radius:100%;animation-fill-mode:'both';animation:",c," ",e/100+.6,"s ",e/100-.2,"s infinite ease;}")},o.wrapper=function(){return(0,r.css)("{width:",3*parseFloat(o.props.size)+6*parseFloat(o.props.margin),"px;font-size:0;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))}),a.default.createElement("div",{className:this.style(d(100))})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/HashLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js"),n("./node_modules/react-spinners/dist/helpers/index.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=l(t),s=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.thickness=function(){return o.props.size/5},o.lat=function(){return(o.props.size-o.thickness())/2},o.offset=function(){return o.lat()-o.thickness()},o.color=function(){return(0,a.calculateRgba)(o.props.color,.75)},o.before=function(){return(0,r.keyframes)("0%{width:",o.thickness(),"px;box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}35%{width:",o.props.size,"px;box-shadow:0 ",-o.offset(),"px ",o.color(),",0 ",o.offset(),"px ",o.color(),"}70%{width:",o.thickness(),"px;box-shadow:",-o.lat(),"px ",-o.offset(),"px ",o.color(),",",o.lat(),"px ",o.offset(),"px ",o.color(),"}100%{box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}")},o.after=function(){return(0,r.keyframes)("0%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}35%{height:",o.props.size,"px;box-shadow:",o.offset(),"px 0 ",o.color(),",",-o.offset(),"px 0 ",o.color(),"}70%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",-o.lat(),"px ",o.color(),",",-o.offset(),"px ",o.lat(),"px ",o.color(),"}100%{box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}")},o.style=function(e){return(0,r.css)("{position:absolute;content:'';top:50%;left:50%;display:block;width:",o.props.size/5,"px;height:",o.props.size/5,"px;border-radius:",o.props.size/10,"px;transform:translate(-50%,-50%);animation-fill-mode:none;animation:",1===e?o.before():o.after()," 2s infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;transform:rotate(165deg);}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);d.propTypes={loading:s.default.bool,size:s.default.number,color:s.default.string},d.defaultProps={loading:!0,size:50,color:"#000000"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/MoonLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("100%{transform:rotate(360deg)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.moonSize=function(){return o.props.size/7},o.ballStyle=function(e){return(0,r.css)("{width:",e,"px;height:",e,"px;border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size+2*o.moonSize(),"px;height:",o.props.size+2*o.moonSize(),"px;animation:",c," 0.6s 0s infinite linear;animation-fill-mode:forwards;}")},o.ball=function(){return(0,r.css)("composes:",o.ballStyle(o.moonSize()),";background-color:",o.props.color,";opacity:0.8;position:absolute;top:",o.props.size/2-o.moonSize()/2,"px;animation:",c," 0.6s 0s infinite linear;animation-fill-mode:forwards;")},o.circle=function(){return(0,r.css)("composes:",o.ballStyle(o.props.size),";border:",o.moonSize(),"px solid ",o.props.color,";opacity:0.1;")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.ball()}),a.default.createElement("div",{className:this.circle()})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},d.defaultProps={loading:!0,color:"#000000",size:60};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PacmanLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=[(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(-44deg)}"),(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(44deg)}")],d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.ball=function(){return(0,r.keyframes)("75%{opacity:0.7}100%{transform:translate(",-4*o.props.size,"px,",-o.props.size/4,"px)}")},o.ballStyle=function(e){return(0,r.css)("{width:10px;height:10px;background-color:",o.props.color,";margin:",o.props.margin,";border-radius:100%;transform:translate(0,",-o.props.size/4,"px);position:absolute;top:25px;left:100px;animation:",o.ball()," 1s ",.25*e,"s infinite linear;animation-fill-mode:both;}")},o.s1=function(){return o.props.size+"px solid transparent"},o.s2=function(){return o.props.size+"px solid "+o.props.color},o.pacmanStyle=function(e){return(0,r.css)("{width:0;height:0;border-right:",o.s1(),";border-top:",0===e?o.s1():o.s2(),";border-left:",o.s2(),";border-bottom:",0===e?o.s2():o.s1(),";border-radius:",o.props.size,"px;position:absolute;animation:",c[e]," 0.8s infinite ease-in-out;animation-fill-mode:both;}")},o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;height:",o.props.size,"px;width:",o.props.size,"px;}")},o.pac=function(){return o.pacmanStyle(0)},o.man=function(){return(0,r.css)("composes:",o.pacmanStyle(1),";position:absolute;")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.pac()}),a.default.createElement("div",{className:this.man()}),a.default.createElement("div",{className:this.ballStyle(2)}),a.default.createElement("div",{className:this.ballStyle(3)}),a.default.createElement("div",{className:this.ballStyle(4)}),a.default.createElement("div",{className:this.ballStyle(5)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},d.defaultProps={loading:!0,color:"#000000",size:25,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PropagateLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=[1,3,5],d=[(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}50%{transform:translateX(-",c[1],"rem) scale(0.6)}75%{transform:translateX(-",c[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}50%{transform:translateX(-",c[1],"rem) scale(0.6)}75%{transform:translateX(-",c[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}75%{transform:translateX(-",c[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}75%{transform:translateX(",c[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}50%{transform:translateX(",c[1],"rem) scale(0.6)}75%{transform:translateX(",c[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}50%{transform:translateX(",c[1],"rem) scale(0.6)}75%{transform:translateX(",c[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}")],f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;font-size:",o.props.size/3,"px;width:",o.props.size,"px;height:",o.props.size,"px;background:",o.props.color,";border-radius:50%;animation:",d[e]," 1.5s  infinite;animation-fill-mode:forwards;}")},o.wrapper=function(){return(0,r.css)("{position:relative;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,size:i.default.number,color:i.default.string},f.defaultProps={loading:!0,size:15,color:"#000000"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PulseLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1);opacity:1}45%{transform:scale(0.1);opacity:0.7}80%{transform:scale(1);opacity:1}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",c," 0.75s ",.12*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},d.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RingLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(180deg) rotateY(360deg) rotateZ(360deg)}"),d=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(360deg) rotateY(180deg) rotateZ(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:0;left:0;width:",o.props.size,"px;height:",o.props.size,"px;border:",o.props.size/10,"px solid ",o.props.color,";opacity:0.4;border-radius:100%;animation-fill-mode:forwards;perspective:800px;animation:",1===e?c:d," 2s 0s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{width:",o.props.size,"px;height:",o.props.size,"px;position:relative;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RiseLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1.1)}25%{translateY(-",30,"px)}50%{transform:scale(0.4)}75%{transform:translateY(",30,"px)}100%{transform:translateY(0) scale(1.0)}"),d=(0,r.keyframes)("0%{transform:scale(0.4)}25%{translateY(",30,"px)}50%{transform:scale(1.1)}75%{transform:translateY(",-30,"px)}100%{transform:translateY(0) scale(0.75)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",e%2==0?c:d," 1s 0s infinite cubic-bezier(.15,.46,.9,.6);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RotateLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{opacity:0.8;position:absolute;top:0;left:",e%2?-28:25,"px;}")},o.ball=function(){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("composes:",o.ball(),";display:inline-block;position:relative;animation-fill-mode:both;animation:",c," 1s 0s infinite cubic-bezier(.7,-.13,.22,.86);")},o.long=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(1),";")},o.short=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(2),";")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.long()}),a.default.createElement("div",{className:this.short()})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},d.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ScaleLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scaley(1.0)}50%{transform:scaley(0.4)}100%{transform:scaley(1.0)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.width,"px;height:",o.props.height,"px;margin:",o.props.margin,";border-radius:",o.props.radius,"px;display:inline-block;animation:",c," 1s ",.1*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number},d.defaultProps={loading:!0,color:"#000000",height:35,width:4,margin:"2px",radius:2};var f=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/SyncLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("33%{transform:translateY(10px)}66%{transform:translateY(-10px)}100%{transform:translateY(0)}"),d=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",c," 0.6s ",.07*e,"s infinite ease-in-out;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);d.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},d.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(d);f.defaultProps=d.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/index.js":function(e,t,n){e.exports=n("./node_modules/react-spinners/dist/index.js")},"./node_modules/react/cjs/react.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/object-assign/index.js"),o=n("./node_modules/fbjs/lib/emptyObject.js"),a=n("./node_modules/fbjs/lib/emptyFunction.js"),i="function"==typeof Symbol&&Symbol.for,s=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,c=i?Symbol.for("react.strict_mode"):60108,d=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.async_mode"):60111,h=i?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||b}function g(){}function x(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||b}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=x.prototype=new g;w.constructor=x,r(w,v.prototype),w.isPureReactComponent=!0;var _={current:null},k=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function j(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:s,type:e,key:a,ref:i,props:o,_owner:_.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var O=/\/+/g,T=[];function P(e,t,n,r){if(T.length){var o=T.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function S(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>T.length&&T.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case s:case l:a=!0}}if(a)return n(r,e,""===t?"."+A(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var u=t+A(o=e[i],i);a+=N(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=m&&e[m]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),i=0;!(o=e.next()).done;)a+=N(o=o.value,u=t+A(o,i++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,a.thatReturnsArgument):null!=e&&(E(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function M(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(O,"$&/")+"/"),t=P(t,a,r,o),null==e||N(e,"",I,t),S(t)}var z={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||N(e,"",R,t),S(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return M(e,t,null,a.thatReturnsArgument),t},only:function(e){return E(e)||y("143"),e}},createRef:function(){return{current:null}},Component:v,PureComponent:x,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:d,context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},Fragment:u,StrictMode:c,unstable_AsyncMode:p,createElement:j,cloneElement:function(e,t,n){var o=void 0,a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var d=0;d<o;d++)c[d]=arguments[d+2];a.children=c}return{$$typeof:s,type:e.type,key:i,ref:l,props:a,_owner:u}},createFactory:function(e){var t=j.bind(null,e);return t.type=e,t},isValidElement:E,version:"16.3.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:_,assign:r}},F=Object.freeze({default:z}),D=F&&z||F;e.exports=D.default?D.default:D},"./node_modules/react/index.js":function(e,t,n){"use strict";e.exports=n("./node_modules/react/cjs/react.production.min.js")},"./node_modules/recompose/es/Recompose.js":function(e,t,n){"use strict";n.r(t),n.d(t,"mapProps",function(){return m}),n.d(t,"withProps",function(){return w}),n.d(t,"withPropsOnChange",function(){return k}),n.d(t,"withHandlers",function(){return j}),n.d(t,"defaultProps",function(){return E}),n.d(t,"renameProp",function(){return T}),n.d(t,"renameProps",function(){return S}),n.d(t,"flattenProp",function(){return N}),n.d(t,"withState",function(){return A}),n.d(t,"withStateHandlers",function(){return R}),n.d(t,"withReducer",function(){return I}),n.d(t,"branch",function(){return z}),n.d(t,"renderComponent",function(){return F}),n.d(t,"renderNothing",function(){return L}),n.d(t,"shouldUpdate",function(){return U}),n.d(t,"pure",function(){return H}),n.d(t,"onlyUpdateForKeys",function(){return B}),n.d(t,"onlyUpdateForPropTypes",function(){return V}),n.d(t,"withContext",function(){return W}),n.d(t,"getContext",function(){return $}),n.d(t,"lifecycle",function(){return q}),n.d(t,"toClass",function(){return X}),n.d(t,"setStatic",function(){return d}),n.d(t,"setPropTypes",function(){return Q}),n.d(t,"setDisplayName",function(){return f}),n.d(t,"compose",function(){return Y}),n.d(t,"getDisplayName",function(){return p}),n.d(t,"wrapDisplayName",function(){return h}),n.d(t,"isClassComponent",function(){return K}),n.d(t,"createSink",function(){return G}),n.d(t,"componentFromProp",function(){return Z}),n.d(t,"nest",function(){return J}),n.d(t,"hoistStatics",function(){return ee}),n.d(t,"componentFromStream",function(){return ae}),n.d(t,"componentFromStreamWithConfig",function(){return oe}),n.d(t,"mapPropsStream",function(){return le}),n.d(t,"mapPropsStreamWithConfig",function(){return se}),n.d(t,"createEventHandler",function(){return ce}),n.d(t,"createEventHandlerWithConfig",function(){return ue}),n.d(t,"setObservableConfig",function(){return ne});var r=n("./node_modules/react/index.js"),o=n.n(r),a=n("./node_modules/fbjs/lib/shallowEqual.js"),i=n.n(a);n.d(t,"shallowEqual",function(){return i.a});var s=n("./node_modules/hoist-non-react-statics/index.js"),l=n.n(s),u=n("./node_modules/change-emitter/lib/index.js"),c=n("./node_modules/symbol-observable/es/index.js"),d=function(e,t){return function(n){return n[e]=t,n}},f=function(e){return d("displayName",e)},p=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0},h=function(e,t){return t+"("+p(e)+")"},m=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(e(t))}}},y=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},g=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},x=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},w=function(e){return m(function(t){return b({},t,"function"==typeof e?e(t):e)})},_=function(e,t){for(var n={},r=0;r<t.length;r++){var o=t[r];e.hasOwnProperty(o)&&(n[o]=e[o])}return n},k=function(e,t){return function(n){var o=Object(r.createFactory)(n),a="function"==typeof e?e:function(t,n){return!i()(_(t,e),_(n,e))};return function(e){function n(){var r,o;y(this,n);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=o=x(this,e.call.apply(e,[this].concat(i))),o.computedProps=t(o.props),x(o,r)}return v(n,e),n.prototype.componentWillReceiveProps=function(e){a(this.props,e)&&(this.computedProps=t(e))},n.prototype.render=function(){return o(b({},this.props,this.computedProps))},n}(r.Component)}},C=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t(e[r],r));return n},j=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=x(this,e.call.apply(e,[this].concat(i))),a.call(r),x(r,n)}return v(t,e),t.prototype.componentWillReceiveProps=function(){this.cachedHandlers={}},t.prototype.render=function(){return n(b({},this.props,this.handlers))},t}(r.Component),a=function(){var t=this;this.cachedHandlers={},this.handlers=C("function"==typeof e?e(this.props):e,function(e,n){return function(){var r=t.cachedHandlers[n];if(r)return r.apply(void 0,arguments);var o=e(t.props);return t.cachedHandlers[n]=o,o.apply(void 0,arguments)}})};return o}},E=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){return n(e)};return o.defaultProps=e,o}},O=function(e,t){for(var n=g(e,[]),r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&delete n[o]}return n},T=function(e,t){return m(function(n){var r;return b({},O(n,[e]),((r={})[t]=n[e],r))})},P=Object.keys,S=function(e){return m(function(t){return b({},O(t,P(e)),(n=_(t,P(e)),r=function(t,n){return e[n]},P(n).reduce(function(e,t){var o=n[t];return e[r(o,t)]=o,e},{})));var n,r})},N=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(b({},t,t[e]))}}},A=function(e,t,n){return function(o){var a=Object(r.createFactory)(o);return function(r){function o(){var e,t;y(this,o);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return e=t=x(this,r.call.apply(r,[this].concat(i))),t.state={stateValue:"function"==typeof n?n(t.props):n},t.updateStateValue=function(e,n){return t.setState(function(t){var n=t.stateValue;return{stateValue:"function"==typeof e?e(n):e}},n)},x(t,e)}return v(o,r),o.prototype.render=function(){var n;return a(b({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.updateStateValue,n)))},o}(r.Component)}},R=function(e,t){return function(n){var o=Object(r.createFactory)(n),a=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=x(this,e.call.apply(e,[this].concat(a))),s.call(r),x(r,n)}return v(t,e),t.prototype.shouldComponentUpdate=function(e,t){var n=e!==this.props,r=!i()(t,this.state);return n||r},t.prototype.render=function(){return o(b({},this.props,this.state,this.stateUpdaters))},t}(r.Component),s=function(){var n=this;this.state="function"==typeof e?e(this.props):e,this.stateUpdaters=C(t,function(e){return function(t){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];t&&"function"==typeof t.persist&&t.persist(),n.setState(function(n,r){return e(n,r).apply(void 0,[t].concat(o))})}})};return a}},I=function(e,t,n,o){return function(a){var i=Object(r.createFactory)(a);return function(r){function a(){var e,t;y(this,a);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return e=t=x(this,r.call.apply(r,[this].concat(i))),t.state={stateValue:t.initializeStateValue()},t.dispatch=function(e){return t.setState(function(t){var r=t.stateValue;return{stateValue:n(r,e)}})},x(t,e)}return v(a,r),a.prototype.initializeStateValue=function(){return void 0!==o?"function"==typeof o?o(this.props):o:n(void 0,{type:"@@recompose/INIT"})},a.prototype.render=function(){var n;return i(b({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.dispatch,n)))},a}(r.Component)}},M=function(e){return e},z=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:M;return function(o){var a=void 0,i=void 0;return function(s){return e(s)?(a=a||Object(r.createFactory)(t(o)))(s):(i=i||Object(r.createFactory)(n(o)))(s)}}},F=function(e){return function(t){var n=Object(r.createFactory)(e);return function(e){return n(e)}}},D=function(e){function t(){return y(this,t),x(this,e.apply(this,arguments))}return v(t,e),t.prototype.render=function(){return null},t}(r.Component),L=function(e){return D},U=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){function r(){return y(this,r),x(this,t.apply(this,arguments))}return v(r,t),r.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},r.prototype.render=function(){return n(this.props)},r}(r.Component)}},H=function(e){return U(function(e,t){return!i()(e,t)})(e)},B=function(e){return U(function(t,n){return!i()(_(n,e),_(t,e))})},V=function(e){var t=e.propTypes;var n=Object.keys(t||{});return B(n)(e)},W=function(e,t){return function(n){var o=Object(r.createFactory)(n),a=function(e){function n(){var r,o;y(this,n);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=o=x(this,e.call.apply(e,[this].concat(i))),o.getChildContext=function(){return t(o.props)},x(o,r)}return v(n,e),n.prototype.render=function(){return o(this.props)},n}(r.Component);return a.childContextTypes=e,a}},$=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e,t){return n(b({},e,t))};return o.contextTypes=e,o}},q=function(e){return function(t){var n=Object(r.createFactory)(t);var o=function(e){function t(){return y(this,t),x(this,e.apply(this,arguments))}return v(t,e),t.prototype.render=function(){return n(b({},this.props,this.state))},t}(r.Component);return Object.keys(e).forEach(function(t){return o.prototype[t]=e[t]}),o}},K=function(e){return Boolean(e&&e.prototype&&"function"==typeof e.prototype.render)},X=function(e){if(K(e))return e;var t=function(t){function n(){return y(this,n),x(this,t.apply(this,arguments))}return v(n,t),n.prototype.render=function(){return"string"==typeof e?o.a.createElement(e,this.props):e(this.props,this.context)},n}(r.Component);return t.displayName=p(e),t.propTypes=e.propTypes,t.contextTypes=e.contextTypes,t.defaultProps=e.defaultProps,t},Q=function(e){return d("propTypes",e)};function Y(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var G=function(e){return function(t){function n(){return y(this,n),x(this,t.apply(this,arguments))}return v(n,t),n.prototype.componentWillMount=function(){e(this.props)},n.prototype.componentWillReceiveProps=function(t){e(t)},n.prototype.render=function(){return null},n}(r.Component)},Z=function(e){var t=function(t){return Object(r.createElement)(t[e],O(t,[e]))};return t.displayName="componentFromProp("+e+")",t},J=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.map(r.createFactory);return function(e){var t=g(e,[]),n=e.children;return o.reduceRight(function(e,n){return n(t,e)},n)}},ee=function(e){return function(t){var n=e(t);return l()(n,t),n}},te={fromESObservable:null,toESObservable:null},ne=function(e){te=e},re={fromESObservable:function(e){return"function"==typeof te.fromESObservable?te.fromESObservable(e):e},toESObservable:function(e){return"function"==typeof te.toESObservable?te.toESObservable(e):e}},oe=function(e){return function(t){return function(n){function r(){var o,a,i;y(this,r);for(var s=arguments.length,l=Array(s),d=0;d<s;d++)l[d]=arguments[d];return a=i=x(this,n.call.apply(n,[this].concat(l))),i.state={vdom:null},i.propsEmitter=Object(u.createChangeEmitter)(),i.props$=e.fromESObservable(((o={subscribe:function(e){return{unsubscribe:i.propsEmitter.listen(function(t){t?e.next(t):e.complete()})}}})[c.a]=function(){return this},o)),i.vdom$=e.toESObservable(t(i.props$)),x(i,a)}return v(r,n),r.prototype.componentWillMount=function(){var e=this;this.subscription=this.vdom$.subscribe({next:function(t){e.setState({vdom:t})}}),this.propsEmitter.emit(this.props)},r.prototype.componentWillReceiveProps=function(e){this.propsEmitter.emit(e)},r.prototype.shouldComponentUpdate=function(e,t){return t.vdom!==this.state.vdom},r.prototype.componentWillUnmount=function(){this.propsEmitter.emit(),this.subscription.unsubscribe()},r.prototype.render=function(){return this.state.vdom},r}(r.Component)}},ae=function(e){return oe(re)(e)},ie=function(e){return e},se=function(e){var t=oe({fromESObservable:ie,toESObservable:ie});return function(n){return function(o){var a=Object(r.createFactory)(o),i=e.fromESObservable,s=e.toESObservable;return t(function(e){var t;return(t={subscribe:function(t){var r=s(n(i(e))).subscribe({next:function(e){return t.next(a(e))}});return{unsubscribe:function(){return r.unsubscribe()}}}})[c.a]=function(){return this},t})}}},le=function(e){return se(re)(e)},ue=function(e){return function(){var t,n=Object(u.createChangeEmitter)(),r=e.fromESObservable(((t={subscribe:function(e){return{unsubscribe:n.listen(function(t){return e.next(t)})}}})[c.a]=function(){return this},t));return{handler:n.emit,stream:r}}},ce=ue(re)},"./node_modules/styled-components/dist/styled-components.browser.es.js":function(e,t,n){"use strict";n.r(t),function(r){n.d(t,"css",function(){return N}),n.d(t,"keyframes",function(){return ze}),n.d(t,"injectGlobal",function(){return Fe}),n.d(t,"isStyledComponent",function(){return O}),n.d(t,"consolidateStreamedStyles",function(){return T}),n.d(t,"ThemeProvider",function(){return Ce}),n.d(t,"withTheme",function(){return Ne}),n.d(t,"ServerStyleSheet",function(){return ce}),n.d(t,"StyleSheetManager",function(){return ue}),n.d(t,"__DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS",function(){return Ae});var o=n("./node_modules/is-plain-object/index.js"),a=n.n(o),i=n("./node_modules/stylis/stylis.js"),s=n.n(i),l=n("./node_modules/stylis-rule-sheet/index.js"),u=n.n(l),c=n("./node_modules/react/index.js"),d=n.n(c),f=n("./node_modules/prop-types/index.js"),p=n.n(f),h=n("./node_modules/hoist-non-react-statics/index.js"),m=n.n(h),y=/([A-Z])/g;var b=function(e){return e.replace(y,"-$1").toLowerCase()},v=/^ms-/;var g=function(e){return b(e).replace(v,"-ms-")},x=function e(t,n){return t.reduce(function(t,r){return void 0===r||null===r||!1===r||""===r?t:Array.isArray(r)?[].concat(t,e(r,n)):r.hasOwnProperty("styledComponentId")?[].concat(t,["."+r.styledComponentId]):"function"==typeof r?n?t.concat.apply(t,e([r(n)],n)):t.concat(r):t.concat(a()(r)?function e(t,n){var r=Object.keys(t).filter(function(e){var n=t[e];return void 0!==n&&null!==n&&!1!==n&&""!==n}).map(function(n){return a()(t[n])?e(t[n],n):g(n)+": "+t[n]+";"}).join(" ");return n?n+" {\n  "+r+"\n}":r}(r):r.toString())},[])},w=new s.a({global:!1,cascade:!1,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),_=new s.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),k=[],C=function(e){if(-2===e){var t=k;return k=[],t}},j=u()(function(e){k.push(e)});_.use([j,C]),w.use([j,C]);var E=function(e,t,n){var r=e.join("").replace(/^\s*\/\/.*$/gm,"");return _(n||!t?"":t,t&&n?n+" "+t+" { "+r+" }":r)};function O(e){return"function"==typeof e&&"string"==typeof e.styledComponentId}function T(){0}var P=function(e){return String.fromCharCode(e+(e>25?39:97))},S=function(e){var t="",n=void 0;for(n=e;n>52;n=Math.floor(n/52))t=P(n%52)+t;return P(n%52)+t},N=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return x(function(e,t){return t.reduce(function(t,n,r){return t.concat(n,e[r+1])},[e[0]])}(e,n))},A=void 0!==r&&r.env.SC_ATTR||"data-styled-components",R="__styled-components-stylesheet__",I="undefined"!=typeof window&&"HTMLElement"in window,M=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,z=function(e){var t=""+(e||""),n=[];return t.replace(M,function(e,t,r){return n.push({componentId:t,matchIndex:r}),e}),n.map(function(e,r){var o=e.componentId,a=e.matchIndex,i=n[r+1];return{componentId:o,cssFromDOM:i?t.slice(a,i.matchIndex):t.slice(a)}})},F=function(){return n.nc},D=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},L=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),U=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},H=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},B=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},V=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},W=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},$=function(e,t){e[t]=Object.create(null)},q=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},K=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},X=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets.length,n=0;n<t;n+=1){var r=document.styleSheets[n];if(r.ownerNode===e)return r}throw new Error},Q=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},Y=function(){throw new Error("")},G=function(e){return"\n/* sc-component-id: "+e+" */\n"},Z=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},J=function(e,t){return function(n){var r=F();return"<style "+[r&&'nonce="'+r+'"',A+'="'+K(t)+'"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},ee=function(e,t){return function(){var n,r=((n={})[A]=K(t),n),o=F();return o&&(r.nonce=o),d.a.createElement("style",U({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},te=function(e){return function(){return Object.keys(e)}},ne=function e(t,n){var r=void 0===t?Object.create(null):t,o=void 0===n?Object.create(null):n,a=function(e){var t=o[e];return void 0!==t?t:o[e]=[""]},i=function(){var e="";for(var t in o){var n=o[t][0];n&&(e+=G(t)+n)}return e};return{styleTag:null,getIds:te(o),hasNameForId:q(r),insertMarker:a,insertRules:function(e,t,n){a(e)[0]+=t.join(" "),W(r,e,n)},removeRules:function(e){var t=o[e];void 0!==t&&(t[0]="",$(r,e))},css:i,toHTML:J(i,r),toElement:ee(i,r),clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=U({},e[n]);return t}(r),n=Object.create(null);for(var a in o)n[a]=[o[a][0]];return e(t,n)}}},re=function(e,t,n,r,o){if(I&&!n){var a=function(e,t,n){var r=document.createElement("style");r.setAttribute(A,"");var o=F();if(o&&r.setAttribute("nonce",o),r.appendChild(document.createTextNode("")),e&&!t)e.appendChild(r);else{if(!t||!e||!t.parentNode)throw new Error("");t.parentNode.insertBefore(r,n?t:t.nextSibling)}return r}(e,t,r);return function(e,t){var n=Object.create(null),r=Object.create(null),o=[],a=void 0!==t,i=!1,s=function(e){var t=r[e];if(void 0!==t)return t;var a=r[e]=o.length;return o.push(0),$(n,e),a},l=function(){var t=X(e).cssRules,n="",o=0;for(var a in r){n+=G(a);for(var i=r[a]+o;o<i;o+=1)n+=t[o].cssText}return n};return{styleTag:e,getIds:te(r),hasNameForId:q(n),insertMarker:s,insertRules:function(r,l,u){for(var c=s(r),d=X(e),f=Z(o,c),p=0,h=[],m=l.length,y=0;y<m;y+=1){var b=l[y],v=a;v&&-1!==b.indexOf("@import")?h.push(b):Q(d,b,f+p)&&(v=!1,p+=1)}a&&h.length>0&&(i=!0,t().insertRules(r+"-import",h)),o[c]+=p,W(n,r,u)},removeRules:function(s){var l=r[s];if(void 0!==l){var u=o[l];!function(e,t,n){for(var r=t-n,o=t;o>=r;o-=1)e.deleteRule(o)}(X(e),Z(o,l),u),o[l]=0,$(n,s),a&&i&&t().removeRules(s+"-import")}},css:l,toHTML:J(l,n),toElement:ee(l,n),clone:Y}}(a,o)}return ne()},oe=void 0;oe=I?1e3:-1;var ae,ie=0,se=void 0,le=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:I?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];D(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=re(t.target,n?n.styleTag:null,t.forceServer,!0)},this.id=ie+=1,this.sealed=!1,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!I||this.forceServer)return this;var e=[],t=[],n=[],r=!1,o=document.querySelectorAll("style["+A+"]"),a=o.length;if(0===a)return this;for(var i=0;i<a;i+=1){var s=o[i];r=!!s.getAttribute("data-styled-streamed")||r;for(var l=(s.getAttribute(A)||"").trim().split(/\s+/),u=l.length,c=0;c<u;c+=1){var d=l[c];this.rehydratedNames[d]=!0,t.push(d)}n=n.concat(z(s.textContent)),e.push(s)}var f=n.length;if(0===f)return this;var p=function(e,t,n,r,o){var a,i,s=(a=function(){for(var r=0;r<n.length;r+=1){var o=n[r],a=o.componentId,i=o.cssFromDOM,s=w("",i);e.insertRules(a,s)}for(var l=0;l<t.length;l+=1){var u=t[l];u.parentNode&&u.parentNode.removeChild(u)}},i=!1,function(){i||(i=!0,a())});return o&&s(),U({},e,{insertMarker:function(t){return s(),e.insertMarker(t)},insertRules:function(t,n,r){return s(),e.insertRules(t,n,r)}})}(this.makeTag(null),e,n,0,r);this.capacity=Math.max(1,oe-f),this.tags.push(p);for(var h=0;h<f;h+=1)this.tagMap[n[h].componentId]=p;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];se=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map(function(e){for(var n=e.getIds(),r=e.clone(),o=0;o<n.length;o+=1)t.tagMap[n[o]]=r;return r}),t.rehydratedNames=U({},this.rehydratedNames),t.deferred=U({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.sealed=!0},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return re(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!this.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=oe,this.sealed=!1,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,o=0;o<r.length;o+=1)r[o].inject(e,t,n);var a=t,i=this.deferred[e];void 0!==i&&(a=i.concat(a),delete this.deferred[e]),this.getTagForId(e).insertRules(e,a,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,delete this.deferred[e]}},e.prototype.toHTML=function(){return this.tags.map(function(e){return e.toHTML()}).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map(function(t,n){var r="sc-"+e+"-"+n;return Object(c.cloneElement)(t.toElement(),{key:r})})},L(e,null,[{key:"master",get:function(){return se||(se=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),ue=function(e){function t(){return D(this,t),V(this,e.apply(this,arguments))}return H(t,e),t.prototype.getChildContext=function(){var e;return(e={})[R]=this.sheetInstance,e},t.prototype.componentWillMount=function(){if(this.props.sheet)this.sheetInstance=this.props.sheet;else{if(!this.props.target)throw new Error("");this.sheetInstance=new le(this.props.target)}},t.prototype.render=function(){return d.a.Children.only(this.props.children)},t}(c.Component);ue.childContextTypes=((ae={})[R]=p.a.oneOfType([p.a.instanceOf(le),p.a.instanceOf(ce)]).isRequired,ae);var ce=function(){function e(){D(this,e),this.masterSheet=le.master,this.instance=this.masterSheet.clone(),this.closed=!1}return e.prototype.complete=function(){if(!this.closed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.closed=!0}},e.prototype.collectStyles=function(e){if(this.closed)throw new Error("");return d.a.createElement(ue,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.complete(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.complete(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new Error("")},e}(),de=/^((?:s(?:uppressContentEditableWarn|croll|pac)|(?:shape|image|text)Render|(?:letter|word)Spac|vHang|hang)ing|(?:on(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)Captur|alignmentBaselin|(?:limitingConeAng|xlink(?:(?:Arcr|R)o|Tit)|s(?:urfaceSca|ty|ca)|unselectab|baseProfi|fontSty|(?:focus|dragg)ab|multip|profi|tit)l|d(?:ominantBaselin|efaultValu)|a(?:uto(?:Capitaliz|Revers|Sav)|dditiv)|(?:(?:formNoValid|xlinkActu|noValid|accumul|rot)a|autoComple|decelera)t|(?:(?:attribute|item)T|datat)yp|(?:attribute|glyph)Nam|playsInlin|(?:formE|e)ncTyp|(?:writing|input|edge)Mod|(?:xlinkTy|itemSco|keyTy|slo)p|(?:amplitu|mo)d|(?:xmlSpa|non)c|fillRul|(?:dateTi|na)m|r(?:esourc|ol)|xmlBas|wmod)e|(?:glyphOrientationHorizont|loc)al|(?:externalResourcesRequir|select|revers|mut)ed|c(?:o(?:lorInterpolationFilter|ord)s|o(?:lor(?:Interpolation)?|nt(?:rols|ent))|(?:ontentS(?:cript|tyle)Typ|o(?:ntentEditab|lorProfi)l|l(?:assNam|ipRul)|a(?:lcMod|ptur)|it)e|olorRendering|l(?:ipPathUnits|assID)|(?:ontrolsLis|apHeigh)t|h(?:eckedLink|a(?:llenge|rSet)|ildren|ecked)|ell(?:Spac|Padd)ing|o(?:ntextMenu|ls)|(?:rossOrigi|olSpa)n|lip(?:Path)?|ursor|[xy])|glyphOrientationVertical|d(?:angerouslySetInnerHTML|efaultChecked|ownload|isabled|isplay|[xy])|(?:s(?:trikethroughThickn|eaml)es|(?:und|ov)erlineThicknes|r(?:equiredExtension|adiu)|(?:requiredFeatur|tableValu|stitchTil|numOctav|filterR)e|key(?:(?:Splin|Tim)e|Param)|autoFocu|header|bia)s|(?:(?:st(?:rikethroughPosi|dDevia)|(?:und|ov)erlinePosi|(?:textDecor|elev)a|orienta)tio|(?:strokeLinejo|orig)i|formActio|zoomAndPa|onFocusI|directio|(?:vers|act)io|rowSpa|begi|ico)n|o(?:n(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)|rient)|p(?:reserveA(?:spectRatio|lpha)|ointsAt[X-Z]|anose1)|(?:patternContent|ma(?:sk(?:Content)?|rker)|primitive|gradient|pattern|filter)Units|(?:gradientT|patternT|t)ransform|(?:(?:allowTranspar|baseFrequ)enc|re(?:ferrerPolic|adOnl)|(?:(?:st(?:roke|op)O|floodO|fillO|o)pac|integr|secur)it|visibilit|fontFamil|accessKe|propert|summar)y|(?:strokeMiterlimi|(?:specularConsta|repeatCou|fontVaria)n|(?:(?:specularE|e)xpon|renderingInt|asc)en|d(?:iffuseConsta|esce)n|(?:fontSizeAdju|lengthAdju|manife)s|baselineShif|vectorEffec|(?:(?:mar(?:ker|gin)|x)H|accentH|fontW)eigh|a(?:utoCorrec|bou)|markerStar|onFocusOu|intercep|restar|forma|inlis|heigh|lis)t|(?:(?:st(?:rokeDasho|artO)|o)ffs|acceptChars|formTarg|viewTarg|srcS)et|(?:(?:enableBackgrou|markerE)n|s(?:p(?:readMetho|ee)|ee)|formMetho|m(?:arkerMi|etho)|preloa|kin)d|k(?:ernel(?:UnitLength|Matrix)|[1-4])|(?:[xy]ChannelSelect|lightingCol|textAnch|floodCol|stopCol|operat|htmlF)or|(?:allowFullScre|hidd)en|strokeDasharray|systemLanguage|(?:strokeLineca|itemPro|useMa|wra|loo)p|v(?:Mathematical|ert(?:Origin[XY]|AdvY)|alues|ocab)|(?:pointerEve|keyPoi)nts|unicodeRange|(?:(?:allowReord|placehold|frameBord|paintOrd|post|ord)e|repeatDu|d(?:efe|u))r|mathematical|(?:vI|i)deographic|h(?:oriz(?:Origin|Adv)X|ttpEquiv)|u(?:nicodeBidi|[12])|(?:fontStretc|hig)h|(?:(?:mar(?:ker|gin)W|strokeW)id|azimu)th|vAlphabetic|mediaGroup|spellCheck|(?:unitsPerE|optimu|fro)m|r(?:adioGroup|e(?:sults|f[XY]|l)|ows|[xy])|(?:xmlnsXl|valueL)ink|a(?:rabicForm|l(?:phabetic|t)|sync)|pathLength|(?:text|m(?:in|ax))Length|innerHTML|xlinkShow|(?:xlinkHr|glyphR)ef|r(?:e(?:quired|sult|f))?|o(?:verflow|pen)|(?:tabInde|(?:sand|b)bo|viewBo)x|(?:(?:href|xml|src)La|kerni)ng|f(?:o(?:ntSize|rm)|il(?:ter|l))|autoPlay|unicode|p(?:attern|oints)|t(?:arget[XY]|o)|i(?:temRef|n2|s)|divisor|d(?:efault|ata|ir)?|srcDoc|s(?:coped|te(?:m[hv]|p)|pan)|(?:width|size)s|(?:stri|la)ng|prefix|itemID|s(?:t(?:roke|art)|hape|cope|rc)|a(?:ccept|s)|t(?:arget|ype)|typeof|width|value|x(?:mlns)?|label|m(?:edia|a(?:sk|x)|in)|size|href|k(?:ey)?|end|low|x[12]|i[dn]|y[12]|g[12]|by|f[xy]|[yz])$/,fe=RegExp.prototype.test.bind(new RegExp("^(data|aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"));function pe(e){return"string"==typeof e}function he(e){return e.displayName||e.name||"Component"}var me=function(e,t,n){var r=n&&e.theme===n.theme;return e.theme&&!r?e.theme:t},ye=/[[\].#*$><+~=|^:(),"'`-]+/g,be=/(^-|-$)/g;function ve(e){return e.replace(ye,"-").replace(be,"")}var ge,xe,we="__styled-components__",_e=we+"next__",ke=p.a.shape({getTheme:p.a.func,subscribe:p.a.func,unsubscribe:p.a.func});var Ce=function(e){function t(){D(this,t);var n=V(this,e.call(this));return n.unsubscribeToOuterId=-1,n.getTheme=n.getTheme.bind(n),n}return H(t,e),t.prototype.componentWillMount=function(){var e=this,t=this.context[_e];void 0!==t&&(this.unsubscribeToOuterId=t.subscribe(function(t){e.outerTheme=t,void 0!==e.broadcast&&e.publish(e.props.theme)})),this.broadcast=function(e){var t={},n=0,r=e;return{publish:function(e){for(var n in r=e,t){var o=t[n];void 0!==o&&o(r)}},subscribe:function(e){var o=n;return t[o]=e,n+=1,e(r),o},unsubscribe:function(e){t[e]=void 0}}}(this.getTheme())},t.prototype.getChildContext=function(){var e,t=this;return U({},this.context,((e={})[_e]={getTheme:this.getTheme,subscribe:this.broadcast.subscribe,unsubscribe:this.broadcast.unsubscribe},e[we]=function(e){var n=t.broadcast.subscribe(e);return function(){return t.broadcast.unsubscribe(n)}},e))},t.prototype.componentWillReceiveProps=function(e){this.props.theme!==e.theme&&this.publish(e.theme)},t.prototype.componentWillUnmount=function(){-1!==this.unsubscribeToOuterId&&this.context[_e].unsubscribe(this.unsubscribeToOuterId)},t.prototype.getTheme=function(e){var t=e||this.props.theme;if("function"==typeof t)return t(this.outerTheme);if(!a()(t))throw new Error("");return U({},this.outerTheme,t)},t.prototype.publish=function(e){this.broadcast.publish(this.getTheme(e))},t.prototype.render=function(){return this.props.children?d.a.Children.only(this.props.children):null},t}(c.Component);Ce.childContextTypes=((ge={})[we]=p.a.func,ge[_e]=ke,ge),Ce.contextTypes=((xe={})[_e]=ke,xe);var je={};function Ee(e){for(var t,n=0|e.length,r=0|n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16),(r^=r>>>15)>>>0}var Oe=I,Te=function e(t,n){for(var r=0;r<t.length;r+=1){var o=t[r];if(Array.isArray(o)&&!e(o))return!1;if("function"==typeof o&&!O(o))return!1}if(void 0!==n)for(var a in n){if("function"==typeof n[a])return!1}return!0},Pe=void 0!==e&&e.hot&&!1,Se=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],Ne=function(e){var t,n=e.displayName||e.name||"Component",r="function"==typeof e&&!(e.prototype&&"isReactComponent"in e.prototype),o=O(e)||r,a=function(t){function n(){var e,r;D(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return e=r=V(this,t.call.apply(t,[this].concat(a))),r.state={},r.unsubscribeId=-1,V(r,e)}return H(n,t),n.prototype.componentWillMount=function(){var e=this,t=this.constructor.defaultProps,n=this.context[_e],r=me(this.props,void 0,t);if(void 0===n&&void 0!==r)this.setState({theme:r});else{var o=n.subscribe;this.unsubscribeId=o(function(n){var r=me(e.props,n,t);e.setState({theme:r})})}},n.prototype.componentWillReceiveProps=function(e){var t=this.constructor.defaultProps;this.setState(function(n){return{theme:me(e,n.theme,t)}})},n.prototype.componentWillUnmount=function(){-1!==this.unsubscribeId&&this.context[_e].unsubscribe(this.unsubscribeId)},n.prototype.render=function(){var t=U({theme:this.state.theme},this.props);return o||(t.ref=t.innerRef,delete t.innerRef),d.a.createElement(e,t)},n}(d.a.Component);return a.displayName="WithTheme("+n+")",a.styledComponentId="withTheme",a.contextTypes=((t={})[we]=p.a.func,t[_e]=ke,t),m()(a,e)},Ae={StyleSheet:le};var Re=function(e,t,n){var r=function(t){return e(Ee(t))};return function(){function e(t,n,r){if(D(this,e),this.rules=t,this.isStatic=!Pe&&Te(t,n),this.componentId=r,!le.master.hasId(r)){var o=[];le.master.deferredInject(r,o)}}return e.prototype.generateAndInjectStyles=function(e,o){var a=this.isStatic,i=this.componentId,s=this.lastClassName;if(Oe&&a&&void 0!==s)return s;var l=t(this.rules,e),u=r(this.componentId+l.join(""));if(!o.hasNameForId(i,u)){var c=n(l,"."+u);o.inject(this.componentId,c,u)}return this.lastClassName=u,u},e.generateName=function(e){return r(e)},e}()}(S,x,E),Ie=function(e){return function t(n,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"!=typeof r&&"function"!=typeof r)throw new Error("");var a=function(){return n(r,o,e.apply(void 0,arguments))};return a.withConfig=function(e){return t(n,r,U({},o,e))},a.attrs=function(e){return t(n,r,U({},o,{attrs:U({},o.attrs||{},e)}))},a}}(N),Me=function(e,t){var n={},r=function(e){function t(){var n,r;D(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=V(this,e.call.apply(e,[this].concat(a))),r.attrs={},r.state={theme:null,generatedClassName:""},r.unsubscribeId=-1,V(r,n)}return H(t,e),t.prototype.unsubscribeFromContext=function(){-1!==this.unsubscribeId&&this.context[_e].unsubscribe(this.unsubscribeId)},t.prototype.buildExecutionContext=function(e,t){var n=this.constructor.attrs,r=U({},t,{theme:e});return void 0===n?r:(this.attrs=Object.keys(n).reduce(function(e,t){var o=n[t];return e[t]="function"==typeof o?o(r):o,e},{}),U({},r,this.attrs))},t.prototype.generateAndInjectStyles=function(e,t){var n=this.constructor,r=n.attrs,o=n.componentStyle,a=(n.warnTooManyClasses,this.context[R]||le.master);if(o.isStatic&&void 0===r)return o.generateAndInjectStyles(je,a);var i=this.buildExecutionContext(e,t);return o.generateAndInjectStyles(i,a)},t.prototype.componentWillMount=function(){var e=this,t=this.constructor.componentStyle,n=this.context[_e];if(t.isStatic){var r=this.generateAndInjectStyles(je,this.props);this.setState({generatedClassName:r})}else if(void 0!==n){var o=n.subscribe;this.unsubscribeId=o(function(t){var n=me(e.props,t,e.constructor.defaultProps),r=e.generateAndInjectStyles(n,e.props);e.setState({theme:n,generatedClassName:r})})}else{var a=this.props.theme||{},i=this.generateAndInjectStyles(a,this.props);this.setState({theme:a,generatedClassName:i})}},t.prototype.componentWillReceiveProps=function(e){var t=this;this.constructor.componentStyle.isStatic||this.setState(function(n){var r=me(e,n.theme,t.constructor.defaultProps);return{theme:r,generatedClassName:t.generateAndInjectStyles(r,e)}})},t.prototype.componentWillUnmount=function(){this.unsubscribeFromContext()},t.prototype.render=function(){var e=this,t=this.props.innerRef,n=this.state.generatedClassName,r=this.constructor,o=r.styledComponentId,a=r.target,i=pe(a),s=[this.props.className,o,this.attrs.className,n].filter(Boolean).join(" "),l=U({},this.attrs,{className:s});O(a)?l.innerRef=t:l.ref=t;var u=Object.keys(this.props).reduce(function(t,n){var r;return"innerRef"===n||"className"===n||i&&(r=n,!de.test(r)&&!fe(r.toLowerCase()))||(t[n]=e.props[n]),t},l);return Object(c.createElement)(a,u)},t}(c.Component);return function o(a,i,s){var l,u=i.displayName,c=void 0===u?pe(a)?"styled."+a:"Styled("+he(a)+")":u,d=i.componentId,f=void 0===d?function(t,r){var o="string"!=typeof t?"sc":ve(t),a=void 0;if(t)a=o+"-"+e.generateName(o);else{var i=(n[o]||0)+1;n[o]=i,a=o+"-"+e.generateName(o+i)}return void 0!==r?r+"-"+a:a}(i.displayName,i.parentComponentId):d,h=i.ParentComponent,m=void 0===h?r:h,y=i.rules,b=i.attrs,v=i.displayName&&i.componentId?ve(i.displayName)+"-"+i.componentId:f,g=new e(void 0===y?s:y.concat(s),b,v),x=function(e){function n(){return D(this,n),V(this,e.apply(this,arguments))}return H(n,e),n.withComponent=function(e){var t=i.componentId,r=B(i,["componentId"]),a=t&&t+"-"+(pe(e)?e:ve(he(e))),l=U({},r,{componentId:a,ParentComponent:n});return o(e,l,s)},L(n,null,[{key:"extend",get:function(){var e=i.rules,r=i.componentId,l=B(i,["rules","componentId"]),u=void 0===e?s:e.concat(s),c=U({},l,{rules:u,parentComponentId:r,ParentComponent:n});return t(o,a,c)}}]),n}(m);return x.contextTypes=((l={})[we]=p.a.func,l[_e]=ke,l[R]=p.a.oneOfType([p.a.instanceOf(le),p.a.instanceOf(ce)]),l),x.displayName=c,x.styledComponentId=v,x.attrs=b,x.componentStyle=g,x.target=a,x}}(Re,Ie),ze=function(e,t,n){return function(){var r=le.master,o=n.apply(void 0,arguments),a=e(Ee(JSON.stringify(o).replace(/\s|\\n/g,""))),i="sc-keyframes-"+a;return r.hasNameForId(i,a)||r.inject(i,t(o,a,"@keyframes"),a),a}}(S,E,N),Fe=function(e,t){return function(){var n=le.master,r=t.apply(void 0,arguments),o="sc-global-"+Ee(JSON.stringify(r));n.hasId(o)||n.inject(o,e(r))}}(E,N),De=function(e,t){var n=function(n){return t(e,n)};return Se.forEach(function(e){n[e]=n(e)}),n}(Me,Ie);t.default=De}.call(this,n("./node_modules/process/browser.js"))},"./node_modules/stylis-rule-sheet/index.js":function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,s,l,u,c,d){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},"./node_modules/stylis/stylis.js":function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,o=/: */g,a=/zoo|gra/,i=/([,: ])(transform)/g,s=/,+\s*(?![^(]*[)])/g,l=/ +\s*(?![^(]*[)])/g,u=/ *[\0] */g,c=/,\r+?/g,d=/([\t\r\n ])*\f?&/g,f=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,p=/\W+/g,h=/@(k\w+)\s*(\S*)\s*/,m=/::(place)/g,y=/:(read-only)/g,b=/\s+(?=[{\];=:>])/g,v=/([[}=:>])\s+/g,g=/(\{[^{]+?);(?=\})/g,x=/\s{2,}/g,w=/([^\(])(:+) */g,_=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,C=/([\s\S]*?);/g,j=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,O=/stretch|:\s*\w+\-(?:conte|avail)/,T="-webkit-",P="-moz-",S="-ms-",N=59,A=125,R=123,I=40,M=41,z=91,F=93,D=10,L=13,U=9,H=64,B=32,V=38,W=45,$=95,q=42,K=44,X=58,Q=39,Y=34,G=47,Z=62,J=43,ee=126,te=0,ne=12,re=11,oe=107,ae=109,ie=115,se=112,le=111,ue=169,ce=163,de=100,fe=112,pe=1,he=1,me=0,ye=1,be=1,ve=1,ge=0,xe=0,we=0,_e=[],ke=[],Ce=0,je=null,Ee=-2,Oe=-1,Te=0,Pe=1,Se=2,Ne=3,Ae=0,Re=1,Ie="",Me="",ze="";function Fe(e,t,o,a,i){for(var s,l,c=0,d=0,f=0,p=0,b=0,v=0,g=0,x=0,_=0,C=0,j=0,E=0,O=0,$=0,ge=0,ke=0,je=0,Ee=0,Oe=0,Le=o.length,We=Le-1,$e="",qe="",Ke="",Xe="",Qe="",Ye="";ge<Le;){if(g=o.charCodeAt(ge),ge===We&&d+p+f+c!==0&&(0!==d&&(g=d===G?D:G),p=f=c=0,Le++,We++),d+p+f+c===0){if(ge===We&&(ke>0&&(qe=qe.replace(r,"")),qe.trim().length>0)){switch(g){case B:case U:case N:case L:case D:break;default:qe+=o.charAt(ge)}g=N}if(1===je)switch(g){case R:case A:case N:case Y:case Q:case I:case M:case K:je=0;case U:case L:case D:case B:break;default:for(je=0,Oe=ge,b=g,ge--,g=N;Oe<Le;)switch(o.charCodeAt(Oe++)){case D:case L:case N:++ge,g=b,Oe=Le;break;case X:ke>0&&(++ge,g=b);case R:Oe=Le}}switch(g){case R:for(qe=qe.trim(),b=qe.charCodeAt(0),j=1,Oe=++ge;ge<Le;){switch(g=o.charCodeAt(ge)){case R:j++;break;case A:j--}if(0===j)break;ge++}switch(Ke=o.substring(Oe,ge),b===te&&(b=(qe=qe.replace(n,"").trim()).charCodeAt(0)),b){case H:switch(ke>0&&(qe=qe.replace(r,"")),v=qe.charCodeAt(1)){case de:case ae:case ie:case W:s=t;break;default:s=_e}if(Ke=Fe(t,s,Ke,v,i+1),Oe=Ke.length,we>0&&0===Oe&&(Oe=qe.length),Ce>0&&(s=De(_e,qe,Ee),l=Ve(Ne,Ke,s,t,he,pe,Oe,v,i,a),qe=s.join(""),void 0!==l&&0===(Oe=(Ke=l.trim()).length)&&(v=0,Ke="")),Oe>0)switch(v){case ie:qe=qe.replace(k,Be);case de:case ae:case W:Ke=qe+"{"+Ke+"}";break;case oe:qe=qe.replace(h,"$1 $2"+(Re>0?Ie:"")),Ke=qe+"{"+Ke+"}",Ke=1===be||2===be&&He("@"+Ke,3)?"@"+T+Ke+"@"+Ke:"@"+Ke;break;default:Ke=qe+Ke,a===fe&&(Xe+=Ke,Ke="")}else Ke="";break;default:Ke=Fe(t,De(t,qe,Ee),Ke,a,i+1)}Qe+=Ke,E=0,je=0,$=0,ke=0,Ee=0,O=0,qe="",Ke="",g=o.charCodeAt(++ge);break;case A:case N:if(qe=(ke>0?qe.replace(r,""):qe).trim(),(Oe=qe.length)>1)switch(0===$&&((b=qe.charCodeAt(0))===W||b>96&&b<123)&&(Oe=(qe=qe.replace(" ",":")).length),Ce>0&&void 0!==(l=Ve(Pe,qe,t,e,he,pe,Xe.length,a,i,a))&&0===(Oe=(qe=l.trim()).length)&&(qe="\0\0"),b=qe.charCodeAt(0),v=qe.charCodeAt(1),b+v){case te:break;case ue:case ce:Ye+=qe+o.charAt(ge);break;default:if(qe.charCodeAt(Oe-1)===X)break;Xe+=Ue(qe,b,v,qe.charCodeAt(2))}E=0,je=0,$=0,ke=0,Ee=0,qe="",g=o.charCodeAt(++ge)}}switch(g){case L:case D:if(d+p+f+c+xe===0)switch(C){case M:case Q:case Y:case H:case ee:case Z:case q:case J:case G:case W:case X:case K:case N:case R:case A:break;default:$>0&&(je=1)}d===G?d=0:ye+E===0&&(ke=1,qe+="\0"),Ce*Ae>0&&Ve(Te,qe,t,e,he,pe,Xe.length,a,i,a),pe=1,he++;break;case N:case A:if(d+p+f+c===0){pe++;break}default:switch(pe++,$e=o.charAt(ge),g){case U:case B:if(p+c+d===0)switch(x){case K:case X:case U:case B:$e="";break;default:g!==B&&($e=" ")}break;case te:$e="\\0";break;case ne:$e="\\f";break;case re:$e="\\v";break;case V:p+d+c===0&&ye>0&&(Ee=1,ke=1,$e="\f"+$e);break;case 108:if(p+d+c+me===0&&$>0)switch(ge-$){case 2:x===se&&o.charCodeAt(ge-3)===X&&(me=x);case 8:_===le&&(me=_)}break;case X:p+d+c===0&&($=ge);break;case K:d+f+p+c===0&&(ke=1,$e+="\r");break;case Y:case Q:0===d&&(p=p===g?0:0===p?g:p);break;case z:p+d+f===0&&c++;break;case F:p+d+f===0&&c--;break;case M:p+d+c===0&&f--;break;case I:if(p+d+c===0){if(0===E)switch(2*x+3*_){case 533:break;default:j=0,E=1}f++}break;case H:d+f+p+c+$+O===0&&(O=1);break;case q:case G:if(p+c+f>0)break;switch(d){case 0:switch(2*g+3*o.charCodeAt(ge+1)){case 235:d=G;break;case 220:Oe=ge,d=q}break;case q:g===G&&x===q&&(33===o.charCodeAt(Oe+2)&&(Xe+=o.substring(Oe,ge+1)),$e="",d=0)}}if(0===d){if(ye+p+c+O===0&&a!==oe&&g!==N)switch(g){case K:case ee:case Z:case J:case M:case I:if(0===E){switch(x){case U:case B:case D:case L:$e+="\0";break;default:$e="\0"+$e+(g===K?"":"\0")}ke=1}else switch(g){case I:E=++j;break;case M:0==(E=--j)&&(ke=1,$e+="\0")}break;case U:case B:switch(x){case te:case R:case A:case N:case K:case ne:case U:case B:case D:case L:break;default:0===E&&(ke=1,$e+="\0")}}qe+=$e,g!==B&&g!==U&&(C=g)}}_=x,x=g,ge++}if(Oe=Xe.length,we>0&&0===Oe&&0===Qe.length&&0===t[0].length==0&&(a!==ae||1===t.length&&(ye>0?Me:ze)===t[0])&&(Oe=t.join(",").length+2),Oe>0){if(s=0===ye&&a!==oe?function(e){for(var t,n,o=0,a=e.length,i=Array(a);o<a;++o){for(var s=e[o].split(u),l="",c=0,d=0,f=0,p=0,h=s.length;c<h;++c)if(!(0===(d=(n=s[c]).length)&&h>1)){if(f=l.charCodeAt(l.length-1),p=n.charCodeAt(0),t="",0!==c)switch(f){case q:case ee:case Z:case J:case B:case I:break;default:t=" "}switch(p){case V:n=t+Me;case ee:case Z:case J:case B:case M:case I:break;case z:n=t+n+Me;break;case X:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(ve>0){n=t+n.substring(8,d-1);break}default:(c<1||s[c-1].length<1)&&(n=t+Me+n)}break;case K:t="";default:n=d>1&&n.indexOf(":")>0?t+n.replace(w,"$1"+Me+"$2"):t+n+Me}l+=n}i[o]=l.replace(r,"").trim()}return i}(t):t,Ce>0&&void 0!==(l=Ve(Se,Xe,s,e,he,pe,Oe,a,i,a))&&0===(Xe=l).length)return Ye+Xe+Qe;if(Xe=s.join(",")+"{"+Xe+"}",be*me!=0){switch(2!==be||He(Xe,2)||(me=0),me){case le:Xe=Xe.replace(y,":"+P+"$1")+Xe;break;case se:Xe=Xe.replace(m,"::"+T+"input-$1")+Xe.replace(m,"::"+P+"$1")+Xe.replace(m,":"+S+"input-$1")+Xe}me=0}}return Ye+Xe+Qe}function De(e,t,n){var r=t.trim().split(c),o=r,a=r.length,i=e.length;switch(i){case 0:case 1:for(var s=0,l=0===i?"":e[0]+" ";s<a;++s)o[s]=Le(l,o[s],n,i).trim();break;default:for(var s=0,u=0,o=[];s<a;++s)for(var d=0;d<i;++d)o[u++]=Le(e[d]+" ",r[s],n,i).trim()}return o}function Le(e,t,n,r){var o=t,a=o.charCodeAt(0);switch(a<33&&(a=(o=o.trim()).charCodeAt(0)),a){case V:switch(ye+r){case 0:case 1:if(0===e.trim().length)break;default:return o.replace(d,"$1"+e.trim())}break;case X:switch(o.charCodeAt(1)){case 103:if(ve>0&&ye>0)return o.replace(f,"$1").replace(d,"$1"+ze);break;default:return e.trim()+o.replace(d,"$1"+e.trim())}default:if(n*ye>0&&o.indexOf("\f")>0)return o.replace(d,(e.charCodeAt(0)===X?"":"$1")+e.trim())}return e+o}function Ue(e,t,n,r){var u,c=0,d=e+";",f=2*t+3*n+4*r;if(944===f)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),o=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*Re){case 0:break;case W:if(110!==e.charCodeAt(10))break;default:for(var a=o.split((o="",s)),i=0,n=0,t=a.length;i<t;n=0,++i){for(var u=a[i],c=u.split(l);u=c[n];){var d=u.charCodeAt(0);if(1===Re&&(d>H&&d<90||d>96&&d<123||d===$||d===W&&u.charCodeAt(1)!==W))switch(isNaN(parseFloat(u))+(-1!==u.indexOf("("))){case 1:switch(u){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:u+=Ie}}c[n++]=u}o+=(0===i?"":",")+c.join(" ")}}return o=r+o+";",1===be||2===be&&He(o,1)?T+o+o:o}(d);if(0===be||2===be&&!He(d,1))return d;switch(f){case 1015:return 97===d.charCodeAt(10)?T+d+d:d;case 951:return 116===d.charCodeAt(3)?T+d+d:d;case 963:return 110===d.charCodeAt(5)?T+d+d:d;case 1009:if(100!==d.charCodeAt(4))break;case 969:case 942:return T+d+d;case 978:return T+d+P+d+d;case 1019:case 983:return T+d+P+d+S+d+d;case 883:return d.charCodeAt(8)===W?T+d+d:d;case 932:if(d.charCodeAt(4)===W)switch(d.charCodeAt(5)){case 103:return T+"box-"+d.replace("-grow","")+T+d+S+d.replace("grow","positive")+d;case 115:return T+d+S+d.replace("shrink","negative")+d;case 98:return T+d+S+d.replace("basis","preferred-size")+d}return T+d+S+d+d;case 964:return T+d+S+"flex-"+d+d;case 1023:if(99!==d.charCodeAt(8))break;return u=d.substring(d.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),T+"box-pack"+u+T+d+S+"flex-pack"+u+d;case 1005:return a.test(d)?d.replace(o,":"+T)+d.replace(o,":"+P)+d:d;case 1e3:switch(u=d.substring(13).trim(),c=u.indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(c)){case 226:u=d.replace(_,"tb");break;case 232:u=d.replace(_,"tb-rl");break;case 220:u=d.replace(_,"lr");break;default:return d}return T+d+S+u+d;case 1017:if(-1===d.indexOf("sticky",9))return d;case 975:switch(c=(d=e).length-10,u=(33===d.charCodeAt(c)?d.substring(0,c):d).substring(e.indexOf(":",7)+1).trim(),f=u.charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(u.charCodeAt(8)<111)break;case 115:d=d.replace(u,T+u)+";"+d;break;case 207:case 102:d=d.replace(u,T+(f>102?"inline-":"")+"box")+";"+d.replace(u,T+u)+";"+d.replace(u,S+u+"box")+";"+d}return d+";";case 938:if(d.charCodeAt(5)===W)switch(d.charCodeAt(6)){case 105:return u=d.replace("-items",""),T+d+T+"box-"+u+S+"flex-"+u+d;case 115:return T+d+S+"flex-item-"+d.replace(j,"")+d;default:return T+d+S+"flex-line-pack"+d.replace("align-content","").replace(j,"")+d}break;case 973:case 989:if(d.charCodeAt(3)!==W||122===d.charCodeAt(4))break;case 931:case 953:if(!0===O.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?Ue(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):d.replace(u,T+u)+d.replace(u,P+u.replace("fill-",""))+d;break;case 962:if(d=T+d+(102===d.charCodeAt(5)?S+d:"")+d,n+r===211&&105===d.charCodeAt(13)&&d.indexOf("transform",10)>0)return d.substring(0,d.indexOf(";",27)+1).replace(i,"$1"+T+"$2")+d}return d}function He(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),o=e.substring(n+1,e.length-1);return je(2!==t?r:r.replace(E,"$1"),o,t)}function Be(e,t){var n=Ue(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(C," or ($1)").substring(4):"("+t+")"}function Ve(e,t,n,r,o,a,i,s,l,u){for(var c,d=0,f=t;d<Ce;++d)switch(c=ke[d].call($e,e,f,n,r,o,a,i,s,l,u)){case void 0:case!1:case!0:case null:break;default:f=c}switch(f){case void 0:case!1:case!0:case null:case t:break;default:return f}}function We(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Re=0|n;break;case"global":ve=0|n;break;case"cascade":ye=0|n;break;case"compress":ge=0|n;break;case"semicolon":xe=0|n;break;case"preserve":we=0|n;break;case"prefix":je=null,n?"function"!=typeof n?be=1:(be=2,je=n):be=0}}return We}function $e(t,n){if(void 0!==this&&this.constructor===$e)return e(t);var o=t,a=o.charCodeAt(0);a<33&&(a=(o=o.trim()).charCodeAt(0)),Re>0&&(Ie=o.replace(p,a===z?"":"-")),a=1,1===ye?ze=o:Me=o;var i,s=[ze];Ce>0&&void 0!==(i=Ve(Oe,n,s,s,he,pe,0,0,0,0))&&"string"==typeof i&&(n=i);var l=Fe(_e,s,n,0,0);return Ce>0&&void 0!==(i=Ve(Ee,l,s,s,he,pe,l.length,0,0,0))&&"string"!=typeof(l=i)&&(a=0),Ie="",ze="",Me="",me=0,he=1,pe=1,ge*a==0?l:function(e){return e.replace(r,"").replace(b,"").replace(v,"$1").replace(g,"$1").replace(x," ")}(l)}return $e.use=function e(t){switch(t){case void 0:case null:Ce=ke.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:ke[Ce++]=t;break;case Boolean:Ae=0|!!t}}return e},$e.set=We,void 0!==t&&We(t),$e}(null)},"./node_modules/symbol-observable/es/index.js":function(e,t,n){"use strict";(function(e,r){var o,a=n("./node_modules/symbol-observable/es/ponyfill.js");o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/webpack/buildin/harmony-module.js")(e))},"./node_modules/symbol-observable/es/ponyfill.js":function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/harmony-module.js":function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},"./src/components/Navbar.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r},i=n("./src/styles/Navbar.js");t.default=function(){return a.default.createElement(i.Header,null,a.default.createElement(i.Heading,null,"Lorem Ipsum Generator"))}},"./src/components/Options.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n("./node_modules/react/index.js")),o=i(n("./node_modules/prop-types/index.js")),a=n("./src/styles/Options.js");function i(e){return e&&e.__esModule?e:{default:e}}var s=function(e){return r.default.createElement(a.Container,null,r.default.createElement("form",{onSubmit:e.submit},r.default.createElement(a.Input,{type:"number",id:"paras",onChange:e.changedNum,value:e.num}),r.default.createElement(a.Select,{onChange:e.changedType,value:e.type},r.default.createElement("option",{value:"para"},"Paragraphs"),r.default.createElement("option",{value:"link"},"Links"),r.default.createElement("option",{value:"ol"},"Ordered list"),r.default.createElement("option",{value:"ul"},"Unordered list"),r.default.createElement("option",{value:"dl"},"Description List"),r.default.createElement("option",{value:"plaintext"},"Plain Text")),r.default.createElement(a.Select,{onChange:e.changedLength,id:"length",value:e.length},r.default.createElement("option",{value:"short"},"Short"),r.default.createElement("option",{value:"medium"},"Medium"),r.default.createElement("option",{value:"long"},"Long"),r.default.createElement("option",{value:"verylong"},"Very Long")),r.default.createElement(a.Button,{type:"submit"},"Get Text")))};s.propTypes={changedLength:o.default.func.isRequired,changedNum:o.default.func.isRequired,changedType:o.default.func.isRequired,length:o.default.string.isRequired,num:o.default.number.isRequired,submit:o.default.func.isRequired,type:o.default.string.isRequired},t.default=s},"./src/components/Output.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n("./node_modules/react/index.js")),o=s(n("./node_modules/prop-types/index.js")),a=n("./src/styles/Output.js"),i=n("./node_modules/react-spinners/index.js");function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t="";return t=""===e.text?r.default.createElement(i.PulseLoader,{size:30,color:"#fda403",margin:"10px"}):e.text,r.default.createElement(a.Container,null,t)};l.propTypes={text:o.default.string},t.default=l},"./src/containers/App.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./node_modules/react/index.js"),a=d(o),i=n("./src/styles/App.js"),s=d(n("./node_modules/axios/index.js")),l=d(n("./src/components/Options.js")),u=d(n("./src/components/Output.js")),c=d(n("./src/components/Navbar.js"));function d(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={text:"",numOfParagraphs:2,length:"short",type:"para"},n.changedLengthHandler=n.changedLengthHandler.bind(n),n.changedNumHandler=n.changedNumHandler.bind(n),n.changedTypeHandler=n.changedTypeHandler.bind(n),n.fetchText=n.fetchText.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.fetchText()}},{key:"changedLengthHandler",value:function(e){this.setState({length:e.target.value})}},{key:"changedNumHandler",value:function(e){this.setState({numOfParagraphs:e.target.value})}},{key:"changedTypeHandler",value:function(e){this.setState({type:e.target.value})}},{key:"fetchText",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];t&&t.preventDefault();var n=this.state,r=n.numOfParagraphs,o=n.length,a=n.type,i="https://loripsum.net/api/"+r+"/"+o+"/"+a;"para"===a&&(i="https://loripsum.net/api/"+r+"/"+o),s.default.get("https://cors-anywhere.herokuapp.com/"+i).then(function(t){var n=t.data;e.setState({text:n})})}},{key:"render",value:function(){return a.default.createElement(i.Container,null,a.default.createElement(c.default,null),a.default.createElement(l.default,{changedLength:this.changedLengthHandler,length:this.state.length,changedNum:this.changedNumHandler,num:this.state.numOfParagraphs,changedType:this.changedTypeHandler,type:this.state.type,submit:this.fetchText}),a.default.createElement(u.default,{text:this.state.text}))}}]),t}();t.default=f},"./src/index.js":function(e,t,n){"use strict";var r=i(n("./node_modules/react/index.js")),o=n("./node_modules/react-dom/index.js"),a=i(n("./src/containers/App.js"));function i(e){return e&&e.__esModule?e:{default:e}}(0,o.render)(r.default.createElement(a.default,null),document.getElementById("root")),e.hot.accept()},"./src/styles/App.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Container=void 0;var r,o,a,i=(r=[""],o=[""],Object.freeze(Object.defineProperties(r,{raw:{value:Object.freeze(o)}}))),s=n("./node_modules/styled-components/dist/styled-components.browser.es.js"),l=(a=s)&&a.__esModule?a:{default:a};t.Container=l.default.div(i)},"./src/styles/Navbar.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Heading=t.Header=void 0;var r,o=l(["\n  background-color: #fda403;\n  color: #111;\n  margin-bottom: 20px;\n  padding: 12px;\n\n  @media (max-width: 500px) {\n    font-size: 24px;\n    padding: 6px;\n  }\n"],["\n  background-color: #fda403;\n  color: #111;\n  margin-bottom: 20px;\n  padding: 12px;\n\n  @media (max-width: 500px) {\n    font-size: 24px;\n    padding: 6px;\n  }\n"]),a=l(["\n  font-family: Cabin, sans-serif;\n  font-size: 30px;\n  font-weight: normal;\n  text-align: center;\n"],["\n  font-family: Cabin, sans-serif;\n  font-size: 30px;\n  font-weight: normal;\n  text-align: center;\n"]),i=n("./node_modules/styled-components/dist/styled-components.browser.es.js"),s=(r=i)&&r.__esModule?r:{default:r};function l(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}t.Header=s.default.header(o),t.Heading=s.default.h1(a)},"./src/styles/Options.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Button=t.Select=t.Input=t.Container=void 0;var r,o=c(["\n  margin: 0 auto;\n  max-width: 1200px;\n  text-align: center;\n  width: 80%;\n"],["\n  margin: 0 auto;\n  max-width: 1200px;\n  text-align: center;\n  width: 80%;\n"]),a=c(["\n  border: 2px solid #ccc;\n  font-family: Cabin, sans-serif;\n  height: ",";\n  margin-right: 10px;\n  padding: 5px;\n  width: 60px;\n"],["\n  border: 2px solid #ccc;\n  font-family: Cabin, sans-serif;\n  height: ",";\n  margin-right: 10px;\n  padding: 5px;\n  width: 60px;\n"]),i=c(["\n  border: 2px solid #ccc;\n  font-family: Cabin, sans-serif;\n  height: ",";\n  margin-right: 10px;\n"],["\n  border: 2px solid #ccc;\n  font-family: Cabin, sans-serif;\n  height: ",";\n  margin-right: 10px;\n"]),s=c(["\n  background-color: #fda403;\n  border: none;\n  border-radius: 2px;\n  box-shadow: 3px 2px 1px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  display: block;\n  font-family: Cabin, sans-serif;\n  font-size: 16px;\n  margin: 10px auto;\n  padding: 10px 15px;\n  transition: background-color 400ms, color 400ms, transform 300ms;\n\n  &:hover {\n    background-color: #fdad1c;\n    box-shadow: none;\n    color: #f2f2f2;\n    transform: translate(3px, 2px);\n  }\n"],["\n  background-color: #fda403;\n  border: none;\n  border-radius: 2px;\n  box-shadow: 3px 2px 1px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  display: block;\n  font-family: Cabin, sans-serif;\n  font-size: 16px;\n  margin: 10px auto;\n  padding: 10px 15px;\n  transition: background-color 400ms, color 400ms, transform 300ms;\n\n  &:hover {\n    background-color: #fdad1c;\n    box-shadow: none;\n    color: #f2f2f2;\n    transform: translate(3px, 2px);\n  }\n"]),l=n("./node_modules/styled-components/dist/styled-components.browser.es.js"),u=(r=l)&&r.__esModule?r:{default:r};function c(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}t.Container=u.default.div(o),t.Input=u.default.input(a,"30px"),t.Select=u.default.select(i,"30px"),t.Button=u.default.button(s)},"./src/styles/Output.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Container=void 0;var r,o,a,i=(r=["\n  background-color: #f5f5f5;\n  border: 2px solid #ddd;\n  box-shadow: 2px 4px 0 rgba(0, 0, 0, 0.1);\n  font-family: 'Old Standard TT', serif;\n  font-size: 18px;\n  line-height: 2rem;\n  margin: 0 auto;\n  max-width: 1200px;\n  padding: 30px;\n  width: 80%;\n"],o=["\n  background-color: #f5f5f5;\n  border: 2px solid #ddd;\n  box-shadow: 2px 4px 0 rgba(0, 0, 0, 0.1);\n  font-family: 'Old Standard TT', serif;\n  font-size: 18px;\n  line-height: 2rem;\n  margin: 0 auto;\n  max-width: 1200px;\n  padding: 30px;\n  width: 80%;\n"],Object.freeze(Object.defineProperties(r,{raw:{value:Object.freeze(o)}}))),s=n("./node_modules/styled-components/dist/styled-components.browser.es.js"),l=(a=s)&&a.__esModule?a:{default:a};t.Container=l.default.div(i)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hhbmdlLWVtaXR0ZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uLXV0aWxzL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vtb3Rpb24vZGlzdC9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW1vdGlvbi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1wbGFpbi1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9oZWxwZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0JhckxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9CZWF0TG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0JvdW5jZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9DaXJjbGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvQ2xpbWJpbmdCb3hMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvQ2xpcExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9Eb3RMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvRmFkZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9HcmlkTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0hhc2hMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvTW9vbkxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9QYWNtYW5Mb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvUHJvcGFnYXRlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL1B1bHNlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL1JpbmdMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvUmlzZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9Sb3RhdGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvU2NhbGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvU3luY0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9lcy9SZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL2Rpc3Qvc3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zdHlsaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PdXRwdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL05hdmJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL09wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9PdXRwdXQuanMiXSwibmFtZXMiOlsicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjaHVua0lkIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90UmVxdWVzdFRpbWVvdXQiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsInB1c2giLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0RmFjdG9yeSIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJob3RTdGF0dXMiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiZmluaXNoQ2h1bmtMb2FkaW5nIiwiZXJyIiwiaG90V2FpdGluZ0ZpbGVzTWFwIiwiaG90RW5zdXJlVXBkYXRlQ2h1bmsiLCJob3RTdGF0dXNIYW5kbGVycyIsIm5ld1N0YXR1cyIsImkiLCJsZW5ndGgiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZU5ld0hhc2giLCJ0b01vZHVsZUlkIiwiaWQiLCJob3RDaGVjayIsImFwcGx5IiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYyIsImgiLCJwcm9taXNlIiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwiaG90QXBwbHkiLCJyZXN1bHQiLCJvdXRkYXRlZE1vZHVsZXMiLCJvcHRpb25zIiwiY2IiLCJqIiwibW9kdWxlIiwiZ2V0QWZmZWN0ZWRTdHVmZiIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsInNsaWNlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsInR5cGUiLCJfbWFpbiIsInBhcmVudElkIiwicGFyZW50IiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiY29uY2F0IiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJqb2luIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwiaWR4Iiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiZXJyb3JIYW5kbGVyIiwia2V5cyIsImZvckVhY2giLCJpbnN0YWxsZWRDaHVua3MiLCJob3REaXNwb3NlQ2h1bmsiLCJkZXBlbmRlbmN5IiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkYXRhIiwiZGlzcG9zZUhhbmRsZXJzIiwiX2Rpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwic3BsaWNlIiwibW9kdWxlcyIsImVycm9yIiwiY2FsbGJhY2tzIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwiZXhwb3J0cyIsImwiLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImNoZWNrIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJ1bmRlZmluZWQiLCJob3RDcmVhdGVNb2R1bGUiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJ1dGlscyIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwiYmluZCIsImNvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaXNGb3JtRGF0YSIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsInVybCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ4c3JmSGVhZGVyTmFtZSIsInZhbCIsImtleSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJjYW5jZWwiLCJhYm9ydCIsIkF4aW9zIiwiZGVmYXVsdHMiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJleHRlbmQiLCJheGlvcyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwibWVyZ2UiLCJDYW5jZWwiLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJkZWZhdWx0IiwibWVzc2FnZSIsInRoaXMiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiYXJndW1lbnRzIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJiYXNlVVJMIiwidHJhbnNmb3JtUmVxdWVzdCIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaXNVbmRlZmluZWQiLCJwcm9jZXNzIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJzdHJpbmdpZnkiLCJtYXhDb250ZW50TGVuZ3RoIiwiQWNjZXB0IiwidGhpc0FyZyIsImFyZ3MiLCJBcnJheSIsImNoYXJzIiwiRSIsImlucHV0IiwiYmxvY2siLCJjaGFyQ29kZSIsInN0ciIsIlN0cmluZyIsIm91dHB1dCIsImNoYXJBdCIsImNoYXJDb2RlQXQiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwiaXNBcnJheSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiaXNTdHJpbmciLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsInRlc3QiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIm5vcm1hbGl6ZWROYW1lIiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsImxpbmUiLCJ0cmltIiwic3Vic3RyIiwiYXJyIiwiaXNGdW5jdGlvbiIsIm9iaiIsIkZvcm1EYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwiY3JlYXRlQ2hhbmdlRW1pdHRlciIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImxpc3RlbiIsImxpc3RlbmVyIiwiaXNTdWJzY3JpYmVkIiwiaW5kZXgiLCJlbWl0IiwibGlzdGVuZXJzIiwiaGFzaFN0cmluZyIsInNlZWQiLCJjdXJyZW50SW5kZXgiLCJrIiwiVUludDMyIiwiVW11bDMyIiwiVUludDE2IiwiaW5kZXhfZXNfaGFzaCIsInBvcyIsIlNUWUxFU19LRVkiLCJUQVJHRVRfS0VZIiwidW5pdGxlc3MiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJpbmRleF9lc19tYWtlU3R5bGVUYWciLCJ0YWciLCJjcmVhdGVUZXh0Tm9kZSIsImluZGV4X2VzX3NoZWV0IiwiU3R5bGVTaGVldCIsImlzQnJvd3NlciIsImlzU3BlZWR5IiwidGFncyIsImN0ciIsIl9wcm90byIsImluamVjdCIsImluamVjdGVkIiwic2hlZXQiLCJzcGVlZHkiLCJib29sIiwiaW5zZXJ0IiwicnVsZSIsInNvdXJjZU1hcCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwiaW5kZXhfZXNfc2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJfdGFnIiwiZmx1c2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpbmRleF9lc19zdHlsaXMiLCJmYSIsImhhIiwiaWEiLCJ4YSIsImYiLCJtYSIsInoiLCJNIiwiWSIsInlhIiwiUiIsImphIiwic3Vic3RyaW5nIiwiUSIsInphIiwiQWEiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJUIiwidyIsIlUiLCJCYSIsIm5hIiwiYWEiLCJDYSIsIkRhIiwiYmEiLCJFYSIsInNhIiwiRmEiLCJPIiwicSIsImNhIiwiRiIsImVhIiwib2EiLCJrYSIsIlgiLCJjb25zdHJ1Y3RvciIsIkdhIiwiSyIsIkkiLCJ5IiwiViIsIkgiLCJBIiwiQiIsIngiLCJDIiwiRyIsIk4iLCJMIiwidCIsIkQiLCJnIiwidSIsIlMiLCJQIiwicWEiLCJXIiwicmEiLCJ0YSIsImxhIiwiSiIsInVhIiwidmEiLCJ3YSIsIloiLCJIYSIsIklhIiwiSmEiLCJLYSIsImRhIiwiRnVuY3Rpb24iLCJCb29sZWFuIiwia2V5ZnJhbWUiLCJpbmRleF9lc19leHRlcm5hbFN0eWxpc1BsdWdpbnMiLCJpbmRleF9lc191c2UiLCJpbmRleF9lc19pbnNlcnRpb25QbHVnaW4iLCJzdHlsaXNfcnVsZV9zaGVldF9kZWZhdWx0IiwiaW5kZXhfZXNfY3VycmVudFNvdXJjZU1hcCIsImluZGV4X2VzX3VzZVN0eWxpc1BsdWdpbiIsInBsdWdpbiIsImluZGV4X2VzX3JlZ2lzdGVyZWQiLCJpbmRleF9lc19pbnNlcnRlZCIsImluZGV4X2VzX2hhbmRsZUludGVycG9sYXRpb24iLCJpbnRlcnBvbGF0aW9uIiwiY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW5kZXhfZXNfb2JqZWN0VG9TdHJpbmdDYWNoZSIsImhhcyIsInN0cmluZyIsImluZGV4X2VzX3Byb2Nlc3NTdHlsZU5hbWUiLCJpbmRleF9lc19wcm9jZXNzU3R5bGVWYWx1ZSIsImNhY2hlZCIsImNhY2hlIiwiZGlzdF9pbmRleF9lc19oYXNoIiwiaW5kZXhfZXNfbmFtZSIsImluZGV4X2VzX2h5cGhlbmF0ZVJlZ2V4Iiwic3R5bGVOYW1lIiwiYXJnIiwiV2Vha01hcCIsImluZGV4X2VzX2xhYmVsUGF0dGVybiIsImluZGV4X2VzX2NyZWF0ZVN0eWxlcyIsInN0cmluZ3MiLCJzdHJpbmdNb2RlIiwic3R5bGVzIiwiaWRlbnRpZmllck5hbWUiLCJyYXciLCJfbGVuIiwiaW50ZXJwb2xhdGlvbnMiLCJfa2V5IiwicDEiLCJpbmRleF9lc19jc3MiLCJzZWxlY3RvciIsImluZGV4X2VzX2tleWZyYW1lcyIsImFuaW1hdGlvbiIsImluZGV4X2VzX2luamVjdEdsb2JhbCIsImluZGV4X2VzX2ZvbnRGYWNlIiwiaW5kZXhfZXNfZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiaW5kZXhfZXNfbWVyZ2UiLCJpbmRleF9lc19jeCIsImluZGV4X2VzX2NsYXNzbmFtZXMiLCJsZW4iLCJjbHMiLCJuZXh0IiwiaW5kZXhfZXNfaHlkcmF0ZSIsImlkcyIsImluZGV4X2VzX2ZsdXNoIiwidG9TaGVldCIsImNvbnRlbnQiLCJzZWxlY3RvcnMiLCJjb2x1bW4iLCJhdCIsImRlcHRoIiwiZGVsaW1pdGVyIiwiZmFjdG9yeSIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNOb2RlIiwiaXMiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZGVzY3JpcHRvciIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiaXNPYmplY3RPYmplY3QiLCJjdG9yIiwicHJvdCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImFzc2lnbiIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ0b09iamVjdCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiZnVuYyIsIm51bWJlciIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyZWdpc3RyYXRpb25OYW1lIiwiZGVwZW5kZW5jaWVzIiwiZnJlZXplIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiY3VycmVudFRhcmdldCIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiT2EiLCJQYSIsIlFhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlJhIiwiTWF0aCIsInJhbmRvbSIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiYWIiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsImJiIiwiZGlzcGF0Y2hDb25maWciLCJkYiIsIl90YXJnZXRJbnN0IiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImFsdGVybmF0ZSIsImpiIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJrYiIsImxiIiwiZG9jdW1lbnRFbGVtZW50IiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm1iIiwibmIiLCJvYiIsInBiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJyYiIsImV2ZW50UG9vbCIsInNiIiwiZGVzdHJ1Y3RvciIsInFiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkViIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIktiIiwiTGIiLCJrZXlDb2RlIiwiTWIiLCJkZXRhaWwiLCJOYiIsIlFiIiwid2hpY2giLCJPYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIlBiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiVmIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiV2IiLCJYYiIsIlliIiwiWmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJmYyIsImdjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJoYyIsImljIiwia2MiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImpjIiwibGMiLCJjaGVja2VkIiwibWMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiU3ltYm9sIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsIml0ZXJhdG9yIiwieWMiLCJ6YyIsIkFjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJCYyIsIkNjIiwiRGMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiSGMiLCJTYyIsIlRjIiwiRmMiLCJHYyIsIkVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJVYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiVmMiLCJXYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJYYyIsIlljIiwiWmMiLCIkYyIsInRhYkluZGV4IiwiYWQiLCJjaGFuZ2UiLCJiZCIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImRldGFjaEV2ZW50IiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInBkIiwidmlldyIsInFkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInJkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInNkIiwidGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJ1ZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwidmQiLCJwYXJlbnRXaW5kb3ciLCJ3ZCIsImVmZmVjdFRhZyIsInhkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInlkIiwiemQiLCJzaWJsaW5nIiwiY3VycmVudCIsIkNkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkRkIiwiY2xpcGJvYXJkRGF0YSIsIkVkIiwiRmQiLCJHZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJIZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJJZCIsInJlcGVhdCIsImxvY2FsZSIsIkpkIiwiZGF0YVRyYW5zZmVyIiwiS2QiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiTGQiLCJNZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiTmQiLCJPZCIsIlBkIiwiaXNJbnRlcmFjdGl2ZSIsIlFkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiUmQiLCJTZCIsIlRkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiJGQiLCJhZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImJlIiwiY2UiLCJkZSIsInN0eWxlIiwidHJhbnNpdGlvbiIsImVlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJmZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJmaXJzdENoaWxkIiwibGUiLCJ0ZXh0Q29udGVudCIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiY29udGVudEVkaXRhYmxlIiwibmUiLCJvZSIsInNlbGVjdCIsInBlIiwicWUiLCJyZSIsInNlIiwidWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwid2UiLCJvblNlbGVjdCIsInhlIiwicmVmIiwicGVuZGluZ1Byb3BzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsIm1vZGUiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ5ZSIsInplIiwiaXNSZWFjdENvbXBvbmVudCIsIkFlIiwiJCR0eXBlb2YiLCJCZSIsIkNlIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJsYXN0IiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiY2FwdHVyZWRWYWx1ZXMiLCJLZSIsIlNldCIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJwYXJ0aWFsU3RhdGUiLCJRZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiY2FwdHVyZWRWYWx1ZSIsIlJlIiwiVGUiLCJVZSIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZWZzIiwiVmUiLCJXZSIsIk1hcCIsImRvbmUiLCJYZSIsIlllIiwiWmUiLCJyZW5kZXIiLCJzdGF0ZSIsInBlbmRpbmdDb250ZXh0Iiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJwdXNoUHJvdmlkZXIiLCJnZXRNYXNrZWRDb250ZXh0IiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiV2EiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiQmIiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIkpjIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJ1cGRhdGVyIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNhY2hlQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJTZSIsIktjIiwiTGMiLCJDYiIsIk1jIiwiRGIiLCJiZWdpbldvcmsiLCJoeWRyYXRlIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImJmIiwic3RhY2siLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZGYiLCJrZiIsIlhhIiwiTmMiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJPYyIsIllhIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJGYiIsIndnIiwidmUiLCJJYyIsIlBjIiwiR2IiLCJ5ZyIsIlFjIiwibGciLCJuZXh0U2NoZWR1bGVkUm9vdCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiSGIiLCJaYSIsIkliIiwiX29uQ29tcGxldGUiLCJ2ZyIsIkpiIiwiZmluaXNoZWRXb3JrIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInpnIiwiJGEiLCJrZyIsInRlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImlzRW1wdHkiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJqZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJnZXRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsImN1cnNvciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiZ2YiLCJwb3BQcm92aWRlciIsImhmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZmYiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiaGFuZGxlciIsIiRlIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYWYiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImNmIiwiYWRkIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibGYiLCJBZCIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJCZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiR2UiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm1mIiwibmYiLCJvZiIsInFmIiwicGVyZm9ybWFuY2UiLCJyZiIsInNmIiwidGYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsImRpZFRpbWVvdXQiLCJDZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRmIiwicG9zdE1lc3NhZ2UiLCJJbmZpbml0eSIsIkZmIiwiQ2hpbGRyZW4iLCJFZiIsIkdmIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJIZiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJJZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJSZiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlNmIiwiVGYiLCJVZiIsInNldFByb3BlcnR5IiwiVmYiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJjZyIsIl9faHRtbCIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiZGciLCJlZyIsImZnIiwibWciLCJuZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJvZyIsInBnIiwicWciLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJyZyIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJzZyIsIl9pbnRlcm5hbFJvb3QiLCJ0ZyIsInVnIiwiYXV0b0ZvY3VzIiwiY29tbWl0IiwidW5tb3VudCIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNyZWF0ZUJhdGNoIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImhpZGRlbiIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiQ2ciLCJFZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJEZyIsIkZnIiwicGYiLCJHZyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImNoZWNrRENFIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiY2FsY3VsYXRlUmdiYSIsInJlcyIsInJnYlZhbHVlcyIsImhleCIsInBhcnNlSW50IiwiX0JhckxvYWRlciIsIl9CZWF0TG9hZGVyIiwiX0JvdW5jZUxvYWRlciIsIl9DaXJjbGVMb2FkZXIiLCJfQ2xpcExvYWRlciIsIl9DbGltYmluZ0JveExvYWRlciIsIl9Eb3RMb2FkZXIiLCJfRmFkZUxvYWRlciIsIl9HcmlkTG9hZGVyIiwiX0hhc2hMb2FkZXIiLCJfTW9vbkxvYWRlciIsIl9QYWNtYW5Mb2FkZXIiLCJfUHJvcGFnYXRlTG9hZGVyIiwiX1B1bHNlTG9hZGVyIiwiX1JpbmdMb2FkZXIiLCJfUmlzZUxvYWRlciIsIl9Sb3RhdGVMb2FkZXIiLCJfU2NhbGVMb2FkZXIiLCJfU3luY0xvYWRlciIsIl9CYXJMb2FkZXIyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9CZWF0TG9hZGVyMiIsIl9Cb3VuY2VMb2FkZXIyIiwiX0NpcmNsZUxvYWRlcjIiLCJfQ2xpcExvYWRlcjIiLCJfQ2xpbWJpbmdCb3hMb2FkZXIyIiwiX0RvdExvYWRlcjIiLCJfRmFkZUxvYWRlcjIiLCJfR3JpZExvYWRlcjIiLCJfSGFzaExvYWRlcjIiLCJfTW9vbkxvYWRlcjIiLCJfUGFjbWFuTG9hZGVyMiIsIl9Qcm9wYWdhdGVMb2FkZXIyIiwiX1B1bHNlTG9hZGVyMiIsIl9SaW5nTG9hZGVyMiIsIl9SaXNlTG9hZGVyMiIsIl9Sb3RhdGVMb2FkZXIyIiwiX1NjYWxlTG9hZGVyMiIsIl9TeW5jTG9hZGVyMiIsIkJhckxvYWRlciIsIkJlYXRMb2FkZXIiLCJCb3VuY2VMb2FkZXIiLCJDaXJjbGVMb2FkZXIiLCJDbGlwTG9hZGVyIiwiQ2xpbWJpbmdCb3hMb2FkZXIiLCJEb3RMb2FkZXIiLCJGYWRlTG9hZGVyIiwiR3JpZExvYWRlciIsIkhhc2hMb2FkZXIiLCJNb29uTG9hZGVyIiwiUGFjbWFuTG9hZGVyIiwiUHJvcGFnYXRlTG9hZGVyIiwiUHVsc2VMb2FkZXIiLCJSaW5nTG9hZGVyIiwiUmlzZUxvYWRlciIsIlJvdGF0ZUxvYWRlciIsIlNjYWxlTG9hZGVyIiwiU3luY0xvYWRlciIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfZW1vdGlvbiIsIl9yZWNvbXBvc2UiLCJfaGVscGVycyIsIkxvYWRlciIsIl9yZWFjdDIiLCJfcHJvcFR5cGVzMiIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJsb25nIiwia2V5ZnJhbWVzIiwic2hvcnQiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3JlZiIsIl90ZW1wIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfX3Byb3RvX18iLCJjc3MiLCJoZWlnaHQiLCJ3cmFwcGVyIiwid2lkdGgiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsImxvYWRpbmciLCJDb21wb25lbnQiLCJvbmx5VXBkYXRlRm9yS2V5cyIsImJlYXQiLCJzaXplIiwibWFyZ2luIiwiYm91bmNlIiwiY2lyY2xlIiwiY2xpbWJpbmdCb3giLCJoaWxsIiwiY29udGFpbmVyIiwiY2xpcCIsInJvdGF0ZSIsImZhZGUiLCJyYWRpdXMiLCJxdWFydGVyIiwiZ3JpZCIsInJhbmQiLCJ0aGlja25lc3MiLCJsYXQiLCJiZWZvcmUiLCJhZnRlciIsIm1vb24iLCJtb29uU2l6ZSIsImJhbGxTdHlsZSIsImJhbGwiLCJwYWNtYW4iLCJzMSIsInMyIiwicGFjbWFuU3R5bGUiLCJwYWMiLCJtYW4iLCJkaXN0YW5jZSIsInByb3BhZ2F0ZSIsInB1bHNlIiwicmlnaHQiLCJldmVuIiwib2RkIiwic2NhbGUiLCJzeW5jIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwia2V5UHJlZml4IiwiY291bnQiLCI9IiwiOiIsImVzY2FwZSIsInRvQXJyYXkiLCJvbmx5IiwiY3JlYXRlUmVmIiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfZGVmYXVsdFZhbHVlIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJzZXRTdGF0aWMiLCJCYXNlQ29tcG9uZW50Iiwic2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIkNvbXBvbmVudCQkMSIsIndyYXBEaXNwbGF5TmFtZSIsImhvY05hbWUiLCJtYXBQcm9wcyIsInByb3BzTWFwcGVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzQ2FsbENoZWNrIiwiX2V4dGVuZHMiLCJpbmhlcml0cyIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIndpdGhQcm9wcyIsInBpY2siLCJ3aXRoUHJvcHNPbkNoYW5nZSIsInNob3VsZE1hcE9yS2V5cyIsInNob3VsZE1hcCIsIm5leHRQcm9wcyIsImZianNfbGliX3NoYWxsb3dFcXVhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJfQ29tcG9uZW50IiwiV2l0aFByb3BzT25DaGFuZ2UiLCJjb21wdXRlZFByb3BzIiwibWFwVmFsdWVzIiwid2l0aEhhbmRsZXJzIiwiV2l0aEhhbmRsZXJzIiwiX2luaXRpYWxpc2VQcm9wcyIsImNhY2hlZEhhbmRsZXJzIiwiX3RoaXMyIiwiY3JlYXRlSGFuZGxlciIsImhhbmRsZXJOYW1lIiwiY2FjaGVkSGFuZGxlciIsIkRlZmF1bHRQcm9wcyIsIm93bmVyUHJvcHMiLCJvbWl0IiwicmVzdCIsInJlbmFtZVByb3AiLCJvbGROYW1lIiwibmV3TmFtZSIsIl9iYWJlbEhlbHBlcnMkZXh0ZW5kcyIsInJlbmFtZVByb3BzIiwibmFtZU1hcCIsIl8iLCJyZWR1Y2UiLCJmbGF0dGVuUHJvcCIsIndpdGhTdGF0ZSIsInN0YXRlTmFtZSIsInN0YXRlVXBkYXRlck5hbWUiLCJpbml0aWFsU3RhdGUiLCJXaXRoU3RhdGUiLCJzdGF0ZVZhbHVlIiwidXBkYXRlU3RhdGVWYWx1ZSIsInVwZGF0ZUZuIiwid2l0aFN0YXRlSGFuZGxlcnMiLCJzdGF0ZVVwZGF0ZXJzIiwiV2l0aFN0YXRlSGFuZGxlcnMiLCJuZXh0U3RhdGUiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJtYXlCZUV2ZW50IiwiX2xlbjIiLCJfa2V5MiIsIndpdGhSZWR1Y2VyIiwiZGlzcGF0Y2hOYW1lIiwicmVkdWNlciIsIldpdGhSZWR1Y2VyIiwiaW5pdGlhbGl6ZVN0YXRlVmFsdWUiLCJkaXNwYXRjaCIsImFjdGlvbiIsImlkZW50aXR5IiwiYnJhbmNoIiwibGVmdEZhY3RvcnkiLCJyaWdodEZhY3RvcnkiLCJyZW5kZXJDb21wb25lbnQiLCJOb3RoaW5nIiwicmVuZGVyTm90aGluZyIsInNob3VsZFVwZGF0ZSIsIlNob3VsZFVwZGF0ZSIsInB1cmUiLCJob2MiLCJwcm9wS2V5cyIsIm9ubHlVcGRhdGVGb3JQcm9wVHlwZXMiLCJ3aXRoQ29udGV4dCIsIldpdGhDb250ZXh0IiwiZ2V0Q29udGV4dCIsIkdldENvbnRleHQiLCJsaWZlY3ljbGUiLCJzcGVjIiwiTGlmZWN5Y2xlIiwiaG9vayIsImlzQ2xhc3NDb21wb25lbnQiLCJ0b0NsYXNzIiwiYmFzZUNvbXBvbmVudCIsIlRvQ2xhc3MiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJzZXRQcm9wVHlwZXMiLCJjb21wb3NlIiwiZnVuY3MiLCJjcmVhdGVTaW5rIiwiU2luayIsImNvbXBvbmVudEZyb21Qcm9wIiwibmVzdCIsIkNvbXBvbmVudHMiLCJmYWN0b3JpZXMiLCJyZWR1Y2VSaWdodCIsImhvaXN0U3RhdGljcyIsImhpZ2hlck9yZGVyQ29tcG9uZW50IiwiTmV3Q29tcG9uZW50IiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiX2NvbmZpZyIsImZyb21FU09ic2VydmFibGUiLCJ0b0VTT2JzZXJ2YWJsZSIsImNvbmZpZ3VyZU9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwic3RyZWFtIiwiY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWciLCJjb25maWckJDEiLCJwcm9wc1RvVmRvbSIsIkNvbXBvbmVudEZyb21TdHJlYW0iLCJfY29uZmlnJGZyb21FU09ic2VydmEiLCJ2ZG9tIiwicHJvcHNFbWl0dGVyIiwiY2hhbmdlX2VtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInByb3BzJCIsInN1YnNjcmliZSIsIm9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJ2ZG9tJCIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudEZyb21TdHJlYW0iLCJpZGVudGl0eSQxIiwibWFwUHJvcHNTdHJlYW1XaXRoQ29uZmlnIiwidHJhbnNmb3JtIiwiY2hpbGRQcm9wcyIsIm1hcFByb3BzU3RyZWFtIiwiY3JlYXRlRXZlbnRIYW5kbGVyV2l0aENvbmZpZyIsImVtaXR0ZXIiLCJjcmVhdGVFdmVudEhhbmRsZXIiLCJfdXBwZXJjYXNlUGF0dGVybiIsImh5cGhlbmF0ZSIsIm1zUGF0dGVybiIsImh5cGhlbmF0ZVN0eWxlTmFtZV8xIiwiZmxhdHRlbiIsImNodW5rcyIsImV4ZWN1dGlvbkNvbnRleHQiLCJydWxlU2V0IiwiY2h1bmsiLCJzdHlsZWRDb21wb25lbnRJZCIsImlzX3BsYWluX29iamVjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJvYmpUb0NzcyIsInByZXZLZXkiLCJmaWx0ZXIiLCJzdHlsaXNTcGxpdHRlciIsInN0eWxpc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJnbG9iYWwiLCJjYXNjYWRlIiwicHJlZml4IiwiY29tcHJlc3MiLCJzZW1pY29sb24iLCJzdHlsaXMiLCJwYXJzaW5nUnVsZXMiLCJyZXR1cm5SdWxlc1BsdWdpbiIsInBhcnNlZFJ1bGVzIiwicGFyc2VSdWxlc1BsdWdpbiIsInN0eWxpc19ydWxlX3NoZWV0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInN0cmluZ2lmeVJ1bGVzIiwicnVsZXMiLCJmbGF0Q1NTIiwiaXNTdHlsZWRDb21wb25lbnQiLCJjb25zb2xpZGF0ZVN0cmVhbWVkU3R5bGVzIiwiZ2V0QWxwaGFiZXRpY0NoYXIiLCJnZW5lcmF0ZUFscGhhYmV0aWNOYW1lIiwiZmxvb3IiLCJpbnRlcnAiLCJpbnRlcmxlYXZlIiwiU0NfQVRUUiIsIkNPTlRFWFRfS0VZIiwiSVNfQlJPV1NFUiIsIlNDX0NPTVBPTkVOVF9JRCIsImV4dHJhY3RDb21wcyIsIm1heWJlQ1NTIiwiZXhpc3RpbmdDb21wb25lbnRzIiwiY29tcG9uZW50SWQiLCJtYXRjaEluZGV4IiwibmV4dENvbXAiLCJjc3NGcm9tRE9NIiwiZ2V0Tm9uY2UiLCJjcmVhdGVDbGFzcyIsImFkZE5hbWVGb3JJZCIsIm5hbWVzIiwicmVzZXRJZE5hbWVzIiwiaGFzTmFtZUZvcklkIiwic3RyaW5naWZ5TmFtZXMiLCJzaGVldEZvclRhZyIsInNhZmVJbnNlcnRSdWxlIiwiY3NzUnVsZSIsIm1heEluZGV4IiwidGhyb3dDbG9uZVRhZ0VyciIsIm1ha2VUZXh0TWFya2VyIiwiYWRkVXBVbnRpbEluZGV4Iiwic2l6ZXMiLCJ0b3RhbFVwVG9JbmRleCIsIndyYXBBc0h0bWxUYWciLCJhZGRpdGlvbmFsQXR0cnMiLCJub25jZSIsIndyYXBBc0VsZW1lbnQiLCJfcHJvcHMiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkiLCJtYXJrZXJzIiwibWFrZVNlcnZlclRhZ0ludGVybmFsIiwibmFtZXNBcmciLCJtYXJrZXJzQXJnIiwiaW5zZXJ0TWFya2VyIiwicHJldiIsImNzc0ZvcklkIiwic3R5bGVUYWciLCJnZXRJZHMiLCJpbnNlcnRSdWxlcyIsInJlbW92ZVJ1bGVzIiwidG9IVE1MIiwiY2xvbmUiLCJuYW1lc0Nsb25lIiwiY2xvbmVOYW1lcyIsIm1hcmtlcnNDbG9uZSIsIm1ha2VUYWciLCJ0YWdFbCIsImZvcmNlU2VydmVyIiwiZ2V0SW1wb3J0UnVsZVRhZyIsImVsIiwibWFrZVN0eWxlVGFnIiwiZXh0cmFjdEltcG9ydCIsInVzZWRJbXBvcnRSdWxlVGFnIiwiY3NzVGV4dCIsImluc2VydEluZGV4IiwiaW5qZWN0ZWRSdWxlcyIsImltcG9ydFJ1bGVzIiwiY3NzUnVsZXNTaXplIiwibWF5SGF2ZUltcG9ydCIsInJlbW92YWxJbmRleCIsImxvd2VyQm91bmQiLCJkZWxldGVSdWxlIiwiZGVsZXRlUnVsZXMiLCJtYWtlU3BlZWR5VGFnIiwiTUFYX1NJWkUiLCJfU3R5bGVTaGVldE1hbmFnZXIkY2giLCJzaGVldFJ1bm5pbmdJZCIsIm1hc3RlciIsImltcG9ydFJ1bGVUYWciLCJmaXJzdFRhZyIsInNlYWxlZCIsInRhZ01hcCIsInJlaHlkcmF0ZWROYW1lcyIsImlnbm9yZVJlaHlkcmF0ZWROYW1lcyIsImNhcGFjaXR5IiwiY2xvbmVzIiwicmVoeWRyYXRlIiwiZWxzIiwiZXh0cmFjdGVkIiwiaXNTdHJlYW1lZCIsIm5vZGVzIiwibm9kZXNTaXplIiwiZ2V0QXR0cmlidXRlIiwiZWxOYW1lcyIsImVsTmFtZXNTaXplIiwiZXh0cmFjdGVkU2l6ZSIsInJlaHlkcmF0aW9uVGFnIiwiaW1tZWRpYXRlUmVoeWRyYXRpb24iLCJjYWxsZWQiLCJfZXh0cmFjdGVkJGkiLCJfaSIsIm1ha2VSZWh5ZHJhdGlvblRhZyIsIm1heCIsIl9qIiwicmVzZXQiLCJuZXdUYWciLCJzZWFsQWxsVGFncyIsImxhc3RFbCIsImdldFRhZ0ZvcklkIiwiaGFzSWQiLCJkZWZlcnJlZEluamVjdCIsImluamVjdFJ1bGVzIiwiZGVmZXJyZWRSdWxlcyIsInRvUmVhY3RFbGVtZW50cyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJTdHlsZVNoZWV0TWFuYWdlciIsInNoZWV0SW5zdGFuY2UiLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdCIsIlNlcnZlclN0eWxlU2hlZXQiLCJtYXN0ZXJTaGVldCIsImNsb3NlZCIsImNvbGxlY3RTdHlsZXMiLCJnZXRTdHlsZVRhZ3MiLCJnZXRTdHlsZUVsZW1lbnQiLCJpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0iLCJyZWFkYWJsZVN0cmVhbSIsIkFUVFJJQlVURV9SRUdFWCIsImlzQ3VzdG9tQXR0cmlidXRlIiwiaXNUYWciLCJnZXRDb21wb25lbnROYW1lIiwiZGV0ZXJtaW5lVGhlbWUiLCJmYWxsYmFja1RoZW1lIiwiaXNEZWZhdWx0VGhlbWUiLCJ0aGVtZSIsImVzY2FwZVJlZ2V4IiwiZGFzaGVzQXRFbmRzIiwiX1RoZW1lUHJvdmlkZXIkY2hpbGRDIiwiX1RoZW1lUHJvdmlkZXIkY29udGV4IiwiQ0hBTk5FTCIsIkNIQU5ORUxfTkVYVCIsIkNPTlRFWFRfQ0hBTk5FTF9TSEFQRSIsImdldFRoZW1lIiwiVGhlbWVQcm92aWRlciIsInVuc3Vic2NyaWJlVG9PdXRlcklkIiwib3V0ZXJDb250ZXh0Iiwib3V0ZXJUaGVtZSIsImJyb2FkY2FzdCIsInB1Ymxpc2giLCJjdXJyZW50SWQiLCJ1bnN1YklEIiwiY3JlYXRlQnJvYWRjYXN0IiwiX3RoaXMzIiwic3Vic2NyaWJlciIsInVuc3Vic2NyaWJlSWQiLCJwYXNzZWRUaGVtZSIsIlNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCIsIm11cm11cmhhc2giLCJhcmVTdHlsZXNDYWNoZWFibGUiLCJpc1N0YXRpY1J1bGVzIiwiYXR0cnMiLCJpc0hSTUVuYWJsZWQiLCJkb21FbGVtZW50cyIsIndyYXBXaXRoVGhlbWUiLCJfV2l0aFRoZW1lJGNvbnRleHRUeXAiLCJpc1N0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQiLCJzaG91bGRTZXRJbm5lclJlZiIsIldpdGhUaGVtZSIsInN0eWxlZENvbnRleHQiLCJ0aGVtZVByb3AiLCJuZXh0VGhlbWUiLCJvbGRTdGF0ZSIsImlubmVyUmVmIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX19kZWZhdWx0IiwiX19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0hBVU5URURfQllfU1BPT0tZX0dIT1NUUyIsIkNvbXBvbmVudFN0eWxlIiwibmFtZUdlbmVyYXRvciIsImdlbmVyYXRlUnVsZUhhc2giLCJpc1N0YXRpYyIsInBsYWNlaG9sZGVyIiwiZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMiLCJzdHlsZVNoZWV0IiwibGFzdENsYXNzTmFtZSIsImdlbmVyYXRlTmFtZSIsIl9Db21wb25lbnRTdHlsZSIsImNvbnN0cnVjdFdpdGhPcHRpb25zIiwiY29tcG9uZW50Q29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUZ1bmN0aW9uIiwid2l0aENvbmZpZyIsIl9jb25zdHJ1Y3RXaXRoT3B0aW9ucyIsIlN0eWxlZENvbXBvbmVudCIsImlkZW50aWZpZXJzIiwiQmFzZVN0eWxlZENvbXBvbmVudCIsImdlbmVyYXRlZENsYXNzTmFtZSIsInVuc3Vic2NyaWJlRnJvbUNvbnRleHQiLCJidWlsZEV4ZWN1dGlvbkNvbnRleHQiLCJhY2MiLCJhdHRyIiwiX2NvbnN0cnVjdG9yIiwiY29tcG9uZW50U3R5bGUiLCJ3YXJuVG9vTWFueUNsYXNzZXMiLCJfZ2VuZXJhdGVkQ2xhc3NOYW1lIiwiX3RoaXM0IiwiX2NvbnN0cnVjdG9yMiIsImlzVGFyZ2V0VGFnIiwiYmFzZVByb3BzIiwicHJvcHNGb3JFbGVtZW50IiwiY3JlYXRlU3R5bGVkQ29tcG9uZW50IiwiX1N0eWxlZENvbXBvbmVudCRjb250IiwiX29wdGlvbnMkZGlzcGxheU5hbWUiLCJfb3B0aW9ucyRjb21wb25lbnRJZCIsIl9kaXNwbGF5TmFtZSIsInBhcmVudENvbXBvbmVudElkIiwibnIiLCJnZW5lcmF0ZUlkIiwiX29wdGlvbnMkUGFyZW50Q29tcG9uIiwiUGFyZW50Q29tcG9uZW50IiwiZXh0ZW5kaW5nUnVsZXMiLCJfUGFyZW50Q29tcG9uZW50Iiwid2l0aENvbXBvbmVudCIsInByZXZpb3VzQ29tcG9uZW50SWQiLCJvcHRpb25zVG9Db3B5IiwibmV3Q29tcG9uZW50SWQiLCJuZXdPcHRpb25zIiwicnVsZXNGcm9tT3B0aW9ucyIsIm5ld1J1bGVzIiwiX1N0eWxlZENvbXBvbmVudCIsIl9rZXlmcmFtZXMiLCJpbmplY3RHbG9iYWwiLCJfaW5qZWN0R2xvYmFsIiwic3R5bGVkIiwic3R5bGVkQ29tcG9uZW50IiwiZG9tRWxlbWVudCIsIl9zdHlsZWQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwibnMiLCJudWxscHRuIiwiZm9ybWF0cHRuIiwiY29sb25wdG4iLCJjdXJzb3JwdG4iLCJ0cmFuc2Zvcm1wdG4iLCJhbmltYXRpb25wdG4iLCJwcm9wZXJ0aWVzcHRuIiwiZWxlbWVudHB0biIsInNlbGVjdG9ycHRuIiwiYW5kcHRuIiwiZXNjYXBlcHRuIiwiaW52YWxpZHB0biIsImtleWZyYW1lcHRuIiwicGxjaG9sZHJwdG4iLCJyZWFkb25seXB0biIsImJlZm9yZXB0biIsImFmdGVycHRuIiwidGFpbHB0biIsIndoaXRlcHRuIiwicHNldWRvcHRuIiwid3JpdGluZ3B0biIsInN1cHBvcnRzcHRuIiwicHJvcGVydHlwdG4iLCJzZWxmcHRuIiwicHNldWRvZm10IiwiZGltZW5zaW9ucHRuIiwid2Via2l0IiwibW96IiwibXMiLCJTRU1JQ09MT04iLCJDTE9TRUJSQUNFUyIsIk9QRU5CUkFDRVMiLCJPUEVOUEFSRU5USEVTRVMiLCJDTE9TRVBBUkVOVEhFU0VTIiwiT1BFTkJSQUNLRVQiLCJDTE9TRUJSQUNLRVQiLCJORVdMSU5FIiwiQ0FSUklBR0UiLCJUQUIiLCJBVCIsIlNQQUNFIiwiQU5EIiwiREFTSCIsIlVOREVSU0NPUkUiLCJTVEFSIiwiQ09NTUEiLCJDT0xPTiIsIlNJTkdMRVFVT1RFIiwiRE9VQkxFUVVPVEUiLCJGT1dBUkRTTEFTSCIsIkdSRUFURVJUSEFOIiwiUExVUyIsIlRJTERFIiwiTlVMTCIsIkZPUk1GRUVEIiwiVkVSVElDQUxUQUIiLCJLRVlGUkFNRSIsIk1FRElBIiwiU1VQUE9SVFMiLCJQTEFDRUhPTERFUiIsIlJFQURPTkxZIiwiSU1QT1JUIiwiQ0hBUlNFVCIsIkRPQ1VNRU5UIiwiUEFHRSIsInBhdHRlcm4iLCJwcmVzZXJ2ZSIsInBsdWdnZWQiLCJzaG91bGQiLCJQT1NUUyIsIlBSRVBTIiwiVU5LV04iLCJQUk9QUyIsIkJMQ0tTIiwiQVRSVUwiLCJ1bmt3biIsImtleWVkIiwibnNjb3BlYWx0IiwibnNjb3BlIiwiY29tcGlsZSIsImJyYWNrZXQiLCJjb21tZW50IiwicGFyZW50aGVzZXMiLCJxdW90ZSIsInNlY29uZCIsInRhaWwiLCJ0cmFpbCIsInBlYWsiLCJjb3VudGVyIiwiYXRydWxlIiwicHNldWRvIiwiY2FyZXQiLCJpbnZlcnQiLCJlb2YiLCJlb2wiLCJvdXQiLCJmbGF0IiwicHJveHkiLCJzdXBwb3J0cyIsInZlbmRvciIsInBhZGRpbmciLCJlbGVtZW50cyIsImlzb2xhdGUiLCJzY29wZSIsImxldmVsIiwidGhpcmQiLCJkZWNsYXJlIiwibGlzdCIsIml0ZW1zIiwiZ3JvdXAiLCJtaW5pZnkiLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJldmFsIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJfTmF2YmFyIiwiSGVhZGVyIiwiSGVhZGluZyIsIl9PcHRpb25zIiwiT3B0aW9ucyIsIkNvbnRhaW5lciIsIm9uU3VibWl0Iiwic3VibWl0IiwiSW5wdXQiLCJvbkNoYW5nZSIsImNoYW5nZWROdW0iLCJudW0iLCJTZWxlY3QiLCJjaGFuZ2VkVHlwZSIsImNoYW5nZWRMZW5ndGgiLCJCdXR0b24iLCJfT3V0cHV0IiwiX3JlYWN0U3Bpbm5lcnMiLCJPdXRwdXQiLCJfQXBwIiwiQXBwIiwibnVtT2ZQYXJhZ3JhcGhzIiwiY2hhbmdlZExlbmd0aEhhbmRsZXIiLCJjaGFuZ2VkTnVtSGFuZGxlciIsImNoYW5nZWRUeXBlSGFuZGxlciIsImZldGNoVGV4dCIsImV2ZW50IiwiX3N0YXRlIiwiX2F4aW9zMiIsIl9OYXZiYXIyIiwiX09wdGlvbnMyIiwiX091dHB1dDIiLCJfcmVhY3REb20iLCJfQXBwMiIsImdldEVsZW1lbnRCeUlkIiwiX3N0eWxlZENvbXBvbmVudHMiLCJfc3R5bGVkQ29tcG9uZW50czIiLCJkaXYiLCJfdGVtcGxhdGVPYmplY3QiLCJoZWFkZXIiLCJoMSIsIl90ZW1wbGF0ZU9iamVjdDIiLCJfdGVtcGxhdGVPYmplY3QzIiwiX3RlbXBsYXRlT2JqZWN0NCJdLCJtYXBwaW5ncyI6ImFBR0EsSUFBQUEsRUFBQUMsT0FBQSxpQkFDQUEsT0FBQSxpQkFDQSxTQUFBQyxFQUFBQyxJQW9RQSxTQUFBRCxFQUFBQyxHQUNBLElBQUFDLEVBQUFGLEtBQUFHLEVBQUFILEdBQ0EsT0FFQSxRQUFBSSxLQURBRCxFQUFBSCxJQUFBLEVBQ0FDLEVBQ0FJLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFQLEVBQUFHLEtBQ0FLLEVBQUFMLEdBQUFILEVBQUFHLElBR0EsS0FBQU0sR0FBQSxJQUFBQyxHQUNBQyxJQTdRQUMsQ0FBQWIsRUFBQUMsR0FDQUgsS0FBQUUsRUFBQUMsSUF1REEsSUFJQWEsRUFKQUMsR0FBQSxFQUNBQyxFQUFBLHVCQUNBQyxFQUFBLElBQ0FDLEtBRUFDLEtBQ0FDLEtBR0EsU0FBQUMsRUFBQWpCLEdBQ0EsSUFBQWtCLEVBQUFDLEVBQUFuQixHQUNBLElBQUFrQixFQUFBLE9BQUFFLEVBQ0EsSUFBQUMsRUFBQSxTQUFBQyxHQW1CQSxPQWxCQUosRUFBQUssSUFBQUMsUUFDQUwsRUFBQUcsSUFDQSxJQUFBSCxFQUFBRyxHQUFBRyxRQUFBQyxRQUFBMUIsSUFD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RSxFQUFBLHlDQUNBQSxFQUFBLGdGQUVBLEVBQUEwMUUsRUFBQTlrQyxRQUFPb2MsRUFBQS8rQyxRQUFBbkssY0FBQTZ4RSxFQUFBMW5FLFFBQUEsTUFBU3RLLFNBQVNpeUUsZUFBZSxTQUd0Q2x4RSxFQUFPdkUsSUFBSW1JLHNPQ1BidXRFLEVBQUE3MUUsRUFBQSw2R0FFYSt6RSxZQUFZK0IsRUFBQTduRSxRQUFPOG5FLElBQW5CQywyc0JDRmJILEVBQUE3MUUsRUFBQSw2TUFFYTJ6RSxTQUFTbUMsRUFBQTduRSxRQUFPZ29FLE9BQWhCRCxHQVlBcEMsVUFBVWtDLEVBQUE3bkUsUUFBT2lvRSxHQUFqQkMsbXZEQ2RiTixFQUFBNzFFLEVBQUEsNk1BSWErekUsWUFBWStCLEVBQUE3bkUsUUFBTzhuRSxJQUFuQkMsR0FPQTlCLFFBQVE0QixFQUFBN25FLFFBQU80RCxNQUFmc2tFLEVBVE8sUUFrQlA3QixTQUFTd0IsRUFBQTduRSxRQUFPMjlCLE9BQWhCd3FDLEVBbEJPLFFBeUJQM0IsU0FBU3FCLEVBQUE3bkUsUUFBT3F3QixPQUFoQiszQywrdUJDM0JiUixFQUFBNzFFLEVBQUEsNkdBRWErekUsWUFBWStCLEVBQUE3bkUsUUFBTzhuRSxJQUFuQkMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHQ7XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKVxuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiMzhhOWQ2YTdhZmQzMzk1MTEyZGRcIjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSlcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZShcIi4vc3JjL2luZGV4LmpzXCIpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgY3JlYXRlQ2hhbmdlRW1pdHRlciA9IGV4cG9ydHMuY3JlYXRlQ2hhbmdlRW1pdHRlciA9IGZ1bmN0aW9uIGNyZWF0ZUNoYW5nZUVtaXR0ZXIoKSB7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsaXN0ZW46IGxpc3RlbixcbiAgICBlbWl0OiBlbWl0XG4gIH07XG59OyIsIi8vIG11cm11cmhhc2gyIHZpYSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yYXljbW9yZ2FuLzU4ODQyM1xuZnVuY3Rpb24gaGFzaFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGhhc2goc3RyLCBzdHIubGVuZ3RoKS50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyLCBzZWVkKSB7XG4gIHZhciBtID0gMHg1YmQxZTk5NTtcbiAgdmFyIHIgPSAyNDtcbiAgdmFyIGggPSBzZWVkIF4gc3RyLmxlbmd0aDtcbiAgdmFyIGxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIHZhciBjdXJyZW50SW5kZXggPSAwO1xuXG4gIHdoaWxlIChsZW5ndGggPj0gNCkge1xuICAgIHZhciBrID0gVUludDMyKHN0ciwgY3VycmVudEluZGV4KTtcbiAgICBrID0gVW11bDMyKGssIG0pO1xuICAgIGsgXj0gayA+Pj4gcjtcbiAgICBrID0gVW11bDMyKGssIG0pO1xuICAgIGggPSBVbXVsMzIoaCwgbSk7XG4gICAgaCBePSBrO1xuICAgIGN1cnJlbnRJbmRleCArPSA0O1xuICAgIGxlbmd0aCAtPSA0O1xuICB9XG5cbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IFVJbnQxNihzdHIsIGN1cnJlbnRJbmRleCk7XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGN1cnJlbnRJbmRleCArIDIpIDw8IDE2O1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSBVSW50MTYoc3RyLCBjdXJyZW50SW5kZXgpO1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChjdXJyZW50SW5kZXgpO1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9IFVtdWwzMihoLCBtKTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIGggPj4+IDA7XG59XG5cbmZ1bmN0aW9uIFVJbnQzMihzdHIsIHBvcykge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQocG9zKyspICsgKHN0ci5jaGFyQ29kZUF0KHBvcysrKSA8PCA4KSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgMTYpICsgKHN0ci5jaGFyQ29kZUF0KHBvcykgPDwgMjQpO1xufVxuXG5mdW5jdGlvbiBVSW50MTYoc3RyLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KHBvcysrKSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgOCk7XG59XG5cbmZ1bmN0aW9uIFVtdWwzMihuLCBtKSB7XG4gIG4gPSBuIHwgMDtcbiAgbSA9IG0gfCAwO1xuICB2YXIgbmxvID0gbiAmIDB4ZmZmZjtcbiAgdmFyIG5oaSA9IG4gPj4+IDE2O1xuICB2YXIgcmVzID0gbmxvICogbSArICgobmhpICogbSAmIDB4ZmZmZikgPDwgMTYpIHwgMDtcbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIHBhID0gZnVuY3Rpb24gZmEoaGEpIHtcbiAgZnVuY3Rpb24gVihiLCBjLCBkLCBrLCBsKSB7XG4gICAgZm9yICh2YXIgYSA9IDAsIGYgPSAwLCBuID0gMCwgZSA9IDAsIGgsIHEsIG0sIHYgPSAwLCBBID0gMCwgQiA9IDAsIHggPSAwLCBDID0gMCwgcCA9IDAsIEcgPSAwLCByID0gMCwgTiA9IHEgPSAwLCBMID0gMCwgdCA9IDAsIEQgPSBkLmxlbmd0aCwgRiA9IEQgLSAxLCBnID0gXCJcIiwgdSA9IFwiXCIsIFMgPSBcIlwiLCBNID0gXCJcIiwgSDsgciA8IEQ7KSB7XG4gICAgICBtID0gZC5jaGFyQ29kZUF0KHIpO1xuICAgICAgciA9PT0gRiAmJiAwICE9PSBmICsgZSArIG4gKyBhICYmICgwICE9PSBmICYmIChtID0gNDcgPT09IGYgPyAxMCA6IDQ3KSwgZSA9IG4gPSBhID0gMCwgRCsrLCBGKyspO1xuXG4gICAgICBpZiAoMCA9PT0gZiArIGUgKyBuICsgYSkge1xuICAgICAgICBpZiAociA9PT0gRiAmJiAoMCA8IHEgJiYgKGcgPSBnLnJlcGxhY2UoUCwgXCJcIikpLCAwIDwgZy50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAobSkge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGcgKz0gZC5jaGFyQXQocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbSA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKDEgPT09IE4pIHN3aXRjaCAobSkge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgTiA9IDA7XG5cbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBmb3IgKE4gPSAwLCB0ID0gciwgaCA9IG0sIHItLSwgbSA9IDU5OyB0IDwgRDspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChkLmNoYXJDb2RlQXQoKyt0KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgcisrLCBtID0gaDtcblxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICB0ID0gRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGcgPSBnLnRyaW0oKTtcbiAgICAgICAgICAgIGggPSBnLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB4ID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytyOyByIDwgRDspIHtcbiAgICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdChyKTtcblxuICAgICAgICAgICAgICBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICB4LS07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0geCkgYnJlYWs7XG4gICAgICAgICAgICAgIHIrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IGQuc3Vic3RyaW5nKHQsIHIpO1xuICAgICAgICAgICAgMCA9PT0gaCAmJiAoaCA9IChnID0gZy5yZXBsYWNlKHFhLCBcIlwiKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGgpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgcSAmJiAoZyA9IGcucmVwbGFjZShQLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgcSA9IGcuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgaCA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBoID0gVztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwID0gVihjLCBoLCBwLCBxLCBsICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IHAubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBYICYmIDAgPT09IHQgJiYgKHQgPSBnLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgMCA8IEUgJiYgKGggPSBpYShXLCBnLCBMKSwgSCA9IE8oMywgcCwgaCwgYywgSSwgeSwgdCwgcSwgbCksIGcgPSBoLmpvaW4oXCJcIiksIHZvaWQgMCAhPT0gSCAmJiAwID09PSAodCA9IChwID0gSC50cmltKCkpLmxlbmd0aCkgJiYgKHEgPSAwLCBwID0gXCJcIikpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZyA9IGcucmVwbGFjZShyYSwgc2EpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGcgKyBcIntcIiArIHAgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBnID0gZy5yZXBsYWNlKHRhLCBcIiQxICQyXCIgKyAoMCA8IFEgPyBUIDogXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBwID0gZyArIFwie1wiICsgcCArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICBwID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIFUoXCJAXCIgKyBwLCAzKSA/IFwiQC13ZWJraXQtXCIgKyBwICsgXCJAXCIgKyBwIDogXCJAXCIgKyBwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGcgKyBwLCAxMTIgPT09IGsgJiYgKHAgPSAodSArPSBwLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHAgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcCA9IFYoYywgaWEoYywgZywgTCksIHAsIGssIGwgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUyArPSBwO1xuICAgICAgICAgICAgcCA9IEwgPSBxID0gRyA9IE4gPSBDID0gMDtcbiAgICAgICAgICAgIGcgPSBcIlwiO1xuICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdCgrK3IpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZyA9ICgwIDwgcSA/IGcucmVwbGFjZShQLCBcIlwiKSA6IGcpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBnLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gRyAmJiAoaCA9IGcuY2hhckNvZGVBdCgwKSwgNDUgPT09IGggfHwgOTYgPCBoICYmIDEyMyA+IGgpICYmICh0ID0gKGcgPSBnLnJlcGxhY2UoXCIgXCIsIFwiOlwiKSkubGVuZ3RoKSwgMCA8IEUgJiYgdm9pZCAwICE9PSAoSCA9IE8oMSwgZywgYywgYiwgSSwgeSwgdS5sZW5ndGgsIGssIGwpKSAmJiAwID09PSAodCA9IChnID0gSC50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSBcIlxceDAwXFx4MDBcIiksIGggPSBnLmNoYXJDb2RlQXQoMCksIHEgPSBnLmNoYXJDb2RlQXQoMSksIGggKyBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE2OTpcbiAgICAgICAgICAgICAgY2FzZSAxNjM6XG4gICAgICAgICAgICAgICAgTSArPSBnICsgZC5jaGFyQXQocik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZy5jaGFyQ29kZUF0KHQgLSAxKSAmJiAodSArPSBqYShnLCBoLCBxLCBnLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEwgPSBxID0gRyA9IE4gPSBDID0gMDtcbiAgICAgICAgICAgIGcgPSBcIlwiO1xuICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdCgrK3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAobSkge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGlmICgwID09PSBmICsgZSArIG4gKyBhICsga2EpIHN3aXRjaCAoQikge1xuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgIGNhc2UgMTI2OlxuICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgMCA8IEcgJiYgKE4gPSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgNDcgPT09IGYgPyBmID0gMCA6IDAgPT09IHogKyBDICYmIChxID0gMSwgZyArPSBcIlxceDAwXCIpO1xuICAgICAgICAgIDAgPCBFICogbGEgJiYgTygwLCBnLCBjLCBiLCBJLCB5LCB1Lmxlbmd0aCwgaywgbCk7XG4gICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgSSsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBmICsgZSArIG4gKyBhKSB7XG4gICAgICAgICAgICB5Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB5Kys7XG4gICAgICAgICAgaCA9IGQuY2hhckF0KHIpO1xuXG4gICAgICAgICAgc3dpdGNoIChtKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gZSArIGEgKyBmKSBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICBoID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBtICYmIChoID0gXCIgXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGggPSBcIlxcXFwwXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICBoID0gXCJcXFxcZlwiO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgaCA9IFwiXFxcXHZcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IGUgKyBmICsgYSAmJiAwIDwgeiAmJiAocSA9IEwgPSAxLCBoID0gXCJcXGZcIiArIGgpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBlICsgZiArIGEgKyBKICYmIDAgPCBHKSBzd2l0Y2ggKHIgLSBHKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB2ICYmIDU4ID09PSBkLmNoYXJDb2RlQXQociAtIDMpICYmIChKID0gdik7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEEgJiYgKEogPSBBKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gZSArIGYgKyBhICYmIChHID0gcik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBmICsgbiArIGUgKyBhICYmIChxID0gMSwgaCArPSBcIlxcclwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgIDAgPT09IGYgJiYgKGUgPSBlID09PSBtID8gMCA6IDAgPT09IGUgPyBtIDogZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBmICYmIChlID0gZSA9PT0gbSA/IDAgOiAwID09PSBlID8gbSA6IGUpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gZSArIGYgKyBuICYmIGErKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IGUgKyBmICsgbiAmJiBhLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBlICsgZiArIGEgJiYgbi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IGUgKyBmICsgYSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBDKSBzd2l0Y2ggKDIgKiB2ICsgMyAqIEEpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgeCA9IDAsIEMgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuKys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gZiArIG4gKyBlICsgYSArIEcgKyBwICYmIChwID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IGUgKyBhICsgbikpIHN3aXRjaCAoZikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIG0gKyAzICogZC5jaGFyQ29kZUF0KHIgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBmID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IHIsIGYgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IG0gJiYgNDIgPT09IHYgJiYgKDMzID09PSBkLmNoYXJDb2RlQXQodCArIDIpICYmICh1ICs9IGQuc3Vic3RyaW5nKHQsIHIgKyAxKSksIGggPSBcIlwiLCBmID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoMCA9PT0gZikge1xuICAgICAgICAgICAgaWYgKDAgPT09IHogKyBlICsgYSArIHAgJiYgMTA3ICE9PSBrICYmIDU5ICE9PSBtKSBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgY2FzZSAxMjY6XG4gICAgICAgICAgICAgIGNhc2UgNjI6XG4gICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IEMpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAodikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgaCArPSBcIlxceDAwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBoID0gXCJcXHgwMFwiICsgaCArICg0NCA9PT0gbSA/IFwiXCIgOiBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugc3dpdGNoIChtKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICBDID0gKyt4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgICAgICAgMCA9PT0gKEMgPSAtLXgpICYmIChxID0gMSwgaCArPSBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAwID09PSBDICYmIChxID0gMSwgaCArPSBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZyArPSBoO1xuICAgICAgICAgICAgMzIgIT09IG0gJiYgOSAhPT0gbSAmJiAoQiA9IG0pO1xuICAgICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBBID0gdjtcbiAgICAgIHYgPSBtO1xuICAgICAgcisrO1xuICAgIH1cblxuICAgIHQgPSB1Lmxlbmd0aDtcbiAgICAwIDwgWCAmJiAwID09PSB0ICYmIDAgPT09IFMubGVuZ3RoICYmIDAgPT09IGNbMF0ubGVuZ3RoID09PSAhMSAmJiAoMTA5ICE9PSBrIHx8IDEgPT09IGMubGVuZ3RoICYmICgwIDwgeiA/IEsgOiBSKSA9PT0gY1swXSkgJiYgKHQgPSBjLmpvaW4oXCIsXCIpLmxlbmd0aCArIDIpO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICBpZiAoMCA9PT0geiAmJiAxMDcgIT09IGspIHtcbiAgICAgICAgZCA9IDA7XG4gICAgICAgIGEgPSBjLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGYgPSBBcnJheShhKTsgZCA8IGE7ICsrZCkge1xuICAgICAgICAgIHYgPSBjW2RdLnNwbGl0KHVhKTtcbiAgICAgICAgICBBID0gXCJcIjtcbiAgICAgICAgICBCID0gMDtcblxuICAgICAgICAgIGZvciAoRCA9IHYubGVuZ3RoOyBCIDwgRDsgKytCKSB7XG4gICAgICAgICAgICBpZiAoISgwID09PSAoeCA9IChlID0gdltCXSkubGVuZ3RoKSAmJiAxIDwgRCkpIHtcbiAgICAgICAgICAgICAgciA9IEEuY2hhckNvZGVBdChBLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICBMID0gZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICBuID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKDAgIT09IEIpIHN3aXRjaCAocikge1xuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgY2FzZSAxMjY6XG4gICAgICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIG4gPSBcIiBcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHN3aXRjaCAoTCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICBlID0gbiArIEs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNjpcbiAgICAgICAgICAgICAgICBjYXNlIDYyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBlID0gbiArIGUgKyBLO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZS5jaGFyQ29kZUF0KDEpICsgMyAqIGUuY2hhckNvZGVBdCgyKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDUzMDpcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IFkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBuICsgZS5zdWJzdHJpbmcoOCwgeCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPiBCIHx8IDEgPiB2W0IgLSAxXS5sZW5ndGgpIGUgPSBuICsgSyArIGU7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgIG4gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGUgPSAxIDwgeCAmJiAwIDwgZS5pbmRleE9mKFwiOlwiKSA/IG4gKyBlLnJlcGxhY2UodmEsIFwiJDFcIiArIEsgKyBcIiQyXCIpIDogbiArIGUgKyBLO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgQSArPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZbZF0gPSBBLnJlcGxhY2UoUCwgXCJcIikudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYyA9IGY7XG4gICAgICB9XG5cbiAgICAgIGggPSBjO1xuICAgICAgaWYgKDAgPCBFICYmIChIID0gTygyLCB1LCBoLCBiLCBJLCB5LCB0LCBrLCBsKSwgdm9pZCAwICE9PSBIICYmIDAgPT09ICh1ID0gSCkubGVuZ3RoKSkgcmV0dXJuIE0gKyB1ICsgUztcbiAgICAgIHUgPSBoLmpvaW4oXCIsXCIpICsgXCJ7XCIgKyB1ICsgXCJ9XCI7XG5cbiAgICAgIGlmICgwICE9PSB3ICogSikge1xuICAgICAgICAyICE9PSB3IHx8IFUodSwgMikgfHwgKEogPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEopIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHUgPSB1LnJlcGxhY2Uod2EsIFwiOi1tb3otJDFcIikgKyB1O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHUgPSB1LnJlcGxhY2UoWiwgXCI6Oi13ZWJraXQtaW5wdXQtJDFcIikgKyB1LnJlcGxhY2UoWiwgXCI6Oi1tb3otJDFcIikgKyB1LnJlcGxhY2UoWiwgXCI6LW1zLWlucHV0LSQxXCIpICsgdTtcbiAgICAgICAgfVxuXG4gICAgICAgIEogPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBNICsgdSArIFM7XG4gIH1cblxuICBmdW5jdGlvbiBpYShiLCBjLCBkKSB7XG4gICAgdmFyIGsgPSBjLnRyaW0oKS5zcGxpdCh4YSk7XG4gICAgYyA9IGs7XG4gICAgdmFyIGwgPSBrLmxlbmd0aCxcbiAgICAgICAgYSA9IGIubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChhKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBmID0gMDtcblxuICAgICAgICBmb3IgKGIgPSAwID09PSBhID8gXCJcIiA6IGJbMF0gKyBcIiBcIjsgZiA8IGw7ICsrZikge1xuICAgICAgICAgIGNbZl0gPSBtYShiLCBjW2ZdLCBkLCBhKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIG4gPSBmID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgZiA8IGw7ICsrZikge1xuICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgYTsgKytlKSB7XG4gICAgICAgICAgICBjW24rK10gPSBtYShiW2VdICsgXCIgXCIsIGtbZl0sIGQsIGEpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gbWEoYiwgYywgZCwgaykge1xuICAgIHZhciBsID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gbCAmJiAobCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChsKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICBzd2l0Y2ggKHogKyBrKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICgwID09PSBiLnRyaW0oKS5sZW5ndGgpIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjLnJlcGxhY2UoTSwgXCIkMVwiICsgYi50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHN3aXRjaCAoYy5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICBpZiAoMCA8IFkgJiYgMCA8IHopIHJldHVybiBjLnJlcGxhY2UoeWEsIFwiJDFcIikucmVwbGFjZShNLCBcIiQxXCIgKyBSKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBiLnRyaW0oKSArIGM7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCBkICogeiAmJiAwIDwgYy5pbmRleE9mKFwiXFxmXCIpKSByZXR1cm4gYy5yZXBsYWNlKE0sICg1OCA9PT0gYi5jaGFyQ29kZUF0KDApID8gXCJcIiA6IFwiJDFcIikgKyBiLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGIgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gamEoYiwgYywgZCwgaykge1xuICAgIHZhciBsID0gMCxcbiAgICAgICAgYSA9IGIgKyBcIjtcIjtcbiAgICBjID0gMiAqIGMgKyAzICogZCArIDQgKiBrO1xuXG4gICAgaWYgKDk0NCA9PT0gYykge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgICAgYiA9IGEuaW5kZXhPZihcIjpcIiwgOSkgKyAxO1xuICAgICAgZCA9IGEuc3Vic3RyaW5nKDAsIGIpLnRyaW0oKTtcbiAgICAgIGsgPSBhLnN1YnN0cmluZyhiLCBsIC0gMSkudHJpbSgpO1xuXG4gICAgICBzd2l0Y2ggKGEuY2hhckNvZGVBdCg5KSAqIFEpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgaWYgKDExMCAhPT0gYS5jaGFyQ29kZUF0KDEwKSkgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmb3IgKGEgPSBrLnNwbGl0KChrID0gXCJcIiwgemEpKSwgYiA9IGMgPSAwLCBsID0gYS5sZW5ndGg7IGMgPCBsOyBiID0gMCwgKytjKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBmID0gYVtjXSwgbiA9IGYuc3BsaXQoQWEpOyBmID0gbltiXTspIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgIGlmICgxID09PSBRICYmICg2NCA8IGUgJiYgOTAgPiBlIHx8IDk2IDwgZSAmJiAxMjMgPiBlIHx8IDk1ID09PSBlIHx8IDQ1ID09PSBlICYmIDQ1ICE9PSBmLmNoYXJDb2RlQXQoMSkpKSBzd2l0Y2ggKGlzTmFOKHBhcnNlRmxvYXQoZikpICsgKC0xICE9PSBmLmluZGV4T2YoXCIoXCIpKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5maW5pdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFsdGVybmF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFja3dhcmRzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJydW5uaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvcndhcmRzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib3RoXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5lYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2UtaW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2Utb3V0XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlYXNlLWluLW91dFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicGF1c2VkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXZlcnNlXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbHRlcm5hdGUtcmV2ZXJzZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5oZXJpdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5pdGlhbFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0ZXAtc3RhcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0ZXAtZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBmICs9IFQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuW2IrK10gPSBmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrICs9ICgwID09PSBjID8gXCJcIiA6IFwiLFwiKSArIG4uam9pbihcIiBcIik7XG4gICAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGsgPSBkICsgayArIFwiO1wiO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBVKGssIDEpID8gXCItd2Via2l0LVwiICsgayArIGsgOiBrO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIVUoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChjKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA0NSA9PT0gYS5jaGFyQ29kZUF0KDkpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbW96LVwiICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1vei1cIiArIGEgKyBcIi1tcy1cIiArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgcmV0dXJuIDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkgPyBcIi13ZWJraXQtXCIgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtYm94LVwiICsgYS5yZXBsYWNlKFwiLWdyb3dcIiwgXCJcIikgKyBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtXCIgKyBhLnJlcGxhY2UoXCJncm93XCIsIFwicG9zaXRpdmVcIikgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYS5yZXBsYWNlKFwic2hyaW5rXCIsIFwibmVnYXRpdmVcIikgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtXCIgKyBhLnJlcGxhY2UoXCJiYXNpc1wiLCBcInByZWZlcnJlZC1zaXplXCIpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLWZsZXgtXCIgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoXCI6XCIsIDE1KSkucmVwbGFjZShcImZsZXgtXCIsIFwiXCIpLnJlcGxhY2UoXCJzcGFjZS1iZXR3ZWVuXCIsIFwianVzdGlmeVwiKTtcbiAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC1ib3gtcGFja1wiICsgYiArIFwiLXdlYmtpdC1cIiArIGEgKyBcIi1tcy1mbGV4LXBhY2tcIiArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBCYS50ZXN0KGEpID8gYS5yZXBsYWNlKG5hLCBcIjotd2Via2l0LVwiKSArIGEucmVwbGFjZShuYSwgXCI6LW1vei1cIikgKyBhIDogYTtcblxuICAgICAgY2FzZSAxRTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBsID0gYi5pbmRleE9mKFwiLVwiKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoYWEsIFwidGJcIik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShhYSwgXCJ0Yi1ybFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKGFhLCBcImxyXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoXCJzdGlja3lcIiwgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgbCA9IChhID0gYikubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChsKSA/IGEuc3Vic3RyaW5nKDAsIGwpIDogYSkuc3Vic3RyaW5nKGIuaW5kZXhPZihcIjpcIiwgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChjID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCBcIi13ZWJraXQtXCIgKyBiKSArIFwiO1wiICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsIFwiLXdlYmtpdC1cIiArICgxMDIgPCBjID8gXCJpbmxpbmUtXCIgOiBcIlwiKSArIFwiYm94XCIpICsgXCI7XCIgKyBhLnJlcGxhY2UoYiwgXCItd2Via2l0LVwiICsgYikgKyBcIjtcIiArIGEucmVwbGFjZShiLCBcIi1tcy1cIiArIGIgKyBcImJveFwiKSArIFwiO1wiICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgXCI7XCI7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKFwiLWl0ZW1zXCIsIFwiXCIpLCBcIi13ZWJraXQtXCIgKyBhICsgXCItd2Via2l0LWJveC1cIiArIGIgKyBcIi1tcy1mbGV4LVwiICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtZmxleC1pdGVtLVwiICsgYS5yZXBsYWNlKENhLCBcIlwiKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC1cIiArIGEgKyBcIi1tcy1mbGV4LWxpbmUtcGFja1wiICsgYS5yZXBsYWNlKFwiYWxpZ24tY29udGVudFwiLCBcIlwiKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoMCA8IChsID0gYS5pbmRleE9mKFwiLWNvbnRlbnRcIiwgOSkpICYmIDEwOSA9PT0gYS5jaGFyQ29kZUF0KGwgLSAzKSAmJiA0NSAhPT0gYS5jaGFyQ29kZUF0KGwgLSA0KSkgcmV0dXJuIGIgPSBhLnN1YnN0cmluZyhsIC0gMyksIFwid2lkdGg6LXdlYmtpdC1cIiArIGIgKyBcIndpZHRoOi1tb3otXCIgKyBiICsgXCJ3aWR0aDpcIiArIGI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSBcIi13ZWJraXQtXCIgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gXCItbXMtXCIgKyBhIDogXCJcIikgKyBhLCAyMTEgPT09IGQgKyBrICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKFwidHJhbnNmb3JtXCIsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZihcIjtcIiwgMjcpICsgMSkucmVwbGFjZShEYSwgXCIkMS13ZWJraXQtJDJcIikgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gVShiLCBjKSB7XG4gICAgdmFyIGQgPSBiLmluZGV4T2YoMSA9PT0gYyA/IFwiOlwiIDogXCJ7XCIpLFxuICAgICAgICBrID0gYi5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGQgOiAxMCk7XG4gICAgZCA9IGIuc3Vic3RyaW5nKGQgKyAxLCBiLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBiYSgyICE9PSBjID8gayA6IGsucmVwbGFjZShFYSwgXCIkMVwiKSwgZCwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBzYShiLCBjKSB7XG4gICAgdmFyIGQgPSBqYShjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZCAhPT0gYyArIFwiO1wiID8gZC5yZXBsYWNlKEZhLCBcIiBvciAoJDEpXCIpLnN1YnN0cmluZyg0KSA6IFwiKFwiICsgYyArIFwiKVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gTyhiLCBjLCBkLCBrLCBsLCBhLCBmLCBuLCBlKSB7XG4gICAgZm9yICh2YXIgaCA9IDAsIHEgPSBjLCBtOyBoIDwgRTsgKytoKSB7XG4gICAgICBzd2l0Y2ggKG0gPSBjYVtoXS5jYWxsKEYsIGIsIHEsIGQsIGssIGwsIGEsIGYsIG4sIGUpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBxID0gbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHEpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSAhMTpcbiAgICAgIGNhc2UgITA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICBjYXNlIGM6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYShiKSB7XG4gICAgc3dpdGNoIChiKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgRSA9IGNhLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzd2l0Y2ggKGIuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIGQgPSBiLmxlbmd0aDsgYyA8IGQ7ICsrYykge1xuICAgICAgICAgICAgICBkYShiW2NdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEZ1bmN0aW9uOlxuICAgICAgICAgICAgY2FbRSsrXSA9IGI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICAgIGxhID0gISFiIHwgMDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoYikge1xuICAgIGZvciAodmFyIGMgaW4gYikge1xuICAgICAgdmFyIGQgPSBiW2NdO1xuXG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSBcImtleWZyYW1lXCI6XG4gICAgICAgICAgUSA9IGQgfCAwO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJnbG9iYWxcIjpcbiAgICAgICAgICBZID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImNhc2NhZGVcIjpcbiAgICAgICAgICB6ID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImNvbXByZXNzXCI6XG4gICAgICAgICAgb2EgPSBkIHwgMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwic2VtaWNvbG9uXCI6XG4gICAgICAgICAga2EgPSBkIHwgMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwicHJlc2VydmVcIjpcbiAgICAgICAgICBYID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInByZWZpeFwiOlxuICAgICAgICAgIGJhID0gbnVsbCwgZCA/IFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgYmEgPSBkKSA6IHcgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEYoYiwgYykge1xuICAgIGlmICh2b2lkIDAgIT09IHRoaXMgJiYgdGhpcy5jb25zdHJ1Y3RvciA9PT0gRikgcmV0dXJuIGZhKGIpO1xuICAgIHZhciBkID0gYixcbiAgICAgICAgayA9IGQuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGsgJiYgKGsgPSAoZCA9IGQudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcbiAgICAwIDwgUSAmJiAoVCA9IGQucmVwbGFjZShHYSwgOTEgPT09IGsgPyBcIlwiIDogXCItXCIpKTtcbiAgICBrID0gMTtcbiAgICAxID09PSB6ID8gUiA9IGQgOiBLID0gZDtcbiAgICBkID0gW1JdO1xuXG4gICAgaWYgKDAgPCBFKSB7XG4gICAgICB2YXIgbCA9IE8oLTEsIGMsIGQsIGQsIEksIHksIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBsICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBsICYmIChjID0gbCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBWKFcsIGQsIGMsIDAsIDApO1xuICAgIDAgPCBFICYmIChsID0gTygtMiwgYSwgZCwgZCwgSSwgeSwgYS5sZW5ndGgsIDAsIDApLCB2b2lkIDAgIT09IGwgJiYgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIChhID0gbCkgJiYgKGsgPSAwKSk7XG4gICAgSyA9IFIgPSBUID0gXCJcIjtcbiAgICBKID0gMDtcbiAgICB5ID0gSSA9IDE7XG4gICAgcmV0dXJuIDAgPT09IG9hICogayA/IGEgOiBhLnJlcGxhY2UoUCwgXCJcIikucmVwbGFjZShIYSwgXCJcIikucmVwbGFjZShJYSwgXCIkMVwiKS5yZXBsYWNlKEphLCBcIiQxXCIpLnJlcGxhY2UoS2EsIFwiIFwiKTtcbiAgfVxuXG4gIHZhciBxYSA9IC9eXFwwKy9nLFxuICAgICAgUCA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgbmEgPSAvOiAqL2csXG4gICAgICBCYSA9IC96b298Z3JhLyxcbiAgICAgIERhID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgemEgPSAvLCtcXHMqKD8hW14oXSpbKV0pL2csXG4gICAgICBBYSA9IC8gK1xccyooPyFbXihdKlspXSkvZyxcbiAgICAgIHVhID0gLyAqW1xcMF0gKi9nLFxuICAgICAgeGEgPSAvLFxccis/L2csXG4gICAgICBNID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICB5YSA9IC86Z2xvYmFsXFwoKCg/OlteXFwoXFwpXFxbXFxdXSp8XFxbLipcXF18XFwoW15cXChcXCldKlxcKSkqKVxcKS9nLFxuICAgICAgR2EgPSAvXFxXKy9nLFxuICAgICAgdGEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBaID0gLzo6KHBsYWNlKS9nLFxuICAgICAgd2EgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBIYSA9IC9cXHMrKD89W3tcXF07PTo+XSkvZyxcbiAgICAgIElhID0gLyhbW309Oj5dKVxccysvZyxcbiAgICAgIEphID0gLyhcXHtbXntdKz8pOyg/PVxcfSkvZyxcbiAgICAgIEthID0gL1xcc3syLH0vZyxcbiAgICAgIHZhID0gLyhbXlxcKF0pKDorKSAqL2csXG4gICAgICBhYSA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIHJhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgRmEgPSAvKFteXSo/KTsvZyxcbiAgICAgIENhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBFYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIHkgPSAxLFxuICAgICAgSSA9IDEsXG4gICAgICBKID0gMCxcbiAgICAgIHogPSAxLFxuICAgICAgdyA9IDEsXG4gICAgICBZID0gMSxcbiAgICAgIG9hID0gMCxcbiAgICAgIGthID0gMCxcbiAgICAgIFggPSAwLFxuICAgICAgVyA9IFtdLFxuICAgICAgY2EgPSBbXSxcbiAgICAgIEUgPSAwLFxuICAgICAgYmEgPSBudWxsLFxuICAgICAgbGEgPSAwLFxuICAgICAgUSA9IDEsXG4gICAgICBUID0gXCJcIixcbiAgICAgIEsgPSBcIlwiLFxuICAgICAgUiA9IFwiXCI7XG4gIEYudXNlID0gZGE7XG4gIEYuc2V0ID0gZWE7XG4gIHZvaWQgMCAhPT0gaGEgJiYgZWEoaGEpO1xuICByZXR1cm4gRjtcbn07XG5cbi8vICB3ZWFrXG5mdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxudmFyIFNUWUxFU19LRVkgPSAnX19lbW90aW9uX3N0eWxlcyc7XG52YXIgVEFSR0VUX0tFWSA9ICdfX2Vtb3Rpb25fdGFyZ2V0JztcbnZhciB1bml0bGVzcyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lQ2xhbXA6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgbWVtb2l6ZSwgU1RZTEVTX0tFWSwgVEFSR0VUX0tFWSwgdW5pdGxlc3MsIGhhc2hTdHJpbmcsIHBhIGFzIFN0eWxpcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iLCJpbXBvcnQgeyBTVFlMRVNfS0VZLCBTdHlsaXMsIFRBUkdFVF9LRVksIGhhc2hTdHJpbmcsIG1lbW9pemUsIHVuaXRsZXNzIH0gZnJvbSAnZW1vdGlvbi11dGlscyc7XG5pbXBvcnQgc3R5bGlzUnVsZVNoZWV0IGZyb20gJ3N0eWxpcy1ydWxlLXNoZWV0JztcblxuLypcblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG4tICdwb2x5ZmlsbHMnIG9uIHNlcnZlciBzaWRlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ2dsYW1vci9saWIvc2hlZXQnXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KClcblxuc3R5bGVTaGVldC5pbmplY3QoKVxuLSAnaW5qZWN0cycgdGhlIHN0eWxlc2hlZXQgaW50byB0aGUgcGFnZSAob3IgaW50byBtZW1vcnkgaWYgb24gc2VydmVyKVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZVRhZygpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy50eXBlID0gJ3RleHQvY3NzJztcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgJycpO1xuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoKSB7XG4gICAgdGhpcy5pc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgICB0aGlzLmlzU3BlZWR5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJzsgLy8gdGhlIGJpZyBkcmF3YmFjayBoZXJlIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuXG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgaWYgKHRoaXMuaW5qZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWxyZWFkeSBpbmplY3RlZCEnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIpIHtcbiAgICAgIHRoaXMudGFnc1swXSA9IG1ha2VTdHlsZVRhZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXJ2ZXIgc2lkZSAncG9seWZpbGwnLiBqdXN0IGVub3VnaCBiZWhhdmlvciB0byBiZSB1c2VmdWwuXG4gICAgICB0aGlzLnNoZWV0ID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5pbmplY3RlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLnNwZWVkeSA9IGZ1bmN0aW9uIHNwZWVkeShib29sKSB7XG4gICAgaWYgKHRoaXMuY3RyICE9PSAwKSB7XG4gICAgICAvLyBjYW5ub3QgY2hhbmdlIHNwZWVkeSBtb2RlIGFmdGVyIGluc2VydGluZyBhbnkgcnVsZSB0byBzaGVldC4gRWl0aGVyIGNhbGwgc3BlZWR5KCR7Ym9vbH0pIGVhcmxpZXIgaW4geW91ciBhcHAsIG9yIGNhbGwgZmx1c2goKSBiZWZvcmUgc3BlZWR5KCR7Ym9vbH0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgY2hhbmdlIHNwZWVkeSBub3dcIik7XG4gICAgfVxuXG4gICAgdGhpcy5pc1NwZWVkeSA9ICEhYm9vbDtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUsIHNvdXJjZU1hcCkge1xuICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xuICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdpbGxlZ2FsIHJ1bGUnLCBydWxlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3RhZyA9IG1ha2VTdHlsZVRhZygpO1xuXG4gICAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuXG4gICAgICAgIF90YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSArIChzb3VyY2VNYXAgfHwgJycpKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3RyKys7XG5cbiAgICAgIGlmICh0aGlzLmN0ciAlIDY1MDAwID09PSAwKSB7XG4gICAgICAgIHRoaXMudGFncy5wdXNoKG1ha2VTdHlsZVRhZygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW5vdWdoICdzcGVjIGNvbXBsaWFuY2UnIHRvIGJlIGFibGUgdG8gZXh0cmFjdCB0aGUgcnVsZXMgbGF0ZXJcbiAgICAgIC8vIGluIG90aGVyIHdvcmRzLCBqdXN0IHRoZSBydWxlXG4gICAgICB0aGlzLnNoZWV0LnB1c2gocnVsZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xuICAgICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy50YWdzID0gW107XG4gICAgICB0aGlzLmN0ciA9IDA7IC8vIHRvZG8gLSBsb29rIGZvciByZW1uYW50cyBpbiBkb2N1bWVudC5zdHlsZVNoZWV0c1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzaW1wbGVyIG9uIHNlcnZlclxuICAgICAgdGhpcy5zaGVldCA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuaW5qZWN0ZWQgPSBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoKTsgLy8g8J+agFxuXG5zaGVldC5pbmplY3QoKTtcbnZhciBzdHlsaXNPcHRpb25zID0ge1xuICBrZXlmcmFtZTogZmFsc2Vcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0eWxpc09wdGlvbnMuY29tcHJlc3MgPSBmYWxzZTtcbn1cblxudmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoc3R5bGlzT3B0aW9ucyk7XG52YXIgZXh0ZXJuYWxTdHlsaXNQbHVnaW5zID0gW107XG52YXIgdXNlID0gc3R5bGlzLnVzZTtcblxuZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gIHNoZWV0Lmluc2VydChydWxlLCBjdXJyZW50U291cmNlTWFwKTtcbn1cblxudmFyIGluc2VydGlvblBsdWdpbiA9IHN0eWxpc1J1bGVTaGVldChpbnNlcnRSdWxlKTtcbnZhciB1c2VTdHlsaXNQbHVnaW4gPSBmdW5jdGlvbiB1c2VTdHlsaXNQbHVnaW4ocGx1Z2luKSB7XG4gIGV4dGVybmFsU3R5bGlzUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gIHVzZShudWxsKShleHRlcm5hbFN0eWxpc1BsdWdpbnMpKGluc2VydGlvblBsdWdpbik7XG59O1xudmFyIHJlZ2lzdGVyZWQgPSB7fTtcbnZhciBpbnNlcnRlZCA9IHt9O1xudmFyIGN1cnJlbnRTb3VyY2VNYXAgPSAnJztcbnN0eWxpcy51c2UoaW5zZXJ0aW9uUGx1Z2luKTtcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihpbnRlcnBvbGF0aW9uLCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gJyc7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICBpZiAoaW50ZXJwb2xhdGlvbltTVFlMRVNfS0VZXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb25bVEFSR0VUX0tFWV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyBpbnRlcnBvbGF0aW9uW1RBUkdFVF9LRVldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIHRoaXMgPT09IHVuZGVmaW5lZCA/IGludGVycG9sYXRpb24oKSA6IGludGVycG9sYXRpb24odGhpcy5tZXJnZWRQcm9wcywgdGhpcy5jb250ZXh0KSwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbik7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QuY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgICAgIHJldHVybiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID09PSBmYWxzZSAmJiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG4gIH1cbn1cblxudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gJyc7XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYga2V5LmNoYXJDb2RlQXQoMSkgIT09IDQ1ICYmIC8vIGN1c3RvbSBwcm9wZXJ0aWVzXG4gICFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIG9iamVjdFRvU3RyaW5nQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG9iaikge1xuICBpZiAob2JqZWN0VG9TdHJpbmdDYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZ0NhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbikge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uLCBmYWxzZSk7XG4gICAgfSwgdGhpcyk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkW29ialtrZXldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IGtleSArIFwie1wiICsgcmVnaXN0ZXJlZFtvYmpba2V5XV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIG9ialtrZXldKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgb2JqW2tleV0sIGZhbHNlKSArIFwifVwiO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgb2JqZWN0VG9TdHJpbmdDYWNoZS5zZXQob2JqLCBzdHJpbmcpO1xuICByZXR1cm4gc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0xhc3RDaGFyRG90KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmNoYXJDb2RlQXQoc3RyaW5nLmxlbmd0aCAtIDEpID09PSA0NjsgLy8gLlxufVxuXG52YXIgaGFzaDtcbnZhciBuYW1lO1xudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbl0rKVxccypbO1xcbl0vZztcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHN0cmluZ3MpIHtcbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgc3RyaW5ncywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlcyA9IHN0cmluZ3NbMF07XG4gIH1cblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGludGVycG9sYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVycG9sYXRpb24sIGkpIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIGludGVycG9sYXRpb24sIGlzTGFzdENoYXJEb3Qoc3R5bGVzKSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSA9PT0gdHJ1ZSAmJiBzdHJpbmdzW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpICsgMV07XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2UobGFiZWxQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gXCItXCIgKyBwMTtcbiAgICByZXR1cm4gJyc7XG4gIH0pO1xuICBoYXNoID0gaGFzaFN0cmluZyhzdHlsZXMgKyBpZGVudGlmaWVyTmFtZSk7XG4gIG5hbWUgPSBoYXNoICsgaWRlbnRpZmllck5hbWU7XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBzb3VyY2VNYXBSZWdFeCA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy87XG4gIHZhciBvbGRTdHlsaXMgPSBzdHlsaXM7XG5cbiAgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHNlbGVjdG9yLCBzdHlsZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlTWFwUmVnRXguZXhlYyhzdHlsZXMpO1xuICAgIGN1cnJlbnRTb3VyY2VNYXAgPSByZXN1bHQgPyByZXN1bHRbMF0gOiAnJztcbiAgICBvbGRTdHlsaXMoc2VsZWN0b3IsIHN0eWxlcyk7XG4gICAgY3VycmVudFNvdXJjZU1hcCA9ICcnO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdmFyIHNlbGVjdG9yID0gXCJjc3MtXCIgKyBuYW1lO1xuXG4gIGlmIChyZWdpc3RlcmVkW3NlbGVjdG9yXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVnaXN0ZXJlZFtzZWxlY3Rvcl0gPSBzdHlsZXM7XG4gIH1cblxuICBpZiAoaW5zZXJ0ZWRbaGFzaF0gPT09IHVuZGVmaW5lZCkge1xuICAgIHN0eWxpcyhcIi5cIiArIHNlbGVjdG9yLCBzdHlsZXMpO1xuICAgIGluc2VydGVkW2hhc2hdID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cbmZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB2YXIgYW5pbWF0aW9uID0gXCJhbmltYXRpb24tXCIgKyBuYW1lO1xuXG4gIGlmIChpbnNlcnRlZFtoYXNoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGlzKCcnLCBcIkBrZXlmcmFtZXMgXCIgKyBhbmltYXRpb24gKyBcIntcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICBpbnNlcnRlZFtoYXNoXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufVxuZnVuY3Rpb24gaW5qZWN0R2xvYmFsKCkge1xuICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGluc2VydGVkW2hhc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXMoJycsIHN0eWxlcyk7XG4gICAgaW5zZXJ0ZWRbaGFzaF0gPSB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBmb250RmFjZSgpIHtcbiAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGluc2VydGVkW2hhc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXMoJycsIFwiQGZvbnQtZmFjZXtcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICBpbnNlcnRlZFtoYXNoXSA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChjbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbmZ1bmN0aW9uIG1lcmdlKGNsYXNzTmFtZSwgc291cmNlTWFwKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMsIHNvdXJjZU1hcCk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzbmFtZXMoKSB7XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciBuZXh0ID0gY2xzICYmIGNscyArICcgJyB8fCBjbHM7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBjbHMgPSBuZXh0ICsgY2xhc3NuYW1lcyhhcmcoKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgY2xzID0gbmV4dCArIGNsYXNzbmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSkge1xuICAgICAgICAgICAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgY2xzICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgY2xzID0gbmV4dCArIGFyZztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59XG5cbmZ1bmN0aW9uIGN4KCkge1xuICByZXR1cm4gbWVyZ2UoY2xhc3NuYW1lcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xufVxuZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgaWRzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgc2hlZXQuZmx1c2goKTtcbiAgaW5zZXJ0ZWQgPSB7fTtcbiAgcmVnaXN0ZXJlZCA9IHt9O1xuICBzaGVldC5pbmplY3QoKTtcbn1cblxuZXhwb3J0IHsgc2hlZXQsIHVzZVN0eWxpc1BsdWdpbiwgcmVnaXN0ZXJlZCwgaW5zZXJ0ZWQsIGNzcywga2V5ZnJhbWVzLCBpbmplY3RHbG9iYWwsIGZvbnRGYWNlLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBtZXJnZSwgY3gsIGh5ZHJhdGUsIGZsdXNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyAobW9kdWxlWydleHBvcnRzJ10gPSBmYWN0b3J5KCkpIDpcblx0XHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10gPyBkZWZpbmUoZmFjdG9yeSgpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXNSdWxlU2hlZXQnXSA9IGZhY3RvcnkoKSlcbn0oZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0J1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5zZXJ0UnVsZSkge1xuXHRcdHZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nXG5cdFx0dmFyIG5lZWRsZSA9IGRlbGltaXRlcisnfSdcblxuXHRcdGZ1bmN0aW9uIHRvU2hlZXQgKGJsb2NrKSB7XG5cdFx0XHRpZiAoYmxvY2spXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aW5zZXJ0UnVsZShibG9jayArICd9Jylcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0IChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBhdCwgZGVwdGgpIHtcblx0XHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0XHQvLyBwcm9wZXJ0eVxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gQGltcG9ydFxuXHRcdFx0XHRcdGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KVxuXHRcdFx0XHRcdFx0aW5zZXJ0UnVsZShjb250ZW50KVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIHNlbGVjdG9yXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAoYXQgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIGF0LXJ1bGVcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHN3aXRjaCAoYXQpIHtcblx0XHRcdFx0XHRcdC8vIEBmb250LWZhY2UsIEBwYWdlXG5cdFx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdGNhc2UgMTEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShzZWxlY3RvcnNbMF0rY29udGVudCksICcnXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAtMjpcblx0XHRcdFx0XHRjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkpXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5ob2lzdE5vblJlYWN0U3RhdGljcyA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIHZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgICAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgICAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICAgICAgbWl4aW5zOiB0cnVlLFxuICAgICAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgICAgIHR5cGU6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICBsZW5ndGg6IHRydWUsXG4gICAgICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICAgICAgY2FsbGVyOiB0cnVlLFxuICAgICAgICBjYWxsZWU6IHRydWUsXG4gICAgICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICAgICAgYXJpdHk6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIHZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICB2YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfTtcbn0pKSk7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIi8qIVxuICogaXMtcGxhaW4tb2JqZWN0IDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pcy1wbGFpbi1vYmplY3Q+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnaXNvYmplY3QnKTtcblxuZnVuY3Rpb24gaXNPYmplY3RPYmplY3Qobykge1xuICByZXR1cm4gaXNPYmplY3QobykgPT09IHRydWVcbiAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qobykge1xuICB2YXIgY3Rvcixwcm90O1xuXG4gIGlmIChpc09iamVjdE9iamVjdChvKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgY29uc3RydWN0b3JcbiAgY3RvciA9IG8uY29uc3RydWN0b3I7XG4gIGlmICh0eXBlb2YgY3RvciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBwcm90b3R5cGVcbiAgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuICBpZiAoaXNPYmplY3RPYmplY3QocHJvdCkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgY29uc3RydWN0b3IgZG9lcyBub3QgaGF2ZSBhbiBPYmplY3Qtc3BlY2lmaWMgbWV0aG9kXG4gIGlmIChwcm90Lmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJykgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gTW9zdCBsaWtlbHkgYSBwbGFpbiBPYmplY3RcbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLyohXG4gKiBpc29iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXNvYmplY3Q+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodmFsKSA9PT0gZmFsc2U7XG59O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksaGE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YmE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtrYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBtYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbWEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBuYT1udWxsLG9hPXt9O1xuZnVuY3Rpb24gcGEoKXtpZihuYSlmb3IodmFyIGEgaW4gb2Epe3ZhciBiPW9hW2FdLGM9bmEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcWFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtyYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7cmFbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmc2Eoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHNhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHNhKGEsYixjKXt0YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3RhW2FdPWI7dWFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcWE9W10scmE9e30sdGE9e30sdWE9e307ZnVuY3Rpb24gdmEoYSl7bmE/RChcIjEwMVwiKTp2b2lkIDA7bmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cGEoKX1mdW5jdGlvbiB3YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtvYS5oYXNPd25Qcm9wZXJ0eShjKSYmb2FbY109PT1kfHwob2FbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxvYVtjXT1kLGI9ITApfWImJnBhKCl9XG52YXIgeGE9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpxYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cmEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dGEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp1YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp2YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6d2F9KSxDYT1udWxsLERhPW51bGwsRWE9bnVsbDtmdW5jdGlvbiBGYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUVhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBHYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSGEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIElhPW51bGw7XG5mdW5jdGlvbiBKYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylGYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkZhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEthKGEpe3JldHVybiBKYShhLCEwKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gSmEoYSwhMSl9dmFyIE1hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOnZhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp3YX07XG5mdW5jdGlvbiBOYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPUNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBPYShhLGIpe251bGwhPT1hJiYoSWE9R2EoSWEsYSkpO2E9SWE7SWE9bnVsbDthJiYoYj9IYShhLEthKTpIYShhLExhKSxJYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFBhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHFhLmxlbmd0aDtmKyspe3ZhciBoPXFhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUdhKGUsaCkpfU9hKGUsITEpfXZhciBRYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TWEsZ2V0TGlzdGVuZXI6TmEscnVuRXZlbnRzSW5CYXRjaDpPYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlBhfSksUmE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1JhLFNhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrUmE7XG5mdW5jdGlvbiBUYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFVhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbU2FdfHxudWxsfXZhciBhYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VGEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpVYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlZhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1NhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gYmIoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGNiKGEsYixjKXtpZihiPU5hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmYmIoYS5fdGFyZ2V0SW5zdCxjYixhKX1cbmZ1bmN0aW9uIGViKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtiYihiLGNiLGEpfX1mdW5jdGlvbiBmYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1OYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZmIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGhiKGEpe0hhKGEsZGIpfVxuZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZmIoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZmIoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgamI9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpoYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtIYShhLGViKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0hhKGEsZ2IpfX0pLGtiPW51bGw7ZnVuY3Rpb24gbGIoKXsha2ImJm0uY2FuVXNlRE9NJiYoa2I9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4ga2J9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBtYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cGI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoTik7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxFYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxLYj0hMTtcbmZ1bmN0aW9uIExiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBNYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTWIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0tiPSEwO3JldHVybiBBYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmS2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUGIoYSxiKXtpZihOYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhd2ImJkxiKGEsYik/KGE9bWIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsTmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFFiPXtldmVudFR5cGVzOkViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1FYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgTmI/TGIoYSxjKSYmKGU9RWIuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1FYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKE5ifHxlIT09RWIuY29tcG9zaXRpb25TdGFydD9lPT09RWIuY29tcG9zaXRpb25FbmQmJk5iJiYoZj1tYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1uYigpLE5iPSEwKSksZT10Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU1iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxoYihlKSxmPWUpOmY9bnVsbDsoYT15Yj9PYihhLGMpOlBiKGEsYykpPyhiPXViLmdldFBvb2xlZChFYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaGIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sUmI9bnVsbCxTYj1udWxsLFRiPW51bGw7ZnVuY3Rpb24gVWIoYSl7aWYoYT1EYShhKSl7UmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPUNhKGEuc3RhdGVOb2RlKTtSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIFZiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1JiPWF9fTtmdW5jdGlvbiBXYihhKXtTYj9UYj9UYi5wdXNoKGEpOlRiPVthXTpTYj1hfVxuZnVuY3Rpb24gWGIoKXtyZXR1cm4gbnVsbCE9PVNifHxudWxsIT09VGJ9ZnVuY3Rpb24gWWIoKXtpZihTYil7dmFyIGE9U2IsYj1UYjtUYj1TYj1udWxsO1ViKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylVYihiW2FdKX19dmFyIFpiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpWYixlbnF1ZXVlU3RhdGVSZXN0b3JlOldiLG5lZWRzU3RhdGVSZXN0b3JlOlhiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOllifSk7ZnVuY3Rpb24gJGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBhYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBiYygpe312YXIgY2M9ITE7ZnVuY3Rpb24gZGMoYSxiKXtpZihjYylyZXR1cm4gYShiKTtjYz0hMDt0cnl7cmV0dXJuICRiKGEsYil9ZmluYWxseXtjYz0hMSxYYigpJiYoYmMoKSxZYigpKX19XG52YXIgZWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZmMoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFlY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gZ2MoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGhjKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaWMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGpjKGEpe3ZhciBiPWljKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBrYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9amMoYSkpfWZ1bmN0aW9uIGxjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1pYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG1jPWJhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG5jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbndjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHljKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14YyYmYVt4Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6YyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSByYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIG9jOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBBYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXpjKGEpO3ZhciBmPW51bGw7YyYmKGY9emMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQmM9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLENjPXt9LERjPXt9O2Z1bmN0aW9uIEVjKGEpe2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKENjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEJjLnRlc3QoYSkpcmV0dXJuIERjW2FdPSEwO0NjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gRmMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8RmMoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIEhjPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBTYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxcblNjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVGMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoR2MoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0VjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9V2MobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBYYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBZYyhhLGIpe1hjKGEsYik7dmFyIGM9V2MoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9aYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZaYyhhLGIudHlwZSxXYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uICRjKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gWmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gV2MoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBhZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBiZChhLGIsYyl7YT1OLmdldFBvb2xlZChhZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1diKGMpO2hiKGEpO3JldHVybiBhfXZhciBjZD1udWxsLGRkPW51bGw7ZnVuY3Rpb24gZWQoYSl7T2EoYSwhMSl9XG5mdW5jdGlvbiBmZChhKXt2YXIgYj1VYShhKTtpZihsYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBnZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBoZD0hMTttLmNhblVzZURPTSYmKGhkPWhjKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGlkKCl7Y2QmJihjZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCksZGQ9Y2Q9bnVsbCl9ZnVuY3Rpb24gamQoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmZkKGRkKSYmKGE9YmQoZGQsYSxnYyhhKSksZGMoZWQsYSkpfWZ1bmN0aW9uIGtkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhpZCgpLGNkPWIsZGQ9YyxjZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCkpOlwidG9wQmx1clwiPT09YSYmaWQoKX1cbmZ1bmN0aW9uIGxkKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGZkKGRkKX1mdW5jdGlvbiBtZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGZkKGIpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGZkKGIpfVxudmFyIG9kPXtldmVudFR5cGVzOmFkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1VhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1nZDpmYyhlKT9oZD9mPW5kOihmPWxkLGg9a2QpOihnPWUubm9kZU5hbWUsIWd8fFwiaW5wdXRcIiE9PWcudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChmPW1kKSk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gYmQoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJlpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHBkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHFkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiByZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXFkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gc2QoKXtyZXR1cm4gcmR9XG52YXIgdGQ9cGQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnNkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHVkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHZkPXtldmVudFR5cGVzOnVkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1RhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VWEoYSk7ZT1udWxsPT1iP2U6VWEoYik7dmFyIGg9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7aWIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB3ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHhkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXdkKGEpOiExfWZ1bmN0aW9uIHlkKGEpezIhPT13ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIHpkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXdkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4geWQoZSksYTtpZihoPT09ZClyZXR1cm4geWQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBBZChhKXthPXpkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmQoYSl7YT16ZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBDZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRGQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxFZD1wZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgR2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LEhkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxJZD1wZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9R2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9RmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0hkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9GZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9GZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEpkPXRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxLZD1wZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZH0pLExkPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE1kPXRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksTmQ9e30sT2Q9e307ZnVuY3Rpb24gUGQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O05kW2FdPWI7T2RbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtQZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UGQoYSwhMSl9KTtcbnZhciBRZD17ZXZlbnRUeXBlczpOZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1PZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9T2RbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1GZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SWQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUVkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG50ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPUNkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1MZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1wZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RGQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2hiKGIpO3JldHVybiBifX0sUmQ9UWQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFNkPVtdO2Z1bmN0aW9uIFRkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVRhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUGEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGdjKGEubmF0aXZlRXZlbnQpKX12YXIgVWQ9ITA7ZnVuY3Rpb24gVmQoYSl7VWQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBZZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBXZChhLGIpe2FjKFhkLGEsYil9XG5mdW5jdGlvbiBYZChhLGIpe2lmKFVkKXt2YXIgYz1nYyhiKTtjPVRhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09d2QoYykmJihjPW51bGwpO2lmKFNkLmxlbmd0aCl7dmFyIGQ9U2QucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZGMoVGQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5TZC5sZW5ndGgmJlNkLnB1c2goYSl9fX1cbnZhciBaZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVWR9LHNldEVuYWJsZWQ6VmQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFVkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WWQsZGlzcGF0Y2hFdmVudDpYZH0pO2Z1bmN0aW9uICRkKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYWU9e2FuaW1hdGlvbmVuZDokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OiRkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOiRkKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sYmU9e30sY2U9e307bS5jYW5Vc2VET00mJihjZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBhZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBhZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZGUoYSl7aWYoYmVbYV0pcmV0dXJuIGJlW2FdO2lmKCFhZVthXSlyZXR1cm4gYTt2YXIgYj1hZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBjZSlyZXR1cm4gYmVbYV09YltjXTtyZXR1cm4gYX1cbnZhciBlZT17dG9wQW5pbWF0aW9uRW5kOmRlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpkZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDpkZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmRlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGZlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxnZT17fSxoZT0wLGllPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBqZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxpZSl8fChhW2llXT1oZSsrLGdlW2FbaWVdXT17fSk7cmV0dXJuIGdlW2FbaWVdXX1mdW5jdGlvbiBrZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBsZShhLGIpe3ZhciBjPWtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWtlKGMpfX1mdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgbmU9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxvZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHBlPW51bGwscWU9bnVsbCxyZT1udWxsLHNlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZihzZXx8bnVsbD09cGV8fHBlIT09ZWEoKSlyZXR1cm4gbnVsbDt2YXIgYz1wZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZtZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHJlJiZmYShyZSxjKT9udWxsOihyZT1jLGE9Ti5nZXRQb29sZWQob2Uuc2VsZWN0LHFlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cGUsaGIoYSksYSl9XG52YXIgd2U9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9amUoZSk7Zj11YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1VhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZmMoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcGU9ZSxxZT1iLHJlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpyZT1xZT1wZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjpzZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiBzZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihuZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtNYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0NhPWFiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RGE9YWIuZ2V0SW5zdGFuY2VGcm9tTm9kZTtFYT1hYi5nZXROb2RlRnJvbUluc3RhbmNlO01hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOnZkLENoYW5nZUV2ZW50UGx1Z2luOm9kLFNlbGVjdEV2ZW50UGx1Z2luOndlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UWJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24geWUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSByYzpyZXR1cm4gQWUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB2YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSBzYzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBvYzpmPTc7YnJlYWs7Y2FzZSBwYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHRjOmY9MTM7YnJlYWs7Y2FzZSB1YzpmPTEyO2JyZWFrO2Nhc2Ugd2M6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEFlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQmUoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIERlPW51bGwsRWU9bnVsbDtcbmZ1bmN0aW9uIEZlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gR2UoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RGU9RmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0VlPUZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSGUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIERlJiZEZShhKX1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBKZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIEtlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTGU9dm9pZCAwLE1lPXZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe0xlPU1lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUplKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUplKG51bGwpKSk6YT1udWxsO0xlPWM7TWU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIE9lKGEsYil7TmUoYSk7YT1MZTt2YXIgYz1NZTtudWxsPT09Yz9LZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KEtlKGEsYiksS2UoYyxiKSk6KEtlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFBlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUWUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UGUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UGUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBSZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFmYShiLGMpfHwhZmEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQseT1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eGQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7T2UoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT15KGEpLGY9ZT9sKGEsZCk6amE7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWphO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UWUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMseT1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx5IT09cSkmJmcoYSxuLHIscSk7eT1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9RZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6eTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYSxuLHIsYikpO251bGwhPT10JiZ2b2lkIDAhPT10JiYoYj1udWxsPT09Ynx8dm9pZCAwPT09Yj90OkEoe30sYix0KSk7aWYoIShoIT09cnx8eSE9PWJ8fFxuQigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix5LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksXG5kKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx0PXAoYik7dD1sKGIsdCk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXJ8fHEhPT10KSYmZyhiLHgscix0KTtxPWIubWVtb2l6ZWRTdGF0ZTtjPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP1xuUWUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGIseCxyLGMpKTtudWxsIT09dSYmdm9pZCAwIT09dSYmKGM9bnVsbD09PWN8fHZvaWQgMD09PWM/dTpBKHt9LGMsdSkpO2lmKCEoaCE9PXJ8fHEhPT1jfHxCKCl8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHU9ZihiLGgscixxLGMsdCkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx0KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yMDQ4KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8XG4oYi5lZmZlY3RUYWd8PTIwNDgpLGQoYixyKSxlKGIsYykpO3gucHJvcHM9cjt4LnN0YXRlPWM7eC5jb250ZXh0PXQ7cmV0dXJuIHV9fX12YXIgVGU9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFVlKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWphP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/RChcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkQoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFZlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBXZShhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXllKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVVlKGEsYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPXplKGMsYS5tb2RlLGQpO2QucmVmPVVlKGEsYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUFlKGMsYS5tb2RlLGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9QmUoXCJcIitiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBuYzpyZXR1cm4gYz16ZShiLGEubW9kZSxjKSxjLnJlZj1VZShhLG51bGwsYiksY1tcInJldHVyblwiXT1hLGM7Y2FzZSBxYzpyZXR1cm4gYj1DZShiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihUZShiKXx8eWMoYikpcmV0dXJuIGI9QWUoYixcbmEubW9kZSxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1ZlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBuYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXJjP2woYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBxYzpyZXR1cm4gYy5rZXk9PT1lP3YoYSxiLGMsZCk6bnVsbH1pZihUZShjKXx8eWMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bChhLGIsYyxkLG51bGwpO1ZlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIG5jOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1yYz9sKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBxYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsdihiLGEsZCxlKX1pZihUZShkKXx8eWMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbChiLGEsZCxlLG51bGwpO1ZlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLGcsbCxoKXtmb3IodmFyIHI9bnVsbCxrPW51bGwscT1nLHQ9Zz0wLHU9bnVsbDtudWxsIT09cSYmdDxsLmxlbmd0aDt0Kyspe3EuaW5kZXg+dD8odT1xLHE9bnVsbCk6dT1xLnNpYmxpbmc7dmFyIG49eShlLHEsbFt0XSxoKTtpZihudWxsPT09bil7bnVsbD09PXEmJihxPXUpO2JyZWFrfWEmJnEmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKG4sZyx0KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1uO3E9dX1pZih0PT09bC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoO3Q8bC5sZW5ndGg7dCsrKWlmKHE9cChlLGxbdF0saCkpZz1mKHEsZyx0KSxudWxsPT09az9yPXE6ay5zaWJsaW5nPXEsaz1xO3JldHVybiByfWZvcihxPWQoZSxxKTt0PGwubGVuZ3RoO3QrKylpZih1PUIocSxlLHQsbFt0XSxoKSl7aWYoYSYmbnVsbCE9PXUuYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PXUua2V5P3Q6dS5rZXkpO2c9Zih1LGcsdCk7bnVsbD09PWs/cj11Omsuc2libGluZz11O2s9dX1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfWZ1bmN0aW9uIFEoZSxnLGwsaCl7dmFyIHI9eWMobCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHI/RChcIjE1MFwiKTp2b2lkIDA7bD1yLmNhbGwobCk7bnVsbD09bD9EKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIGs9XG5yPW51bGwscT1nLHQ9Zz0wLHU9bnVsbCxuPWwubmV4dCgpO251bGwhPT1xJiYhbi5kb25lO3QrKyxuPWwubmV4dCgpKXtxLmluZGV4PnQ/KHU9cSxxPW51bGwpOnU9cS5zaWJsaW5nO3ZhciBIPXkoZSxxLG4udmFsdWUsaCk7aWYobnVsbD09PUgpe3F8fChxPXUpO2JyZWFrfWEmJnEmJm51bGw9PT1ILmFsdGVybmF0ZSYmYihlLHEpO2c9ZihILGcsdCk7bnVsbD09PWs/cj1IOmsuc2libGluZz1IO2s9SDtxPXV9aWYobi5kb25lKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDshbi5kb25lO3QrKyxuPWwubmV4dCgpKW49cChlLG4udmFsdWUsaCksbnVsbCE9PW4mJihnPWYobixnLHQpLG51bGw9PT1rP3I9bjprLnNpYmxpbmc9bixrPW4pO3JldHVybiByfWZvcihxPWQoZSxxKTshbi5kb25lO3QrKyxuPWwubmV4dCgpKWlmKG49QihxLGUsdCxuLnZhbHVlLGgpLG51bGwhPT1uKXtpZihhJiZudWxsIT09bi5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09bi5rZXk/dDpuLmtleSk7XG5nPWYobixnLHQpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW59YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsZyl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09cmMmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIG5jOmE6e3ZhciBrPWYua2V5O2ZvcihsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspaWYoMTA9PT1sLnRhZz9mLnR5cGU9PT1yYzpsLnR5cGU9PT1mLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYudHlwZT09PXJjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxnKTtkLnJlZj1VZShhLGwsZik7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PVxucmM/KGQ9QWUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsZyxmLmtleSksZFtcInJldHVyblwiXT1hLGE9ZCk6KGc9emUoZixhLm1vZGUsZyksZy5yZWY9VWUoYSxkLGYpLGdbXCJyZXR1cm5cIl09YSxhPWcpfXJldHVybiBoKGEpO2Nhc2UgcWM6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGcpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPUNlKGYsYS5tb2RlLGcpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiZcbjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixnKSk6KGMoYSxkKSxkPUJlKGYsYS5tb2RlLGcpKSxkW1wicmV0dXJuXCJdPWEsYT1kLGgoYSk7aWYoVGUoZikpcmV0dXJuIHIoYSxkLGYsZyk7aWYoeWMoZikpcmV0dXJuIFEoYSxkLGYsZyk7bCYmVmUoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmc9YS50eXBlLEQoXCIxNTJcIixnLmRpc3BsYXlOYW1lfHxnLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBYZT1XZSghMCksWWU9V2UoITEpO1xuZnVuY3Rpb24gWmUoYSxiLGMsZCxlLGYsaCl7ZnVuY3Rpb24gZyhhLGIsYyl7ayhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBrKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWUoYixudWxsLGMsZCk6WGUoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gdihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe3YoYSxiKTtpZighYyYmIWUpcmV0dXJuIGQmJnooYiwhMSkscihhLGIpO2M9Yi5zdGF0ZU5vZGU7bWMuY3VycmVudD1iO3ZhciBnPWU/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2UmJihrKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7ayhhLGIsZyxmKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ6KGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHAoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7XG5iLnBlbmRpbmdDb250ZXh0P3UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdShhLGIuY29udGV4dCwhMSk7WShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2ZvcihudWxsIT09ZSYmKGVbXCJyZXR1cm5cIl09YSk7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgZz1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpJiYoZy5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkpZy5leHBpcmF0aW9uVGltZT1cbmQ7ZWxzZSBicmVhaztmPWZbXCJyZXR1cm5cIl19Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1lLmNoaWxkfWlmKG51bGwhPT1mKWZbXCJyZXR1cm5cIl09ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtmPWU7YnJlYWt9Zj1mW1wicmV0dXJuXCJdfWU9Zn19ZnVuY3Rpb24gQihhLGIsYyl7dmFyIGQ9Yi50eXBlLmNvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcztpZighcSgpJiZmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTt2YXIgbD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWw9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLFxucihhLGIpO2w9MH1lbHNle3ZhciB0PWYudmFsdWU7aWYodD09PWwmJigwIT09dHx8MS90PT09MS9sKXx8dCE9PXQmJmwhPT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTtsPTB9ZWxzZSBpZihsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyh0LGwpOjEwNzM3NDE4MjMsbHw9MCwwPT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYil9ZWxzZSB5KGIsZCxsLGMpfWIuc3RhdGVOb2RlPWw7RyhiKTtnKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9eWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtcbmIuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXllKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBRPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsbj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUseD1iLnB1c2hIb3N0Q29udGV4dCxZPWIucHVzaEhvc3RDb250YWluZXIsRz1kLnB1c2hQcm92aWRlcixSPWMuZ2V0TWFza2VkQ29udGV4dCxTPWMuZ2V0VW5tYXNrZWRDb250ZXh0LHE9Yy5oYXNDb250ZXh0Q2hhbmdlZCx0PWMucHVzaENvbnRleHRQcm92aWRlcix1PWMucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCx6PWMuaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixIPWUuZW50ZXJIeWRyYXRpb25TdGF0ZSxXYT1lLnJlc2V0SHlkcmF0aW9uU3RhdGUsQmI9ZS50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbmE9U2UoYyxmLGgsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciBKYz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxLYz1hLmNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsTGM9YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLENiPWEubW91bnRDbGFzc0luc3RhbmNlLE1jPWEucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLERiPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpwKGIpO2JyZWFrO2Nhc2UgMjp0KGIpO2JyZWFrO2Nhc2UgNDpZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpHKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0QoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxcbmU9Yi5wZW5kaW5nUHJvcHMsZj1TKGIpO2Y9UihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGU9S2MoYixkLGUsYi5tZW1vaXplZFN0YXRlKSxudWxsIT09ZSYmdm9pZCAwIT09ZSYmKGIubWVtb2l6ZWRTdGF0ZT1BKHt9LGIubWVtb2l6ZWRTdGF0ZSxlKSkpLGU9dChiKSxKYyhiLGQpLENiKGIsYyksYT1sKGEsYiwhMCxlLCExLGMpKTooYi50YWc9MSxnKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxxKCl8fFxuYi5tZW1vaXplZFByb3BzIT09Yz8oZD1TKGIpLGQ9UihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLGcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDI6ZT10KGIpO251bGw9PT1hP251bGw9PT1iLnN0YXRlTm9kZT8oTGMoYixiLnBlbmRpbmdQcm9wcyksQ2IoYixjKSxkPSEwKTpkPU1jKGIsYyk6ZD1EYihhLGIsYyk7Zj0hMTt2YXIgaD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1oJiZudWxsIT09aC5jYXB0dXJlZFZhbHVlcyYmKGY9ZD0hMCk7cmV0dXJuIGwoYSxiLGQsZSxmLGMpO2Nhc2UgMzphOmlmKHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kKXtmPWIubWVtb2l6ZWRTdGF0ZTtlPVFlKGEsYixkLG51bGwsbnVsbCxjKTtiLm1lbW9pemVkU3RhdGU9ZTtkPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzKWQ9bnVsbDtlbHNlIGlmKGY9PT1lKXtXYSgpO2E9cihhLGIpO2JyZWFrIGF9ZWxzZSBkPVxuZS5lbGVtZW50O2Y9Yi5zdGF0ZU5vZGU7KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmYuaHlkcmF0ZSYmSChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1ZZShiLG51bGwsZCxjKSk6KFdhKCksZyhhLGIsZCkpO2IubWVtb2l6ZWRTdGF0ZT1lO2E9Yi5jaGlsZH1lbHNlIFdhKCksYT1yKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e3goYik7bnVsbD09PWEmJkJiKGIpO2U9Yi50eXBlO2g9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighcSgpJiZoPT09ZCl7aWYoaD1iLm1vZGUmMSYmbihlLGQpKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZighaHx8MTA3Mzc0MTgyMyE9PWMpe2E9cihhLGIpO2JyZWFrIGF9fWg9ZC5jaGlsZHJlbjtRKGUsZCk/aD1udWxsOmYmJlEoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7dihhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmbihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPVxuMTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihnKGEsYixoKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkJiKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzpyZXR1cm4gZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWV8fChlPWIubWVtb2l6ZWRQcm9wcyksZD1lLmNoaWxkcmVuLGIuc3RhdGVOb2RlPW51bGw9PT1hP1llKGIsYi5zdGF0ZU5vZGUsZCxjKTpYZShiLGEuc3RhdGVOb2RlLGQsYyksYi5tZW1vaXplZFByb3BzPWUsYi5zdGF0ZU5vZGU7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gWShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPVhlKGIsbnVsbCxlLGMpOmcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1cbmUsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGM9Yi50eXBlLnJlbmRlcixjPWMoYi5wZW5kaW5nUHJvcHMsYi5yZWYpLGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDExOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHEoKXx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDEzOnJldHVybiBCKGEsYixjKTtjYXNlIDEyOmQ9Yi50eXBlO2Y9Yi5wZW5kaW5nUHJvcHM7dmFyIHU9Yi5tZW1vaXplZFByb3BzO2U9ZC5fY3VycmVudFZhbHVlO2g9ZC5fY2hhbmdlZEJpdHM7aWYocSgpfHwwIT09aHx8dSE9PWYpe2IubWVtb2l6ZWRQcm9wcz1cbmY7dT1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT11fHxudWxsPT09dSl1PTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9dTswIT09KGgmdSkmJnkoYixkLGgsYyk7Yz1mLmNoaWxkcmVuO2M9YyhlKTtnKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPXIoYSxiKTtyZXR1cm4gYTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGg9YS5jcmVhdGVJbnN0YW5jZSxnPWEuY3JlYXRlVGV4dEluc3RhbmNlLGs9YS5hcHBlbmRJbml0aWFsQ2hpbGQsdj1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGw9YS5wcmVwYXJlVXBkYXRlLHA9YS5wZXJzaXN0ZW5jZSx5PWIuZ2V0Um9vdEhvc3RDb250YWluZXIsQj1iLnBvcEhvc3RDb250ZXh0LHI9Yi5nZXRIb3N0Q29udGV4dCxRPWIucG9wSG9zdENvbnRhaW5lcixuPWMucG9wQ29udGV4dFByb3ZpZGVyLHg9Yy5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsWT1kLnBvcFByb3ZpZGVyLEc9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFI9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSxTPWUucG9wSHlkcmF0aW9uU3RhdGUscT12b2lkIDAsdD12b2lkIDAsdT12b2lkIDA7YS5tdXRhdGlvbj8ocT1mdW5jdGlvbigpe30sdD1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9XG5jKSYmZihiKX0sdT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmZihiKX0pOnA/RChcIjIzNVwiKTpEKFwiMjM2XCIpO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbihiKSxhPWIuc3RhdGVOb2RlLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZyY9LTY1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudERpZENhdGNoP2IuZWZmZWN0VGFnfD0yNTY6ZC5jYXB0dXJlZFZhbHVlcz1udWxsKSxudWxsO2Nhc2UgMzpRKGIpO3goYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpUyhiKSxiLmVmZmVjdFRhZyY9LTM7cShiKTthPWIudXBkYXRlUXVldWU7XG5udWxsIT09YSYmbnVsbCE9PWEuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZ3w9MjU2KTtyZXR1cm4gbnVsbDtjYXNlIDU6QihiKTtjPXkoKTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMsSD1iLnN0YXRlTm9kZSx6PXIoKTtIPWwoSCxlLHAsZCxjLHopO3QoYSxiLEgsZSxwLGQsYyx6KTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1yKCk7aWYoUyhiKSlHKGIsYyxhKSYmZihiKTtlbHNle3A9aChlLGQsYyxhLGIpO2E6Zm9yKHo9Yi5jaGlsZDtudWxsIT09ejspe2lmKDU9PT16LnRhZ3x8Nj09PXoudGFnKWsocCx6LnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ei50YWcmJm51bGwhPT16LmNoaWxkKXt6LmNoaWxkW1wicmV0dXJuXCJdPXo7ej16LmNoaWxkO2NvbnRpbnVlfWlmKHo9PT1iKWJyZWFrO1xuZm9yKDtudWxsPT09ei5zaWJsaW5nOyl7aWYobnVsbD09PXpbXCJyZXR1cm5cIl18fHpbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7ej16W1wicmV0dXJuXCJdfXouc2libGluZ1tcInJldHVyblwiXT16W1wicmV0dXJuXCJdO3o9ei5zaWJsaW5nfXYocCxlLGQsYyxhKSYmZihiKTtiLnN0YXRlTm9kZT1wfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl1KGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eSgpO2M9cigpO1MoYik/UihiKSYmZihiKTpiLnN0YXRlTm9kZT1nKGQsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzooZD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7ZT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1cbnA7KXtpZig1PT09cC50YWd8fDY9PT1wLnRhZ3x8ND09PXAudGFnKUQoXCIyNDdcIik7ZWxzZSBpZig5PT09cC50YWcpZS5wdXNoKHAucGVuZGluZ1Byb3BzLnZhbHVlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPWQuaGFuZGxlcjtkPXAoZC5wcm9wcyxlKTtiLmNoaWxkPVhlKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLGQsYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gUShiKSxxKGIpLG51bGw7XG5jYXNlIDEzOnJldHVybiBZKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6RChcIjE2N1wiKTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUpe3ZhciBmPWEucG9wSG9zdENvbnRhaW5lcixoPWEucG9wSG9zdENvbnRleHQsZz1iLnBvcENvbnRleHRQcm92aWRlcixrPWIucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHY9Yy5wb3BQcm92aWRlcjtyZXR1cm57dGhyb3dFeGNlcHRpb246ZnVuY3Rpb24oYSxiLGMpe2IuZWZmZWN0VGFnfD01MTI7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtiPXt2YWx1ZTpjLHNvdXJjZTpiLHN0YWNrOkFjKGIpfTtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzpOZShhKTthLnVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzPVtiXTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm47Y2FzZSAyOmlmKGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmIWUoYykpe05lKGEpO2M9YS51cGRhdGVRdWV1ZTt2YXIgZD1jLmNhcHR1cmVkVmFsdWVzO251bGw9PT1kP1xuYy5jYXB0dXJlZFZhbHVlcz1bYl06ZC5wdXNoKGIpO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybn19YT1hW1wicmV0dXJuXCJdfXdoaWxlKG51bGwhPT1hKX0sdW53aW5kV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGYoYSksayhhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gaChhKSxudWxsO2Nhc2UgNDpyZXR1cm4gZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX0sdW53aW5kSW50ZXJydXB0ZWRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7YnJlYWs7Y2FzZSAzOmYoYSk7ayhhKTticmVhaztjYXNlIDU6aChhKTticmVhaztjYXNlIDQ6ZihhKTticmVhaztjYXNlIDEzOnYoYSl9fX19XG5mdW5jdGlvbiBiZihhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZBYyhjKTtudWxsIT09YyYmemMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJnpjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1cbmZ1bmN0aW9uIGNmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaCh1KXtiKGEsdSl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBJZSYmSWUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZihhKTt2YXIgYz1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yy5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHUpe2IoYSx1KX1icmVhaztjYXNlIDU6ZihhKTticmVhaztjYXNlIDc6ZyhhLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSA0OnAmJnYoYSl9fWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWE7OylpZihoKGIpLG51bGw9PT1iLmNoaWxkfHxwJiY0PT09Yi50YWcpe2lmKGI9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9ZWxzZSBiLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9ZnVuY3Rpb24gdihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP0QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jPSEwfWlmKDU9PT1cbmIudGFnfHw2PT09Yi50YWcpZyhiKSxlP1MoZCxiLnN0YXRlTm9kZSk6UihkLGIuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGw9YS5nZXRQdWJsaWNJbnN0YW5jZSxwPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO3B8fChhP0QoXCIyMzVcIik6RChcIjIzNlwiKSk7dmFyIHk9cC5jb21taXRNb3VudCxCPXAuY29tbWl0VXBkYXRlLHI9cC5yZXNldFRleHRDb250ZW50LFE9cC5jb21taXRUZXh0VXBkYXRlLG49cC5hcHBlbmRDaGlsZCxcbng9cC5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLFk9cC5pbnNlcnRCZWZvcmUsRz1wLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFI9cC5yZW1vdmVDaGlsZCxTPXAucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyO3JldHVybntjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjppZihiLmVmZmVjdFRhZyYyMDQ4JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGMsZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRSZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe3IoYS5zdGF0ZU5vZGUpfSxcbmNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGsoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihyKGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxrKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PVxuYy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9HKGIsZS5zdGF0ZU5vZGUsYyk6WShiLGUuc3RhdGVOb2RlLGMpOmQ/eChiLGUuc3RhdGVOb2RlKTpuKGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PWEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe3YoYSk7XG5hW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wcztRKGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpjLGMpO2JyZWFrO2Nhc2UgMzpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRMaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMjphPVxuYy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7Yj1iLm1lbW9pemVkU3RhdGU7YS5wcm9wcz1jLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1jLm1lbW9pemVkU3RhdGU7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWM9Yy51cGRhdGVRdWV1ZTtudWxsIT09YyYmUmUoYyxhKTticmVhaztjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1sKGMuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIDI6YT1jLmNoaWxkLnN0YXRlTm9kZX1SZShiLGEpfWJyZWFrO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyZcbjQmJnkoYSxjLnR5cGUsYy5tZW1vaXplZFByb3BzLGMpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0RXJyb3JMb2dnaW5nOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDI6dmFyIGM9YS50eXBlO2I9YS5zdGF0ZU5vZGU7dmFyIGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZHx8bnVsbD09PWQuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7dmFyIGY9ZC5jYXB0dXJlZFZhbHVlcztkLmNhcHR1cmVkVmFsdWVzPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoJiZlKGIpO2IucHJvcHM9YS5tZW1vaXplZFByb3BzO2Iuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspe2Q9ZltjXTt2YXIgZz1kLnZhbHVlLGg9ZC5zdGFjaztiZihhLGQpO2IuY29tcG9uZW50RGlkQ2F0Y2goZyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWg/aDpcIlwifSl9YnJlYWs7XG5jYXNlIDM6Yz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jfHxudWxsPT09Yy5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDtmPWMuY2FwdHVyZWRWYWx1ZXM7Yy5jYXB0dXJlZFZhbHVlcz1udWxsO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspZD1mW2NdLGJmKGEsZCksYihkLnZhbHVlKTticmVhaztkZWZhdWx0OkQoXCIyNjVcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9bChjKTticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKG51bGwpOmEuY3VycmVudD1udWxsKX19fXZhciBkZj17fTtcbmZ1bmN0aW9uIGVmKGEsYil7ZnVuY3Rpb24gYyhhKXthPT09ZGY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGQ9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGU9YS5nZXRSb290SG9zdENvbnRleHQ7YT1iLmNyZWF0ZUN1cnNvcjt2YXIgZj1iLnB1c2gsaD1iLnBvcCxnPWEoZGYpLGs9YShkZiksdj1hKGRmKTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyhnLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBjKHYuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7aChnLGEpO2goayxhKTtoKHYsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2suY3VycmVudD09PWEmJihoKGcsYSksaChrLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtmKHYsYixhKTtiPWUoYik7ZihrLGEsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1jKHYuY3VycmVudCksXG5lPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGZmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwseT1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7eT1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7eT1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9eTtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseSl9cD1hO3k9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9eTtjOyliKGEsYyksYz1nKGMpO2QoYSk7eT1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLHpjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGphKSxrPWUoITEpLHY9amE7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4gamE7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8amE7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxud2QoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5jb250ZXh0O2MoaCxiLl9jaGFuZ2VkQml0cyxhKTtjKGYsYi5fY3VycmVudFZhbHVlLGEpO2MoZSxhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX0scG9wUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9aC5jdXJyZW50LGM9Zi5jdXJyZW50O2QoZSxhKTtkKGYsYSk7ZChoLGEpO2E9YS50eXBlLmNvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24gamYoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGtmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1hhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1CYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTttYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1YYXx8bnVsbD09PUkpYigpLFhhPWEsWj1jLEk9eWUoWGEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QWMoYSl9O09lKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFZYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1lhPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrNTApLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWWEmJlhhPT09ZHx8QihkLGMpO0ZiPndnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3ZlPUljKCktUGM7cmV0dXJuIHhnPSh2ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHkoYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjt5ZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnkoYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXtaYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09WmEmJihHYj0wLFFjPS0xKTswIT09UCYmeShQKTtaYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHZnKXtCYXx8KEJhPSEwLEpiPXZnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WWE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZDYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaCgkYSl7aD0hMCxrPSRhfWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RGIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpEYih3KTt3LmVmZmVjdFRhZyY9LTM7dGUody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OnRlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goJGEpe2g9ITAsaz0kYX1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaCgkYSl7cD0hMCxuPSRhfXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVlhPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBIZSYmSGUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PVphfHxaYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB0PWpmKCksdT1lZihhLHQpLHo9Z2YodCk7dD1oZih0KTt2YXIgSD1mZihhKSxcbldhPVplKGEsdSx6LHQsSCx2LGspLmJlZ2luV29yayxCYj0kZShhLHUseix0LEgpLmNvbXBsZXRlV29yazt1PWFmKHUseix0LHYsYyk7dmFyIEpjPXUudGhyb3dFeGNlcHRpb24sS2M9dS51bndpbmRXb3JrLExjPXUudW53aW5kSW50ZXJydXB0ZWRXb3JrO3U9Y2YoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIENiPXUuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXUuY29tbWl0UmVzZXRUZXh0Q29udGVudCxEYj11LmNvbW1pdFBsYWNlbWVudCxnZz11LmNvbW1pdERlbGV0aW9uLHRlPXUuY29tbWl0V29yayxoZz11LmNvbW1pdExpZmVDeWNsZXMsaWc9dS5jb21taXRFcnJvckxvZ2dpbmcsamc9dS5jb21taXRBdHRhY2hSZWYsa2c9dS5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2sseWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHhnPTIsdmU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxYYT1udWxsLFo9MCx3PW51bGwsWWE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLFphPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHdnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp6fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGYpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnPWsoYyk7Yz12KGMpP2woYyxnKTpnfWVsc2UgYz1qYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWY7T2UoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtoKGQsZSk7cmV0dXJuIGV9ZnVuY3Rpb24gYyhhKXthPUFkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBkPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZT1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZj1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsaD1hLnNjaGVkdWxlV29yayxnPWEubGVnYWN5Q29udGV4dCxcbms9Zy5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCx2PWcuaXNDb250ZXh0UHJvdmlkZXIsbD1nLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGQsZyl7dmFyIGg9Yy5jdXJyZW50LGs9ZSgpO2g9ZihoKTtyZXR1cm4gYihhLGMsZCxrLGgsZyl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxcbmMsZCxmLGcpe3ZhciBoPWUoKTtyZXR1cm4gYihhLGMsZCxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxyZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGQoYS5jaGlsZC5zdGF0ZU5vZGUpO1xuZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmMsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEdlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtcbmZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cWMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHFmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscmY9dm9pZCAwO3JmPXFmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmPXZvaWQgMDtCZj1xZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBDZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PUNmKXt2Zj0hMTthPXJmKCk7aWYoMD49eWYtYSlpZigtMSE9PVxud2YmJndmPD1hKUJmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybn1lbHNlIEJmLmRpZFRpbWVvdXQ9ITE7d2Y9LTE7YT11Zjt1Zj1udWxsO251bGwhPT1hJiZhKEJmKX19LCExKTt2YXIgRGY9ZnVuY3Rpb24oYSl7eGY9ITE7dmFyIGI9YS15ZitBZjtiPEFmJiZ6ZjxBZj8oOD5iJiYoYj04KSxBZj1iPHpmP3pmOmIpOnpmPWI7eWY9YStBZjt2Znx8KHZmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShDZixcIipcIikpfTtzZj1mdW5jdGlvbihhLGIpe3VmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih3Zj1yZigpK2IudGltZW91dCk7eGZ8fCh4Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRGYpKTtyZXR1cm4gMH07dGY9ZnVuY3Rpb24oKXt1Zj1udWxsO3ZmPSExO3dmPS0xfX1lbHNlIHNmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHRmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSBzZj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRWYoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEZmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gR2YoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEhmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBJZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBMZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTWY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmYoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmYoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGY9dm9pZCAwLFFmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BmPVBmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1QZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFNmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFRmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhTZikuZm9yRWFjaChmdW5jdGlvbihhKXtUZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1NmW2JdPVNmW2FdfSl9KTtcbmZ1bmN0aW9uIFVmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFNmLmhhc093blByb3BlcnR5KGUpJiZTZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBWZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gV2YoYSxiLGMpe2ImJihWZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWGYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBZZj1NZi5odG1sLFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1qZShhKTtiPXVhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9ZZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhZZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFlkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaGMoXCJjYW5jZWxcIiwhMCkmJllkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaGMoXCJjbG9zZVwiLCEwKSYmWWQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTplZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGVlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PVlmJiYoZD1OZihhKSk7ZD09PVlmP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WGYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZmUpZmUuaGFzT3duUHJvcGVydHkoZikmJlcoZixmZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO2Y9VWMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUZmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOkhmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpmKGEsYyk7Zj1JZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVdmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1VmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZRZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZSZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5SZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHRhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVGMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/R2YoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkdmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVVjKGEsYyk7ZD1VYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9RmYoYSxjKTtkPUZmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SWYoYSxjKTtkPUlmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9V2YoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih0YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodGEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWGMoYSxlKTtYZihjLGQpO2Q9WGYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9VZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UWYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1JmKGEsZyk6VGMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9HZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5HZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6R2YoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBmZSlmZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGZlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpIZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmYoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1XZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dGEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBtZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgbmc9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDptZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpZYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVZhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTtsYyhkKTtZYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkdmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtWYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG5nKTt2YXIgb2c9bnVsbCxwZz1udWxsO1xuZnVuY3Rpb24gcWcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1xZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgcmc7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnFnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cWcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHJnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9cmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHNnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXNnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgcmc7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5zZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgcmc7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307c2cucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHJnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuc2cucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHFnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdGcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdWcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpPZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9T2YoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBPZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe29nPVVkO3ZhciBhPWVhKCk7aWYobWUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD15fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oeT1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD15fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtwZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtWZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1wZyxiPWVhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmaGEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihtZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbGIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPWxlKGMsYSk7dmFyIGY9bGUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXBnPW51bGw7VmQob2cpO29nPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtTYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHVnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpyZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3VnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtTYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1JmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbU2FdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbWcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnNmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dGZ9KSxDZz1YOyRiPUNnLmJhdGNoZWRVcGRhdGVzO2FjPUNnLmludGVyYWN0aXZlVXBkYXRlcztiYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgc2coYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dGcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3RnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBwZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFguZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dGcoYSk/dm9pZCAwOlxuRChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpRYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnhhLEV2ZW50UHJvcGFnYXRvcnM6amIsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlpiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTphYixcblJlYWN0RE9NRXZlbnRMaXN0ZW5lcjpaZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgc2coYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtYLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cyk7XG4gICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgdmFyIGNhbGN1bGF0ZVJnYmEgPSBleHBvcnRzLmNhbGN1bGF0ZVJnYmEgPSBmdW5jdGlvbiBjYWxjdWxhdGVSZ2JhKGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgaWYgKGNvbG9yWzBdID09PSAnIycpIHtcbiAgICAgIGNvbG9yID0gY29sb3Iuc2xpY2UoMSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gMykge1xuICAgICAgdmFyIHJlcyA9ICcnO1xuICAgICAgY29sb3Iuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmVzICs9IGM7XG4gICAgICAgIHJlcyArPSBjO1xuICAgICAgfSk7XG4gICAgICBjb2xvciA9IHJlcztcbiAgICB9XG5cbiAgICB2YXIgcmdiVmFsdWVzID0gY29sb3IubWF0Y2goLy57Mn0vZykubWFwKGZ1bmN0aW9uIChoZXgpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbiAgICB9KS5qb2luKCcsICcpO1xuICAgIHJldHVybiAncmdiYSgnICsgcmdiVmFsdWVzICsgJywgJyArIG9wYWNpdHkgKyAnKSc7XG4gIH07XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydtb2R1bGUnLCAnLi9zcGlubmVycy9CYXJMb2FkZXInLCAnLi9zcGlubmVycy9CZWF0TG9hZGVyJywgJy4vc3Bpbm5lcnMvQm91bmNlTG9hZGVyJywgJy4vc3Bpbm5lcnMvQ2lyY2xlTG9hZGVyJywgJy4vc3Bpbm5lcnMvQ2xpcExvYWRlcicsICcuL3NwaW5uZXJzL0NsaW1iaW5nQm94TG9hZGVyJywgJy4vc3Bpbm5lcnMvRG90TG9hZGVyJywgJy4vc3Bpbm5lcnMvRmFkZUxvYWRlcicsICcuL3NwaW5uZXJzL0dyaWRMb2FkZXInLCAnLi9zcGlubmVycy9IYXNoTG9hZGVyJywgJy4vc3Bpbm5lcnMvTW9vbkxvYWRlcicsICcuL3NwaW5uZXJzL1BhY21hbkxvYWRlcicsICcuL3NwaW5uZXJzL1Byb3BhZ2F0ZUxvYWRlcicsICcuL3NwaW5uZXJzL1B1bHNlTG9hZGVyJywgJy4vc3Bpbm5lcnMvUmluZ0xvYWRlcicsICcuL3NwaW5uZXJzL1Jpc2VMb2FkZXInLCAnLi9zcGlubmVycy9Sb3RhdGVMb2FkZXInLCAnLi9zcGlubmVycy9TY2FsZUxvYWRlcicsICcuL3NwaW5uZXJzL1N5bmNMb2FkZXInXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnLi9zcGlubmVycy9CYXJMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9CZWF0TG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQm91bmNlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQ2lyY2xlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQ2xpcExvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL0NsaW1iaW5nQm94TG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvRG90TG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvRmFkZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL0dyaWRMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9IYXNoTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvTW9vbkxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1BhY21hbkxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1Byb3BhZ2F0ZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1B1bHNlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvUmluZ0xvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1Jpc2VMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9Sb3RhdGVMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9TY2FsZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1N5bmNMb2FkZXInKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLkJhckxvYWRlciwgZ2xvYmFsLkJlYXRMb2FkZXIsIGdsb2JhbC5Cb3VuY2VMb2FkZXIsIGdsb2JhbC5DaXJjbGVMb2FkZXIsIGdsb2JhbC5DbGlwTG9hZGVyLCBnbG9iYWwuQ2xpbWJpbmdCb3hMb2FkZXIsIGdsb2JhbC5Eb3RMb2FkZXIsIGdsb2JhbC5GYWRlTG9hZGVyLCBnbG9iYWwuR3JpZExvYWRlciwgZ2xvYmFsLkhhc2hMb2FkZXIsIGdsb2JhbC5Nb29uTG9hZGVyLCBnbG9iYWwuUGFjbWFuTG9hZGVyLCBnbG9iYWwuUHJvcGFnYXRlTG9hZGVyLCBnbG9iYWwuUHVsc2VMb2FkZXIsIGdsb2JhbC5SaW5nTG9hZGVyLCBnbG9iYWwuUmlzZUxvYWRlciwgZ2xvYmFsLlJvdGF0ZUxvYWRlciwgZ2xvYmFsLlNjYWxlTG9hZGVyLCBnbG9iYWwuU3luY0xvYWRlcik7XG4gICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUsIF9CYXJMb2FkZXIsIF9CZWF0TG9hZGVyLCBfQm91bmNlTG9hZGVyLCBfQ2lyY2xlTG9hZGVyLCBfQ2xpcExvYWRlciwgX0NsaW1iaW5nQm94TG9hZGVyLCBfRG90TG9hZGVyLCBfRmFkZUxvYWRlciwgX0dyaWRMb2FkZXIsIF9IYXNoTG9hZGVyLCBfTW9vbkxvYWRlciwgX1BhY21hbkxvYWRlciwgX1Byb3BhZ2F0ZUxvYWRlciwgX1B1bHNlTG9hZGVyLCBfUmluZ0xvYWRlciwgX1Jpc2VMb2FkZXIsIF9Sb3RhdGVMb2FkZXIsIF9TY2FsZUxvYWRlciwgX1N5bmNMb2FkZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBfQmFyTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JhckxvYWRlcik7XG5cbiAgdmFyIF9CZWF0TG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JlYXRMb2FkZXIpO1xuXG4gIHZhciBfQm91bmNlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JvdW5jZUxvYWRlcik7XG5cbiAgdmFyIF9DaXJjbGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2lyY2xlTG9hZGVyKTtcblxuICB2YXIgX0NsaXBMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2xpcExvYWRlcik7XG5cbiAgdmFyIF9DbGltYmluZ0JveExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DbGltYmluZ0JveExvYWRlcik7XG5cbiAgdmFyIF9Eb3RMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRG90TG9hZGVyKTtcblxuICB2YXIgX0ZhZGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmFkZUxvYWRlcik7XG5cbiAgdmFyIF9HcmlkTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dyaWRMb2FkZXIpO1xuXG4gIHZhciBfSGFzaExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IYXNoTG9hZGVyKTtcblxuICB2YXIgX01vb25Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9vbkxvYWRlcik7XG5cbiAgdmFyIF9QYWNtYW5Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFjbWFuTG9hZGVyKTtcblxuICB2YXIgX1Byb3BhZ2F0ZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9wYWdhdGVMb2FkZXIpO1xuXG4gIHZhciBfUHVsc2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHVsc2VMb2FkZXIpO1xuXG4gIHZhciBfUmluZ0xvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SaW5nTG9hZGVyKTtcblxuICB2YXIgX1Jpc2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmlzZUxvYWRlcik7XG5cbiAgdmFyIF9Sb3RhdGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm90YXRlTG9hZGVyKTtcblxuICB2YXIgX1NjYWxlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NjYWxlTG9hZGVyKTtcblxuICB2YXIgX1N5bmNMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY0xvYWRlcik7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIEJhckxvYWRlcjogX0JhckxvYWRlcjIuZGVmYXVsdCxcbiAgICBCZWF0TG9hZGVyOiBfQmVhdExvYWRlcjIuZGVmYXVsdCxcbiAgICBCb3VuY2VMb2FkZXI6IF9Cb3VuY2VMb2FkZXIyLmRlZmF1bHQsXG4gICAgQ2lyY2xlTG9hZGVyOiBfQ2lyY2xlTG9hZGVyMi5kZWZhdWx0LFxuICAgIENsaXBMb2FkZXI6IF9DbGlwTG9hZGVyMi5kZWZhdWx0LFxuICAgIENsaW1iaW5nQm94TG9hZGVyOiBfQ2xpbWJpbmdCb3hMb2FkZXIyLmRlZmF1bHQsXG4gICAgRG90TG9hZGVyOiBfRG90TG9hZGVyMi5kZWZhdWx0LFxuICAgIEZhZGVMb2FkZXI6IF9GYWRlTG9hZGVyMi5kZWZhdWx0LFxuICAgIEdyaWRMb2FkZXI6IF9HcmlkTG9hZGVyMi5kZWZhdWx0LFxuICAgIEhhc2hMb2FkZXI6IF9IYXNoTG9hZGVyMi5kZWZhdWx0LFxuICAgIE1vb25Mb2FkZXI6IF9Nb29uTG9hZGVyMi5kZWZhdWx0LFxuICAgIFBhY21hbkxvYWRlcjogX1BhY21hbkxvYWRlcjIuZGVmYXVsdCxcbiAgICBQcm9wYWdhdGVMb2FkZXI6IF9Qcm9wYWdhdGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgUHVsc2VMb2FkZXI6IF9QdWxzZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBSaW5nTG9hZGVyOiBfUmluZ0xvYWRlcjIuZGVmYXVsdCxcbiAgICBSaXNlTG9hZGVyOiBfUmlzZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBSb3RhdGVMb2FkZXI6IF9Sb3RhdGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgU2NhbGVMb2FkZXI6IF9TY2FsZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBTeW5jTG9hZGVyOiBfU3luY0xvYWRlcjIuZGVmYXVsdFxuICB9O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJywgJy4uL2hlbHBlcnMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSwgcmVxdWlyZSgnLi4vaGVscGVycycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UsIGdsb2JhbC5oZWxwZXJzKTtcbiAgICBnbG9iYWwuQmFyTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlLCBfaGVscGVycykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuTG9hZGVyID0gdW5kZWZpbmVkO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBsb25nID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle2xlZnQ6LTM1JTtyaWdodDoxMDAlfTYwJXtsZWZ0OjEwMCU7cmlnaHQ6LTkwJX0xMDAle2xlZnQ6MTAwJTtyaWdodDotOTAlfScpO1xuXG4gIHZhciBzaG9ydCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXtsZWZ0Oi0yMDAlO3JpZ2h0OjEwMCV9NjAle2xlZnQ6MTA3JTtyaWdodDotOCV9MTAwJXtsZWZ0OjEwNyU7cmlnaHQ6LTglfScpO1xuXG4gIHZhciBMb2FkZXIgPSBleHBvcnRzLkxvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoLyojX19QVVJFX18qLygwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OicsIF90aGlzLnByb3BzLmhlaWdodCwgJ3B4O292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JhY2tncm91bmQtY2xpcDpwYWRkaW5nLWJveDtkaXNwbGF5OmJsb2NrO2JvcmRlci1yYWRpdXM6MnB4O3dpbGwtY2hhbmdlOmxlZnQscmlnaHQ7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczthbmltYXRpb246JywgaSA9PT0gMSA/IGxvbmcgOiBzaG9ydCwgJyAyLjFzICcsIGkgPT09IDIgPyAnMS4xNXMnIDogJycsICcgJywgaSA9PT0gMSA/ICdjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSknIDogJ2N1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSknLCAnIGluZmluaXRlO30nKVxuICAgICAgICApO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgvKiNfX1BVUkVfXyovKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy53aWR0aCwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5oZWlnaHQsICdweDtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjonLCAoMCwgX2hlbHBlcnMuY2FsY3VsYXRlUmdiYSkoX3RoaXMucHJvcHMuY29sb3IsIDAuMiksICc7YmFja2dyb3VuZC1jbGlwOnBhZGRpbmctYm94O30nKVxuICAgICAgICApO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgaGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHdpZHRoOiAxMDAsXG4gICAgaGVpZ2h0OiA0XG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnd2lkdGgnLCAnaGVpZ2h0J10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQmVhdExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGJlYXQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnNTAle3RyYW5zZm9ybTpzY2FsZSgwLjc1KTtvcGFjaXR5OjAuMn0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uOicsIGJlYXQsICcgMC43cyAnLCBpICUgMiA/ICcwcycgOiAnMC4zNXMnLCAnIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQm91bmNlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgYm91bmNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAlLDEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfTUwJXt0cmFuc2Zvcm06c2NhbGUoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJztib3JkZXItcmFkaXVzOjEwMCU7b3BhY2l0eTowLjY7dG9wOjA7bGVmdDowO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246JywgYm91bmNlLCAnIDIuMXMgJywgaSA9PT0gMSA/ICcxcycgOiAnMHMnLCAnIGluZmluaXRlIGVhc2UtaW4tb3V0O30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MFxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5DaXJjbGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBjaXJjbGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSAqICgxIC0gaSAvIDEwKSwgJ3B4O3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUgKiAoMSAtIGkgLyAxMCksICdweDtib3JkZXI6MXB4IHNvbGlkICcsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1yYWRpdXM6MTAwJTt0cmFuc2l0aW9uOjJzO2JvcmRlci1ib3R0b206bm9uZTtib3JkZXItcmlnaHQ6bm9uZTt0b3A6JywgaSAqIDAuNyAqIDIuNSwgJyU7bGVmdDonLCBpICogMC4zNSAqIDIuNSwgJyU7YW5pbWF0aW9uLWZpbGwtbW9kZTpcXCdcXCc7YW5pbWF0aW9uOicsIGNpcmNsZSwgJyAxcyAnLCBpICogMC4yLCAncyBpbmZpbml0ZSBsaW5lYXI7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDApIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg0KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDUwXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLkNsaW1iaW5nQm94TG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgY2xpbWJpbmdCb3ggPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtNDVkZWcpfTUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwtMWVtKSByb3RhdGUoLTUwZGVnKX0yMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgxZW0sLTJlbSkgcm90YXRlKDQ3ZGVnKX0yNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgxZW0sLTJlbSkgcm90YXRlKDQ1ZGVnKX0zMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgxZW0sLTJlbSkgcm90YXRlKDQwZGVnKX00NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyZW0sLTNlbSkgcm90YXRlKDEzN2RlZyl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMmVtLC0zZW0pIHJvdGF0ZSgxMzVkZWcpfTU1JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDJlbSwtM2VtKSByb3RhdGUoMTMwZGVnKX03MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgzZW0sLTRlbSkgcm90YXRlKDIxN2RlZyl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGUoM2VtLC00ZW0pIHJvdGF0ZSgyMjBkZWcpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtMjI1ZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7Ym90dG9tOi0wLjFlbTtoZWlnaHQ6MWVtO3dpZHRoOjFlbTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6MTUlO2JvcmRlcjowLjI1ZW0gc29saWQgJywgX3RoaXMucHJvcHMuY29sb3IsICc7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtNDVkZWcpO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246JywgY2xpbWJpbmdCb3gsICcgMi41cyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjc5LDAsLjQ3LC45Nyk7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTttYXJnaW4tdG9wOi0yLjdlbTttYXJnaW4tbGVmdDotMi43ZW07d2lkdGg6NS40ZW07aGVpZ2h0OjUuNGVtO2ZvbnQtc2l6ZTonLCBfdGhpcy5wcm9wcy5zaXplLCAnO30nKTtcbiAgICAgIH0sIF90aGlzLmhpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjcuMWVtO2hlaWdodDo3LjFlbTt0b3A6MS43ZW07bGVmdDoxLjdlbTtib3JkZXItbGVmdDowLjI1ZW0gc29saWQgJywgX3RoaXMucHJvcHMuY29sb3IsICc7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7fScpO1xuICAgICAgfSwgX3RoaXMuY29udGFpbmVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo3LjFlbTtoZWlnaHQ6Ny4xZW07fScpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy5jb250YWluZXIgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoKSB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5oaWxsKCkgfSlcbiAgICAgICAgICApXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTVcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQ2xpcExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLy8gVGhpcyByZXR1cm5zIGFuIGFuaW1hdGlvblxuICB2YXIgY2xpcCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpIHNjYWxlKDEpfTUwJXt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZykgc2NhbGUoMC44KX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKSBzY2FsZSgxKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym9yZGVyLXJhZGl1czoxMDAlO2JvcmRlcjoycHggc29saWQ7Ym9yZGVyLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1ib3R0b20tY29sb3I6dHJhbnNwYXJlbnQ7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIGNsaXAsICcgMC43NXMgMHMgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoKSB9KSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAzNVxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5Eb3RMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciByb3RhdGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIGJvdW5jZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJSwxMDAle3RyYW5zZm9ybTpzY2FsZSgwKX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMCl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO3RvcDonLCBpICUgMiA/ICcwJyA6ICdhdXRvJywgJztib3R0b206JywgaSAlIDIgPyAnYXV0bycgOiAnMCcsICc7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUgLyAyLCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSAvIDIsICdweDtiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbjonLCBib3VuY2UsICcgMnMgJywgaSA9PT0gMiA/ICctMXMnIDogJzBzJywgJyBpbmZpbml0ZSBsaW5lYXI7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczthbmltYXRpb246Jywgcm90YXRlLCAnIDJzIDBzIGluZmluaXRlIGxpbmVhcjt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuRmFkZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGZhZGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnNTAle29wYWNpdHk6MC4zfTEwMCV7b3BhY2l0eToxfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgX3RoaXMucHJvcHMuaGVpZ2h0LCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMud2lkdGgsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLXJhZGl1czonLCBfdGhpcy5wcm9wcy5yYWRpdXMsICc7dHJhbnNpdGlvbjoyczthbmltYXRpb24tZmlsbC1tb2RlOlxcJ2JvdGhcXCc7YW5pbWF0aW9uOicsIGZhZGUsICcgMS4ycyAnLCBpICogMC4xMiwgJ3MgaW5maW5pdGUgZWFzZS1pbi1vdXQ7fScpO1xuICAgICAgfSwgX3RoaXMucmFkaXVzID0gMjAsIF90aGlzLnF1YXJ0ZXIgPSBfdGhpcy5yYWRpdXMgLyAyICsgX3RoaXMucmFkaXVzIC8gNS41LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MDt0b3A6JywgX3RoaXMucmFkaXVzLCAncHg7bGVmdDonLCBfdGhpcy5yYWRpdXMsICdweDt3aWR0aDonLCBfdGhpcy5yYWRpdXMgKiAzLCAncHg7aGVpZ2h0OicsIF90aGlzLnJhZGl1cyAqIDMsICdweDt9Jyk7XG4gICAgICB9LCBfdGhpcy5hID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDEpLCAnO3RvcDonLCBfdGhpcy5yYWRpdXMsICc7bGVmdDowOycpO1xuICAgICAgfSwgX3RoaXMuYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSgyKSwgJzt0b3A6JywgX3RoaXMucXVhcnRlciwgJztsZWZ0OicsIF90aGlzLnF1YXJ0ZXIsICc7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSgzKSwgJzt0b3A6MDtsZWZ0OicsIF90aGlzLnJhZGl1cywgJzt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoNCksICc7dG9wOicsIC1fdGhpcy5xdWFydGVyLCAnO2xlZnQ6JywgX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoNSksICc7dG9wOicsIC1fdGhpcy5yYWRpdXMsICc7bGVmdDowOycpO1xuICAgICAgfSwgX3RoaXMuZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSg2KSwgJzt0b3A6JywgLV90aGlzLnF1YXJ0ZXIsICc7bGVmdDonLCAtX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7Jyk7XG4gICAgICB9LCBfdGhpcy5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDcpLCAnO3RvcDowO2xlZnQ6JywgLV90aGlzLnJhZGl1cywgJzt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoOCksICc7dG9wOicsIF90aGlzLnF1YXJ0ZXIsICc7bGVmdDonLCAtX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTsnKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5hKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmIoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYygpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5kKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmUoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuZigpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5nKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmgoKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHJhZGl1czogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBoZWlnaHQ6IDE1LFxuICAgIHdpZHRoOiA1LFxuICAgIG1hcmdpbjogJzJweCcsXG4gICAgcmFkaXVzOiAyXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnaGVpZ2h0JywgJ3dpZHRoJywgJ21hcmdpbicsICdyYWRpdXMnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5HcmlkTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgZ3JpZCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle3RyYW5zZm9ybTpzY2FsZSgwLjUpO29wYWNpdHk6MC43fTEwMCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0nKTtcblxuICB2YXIgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKHRvcCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogdG9wO1xuICB9O1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAocmFuZCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tkaXNwbGF5OmlubGluZS1ibG9jaztiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICc7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICc7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uLWZpbGwtbW9kZTpcXCdib3RoXFwnO2FuaW1hdGlvbjonLCBncmlkLCAnICcsIHJhbmQgLyAxMDAgKyAwLjYsICdzICcsIHJhbmQgLyAxMDAgLSAwLjIsICdzIGluZmluaXRlIGVhc2U7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7d2lkdGg6JywgcGFyc2VGbG9hdChfdGhpcy5wcm9wcy5zaXplKSAqIDMgKyBwYXJzZUZsb2F0KF90aGlzLnByb3BzLm1hcmdpbikgKiA2LCAncHg7Zm9udC1zaXplOjA7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIG1hcmdpbjogJzJweCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbiddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJywgJy4uL2hlbHBlcnMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSwgcmVxdWlyZSgnLi4vaGVscGVycycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UsIGdsb2JhbC5oZWxwZXJzKTtcbiAgICBnbG9iYWwuSGFzaExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSwgX2hlbHBlcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMudGhpY2tuZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMuc2l6ZSAvIDU7XG4gICAgICB9LCBfdGhpcy5sYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoX3RoaXMucHJvcHMuc2l6ZSAtIF90aGlzLnRoaWNrbmVzcygpKSAvIDI7XG4gICAgICB9LCBfdGhpcy5vZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5sYXQoKSAtIF90aGlzLnRoaWNrbmVzcygpO1xuICAgICAgfSwgX3RoaXMuY29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2hlbHBlcnMuY2FsY3VsYXRlUmdiYSkoX3RoaXMucHJvcHMuY29sb3IsIDAuNzUpO1xuICAgICAgfSwgX3RoaXMuYmVmb3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3dpZHRoOicsIF90aGlzLnRoaWNrbmVzcygpLCAncHg7Ym94LXNoYWRvdzonLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfTM1JXt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym94LXNoYWRvdzowICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsMCAnLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9NzAle3dpZHRoOicsIF90aGlzLnRoaWNrbmVzcygpLCAncHg7Ym94LXNoYWRvdzonLCAtX3RoaXMubGF0KCksICdweCAnLCAtX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnLCcsIF90aGlzLmxhdCgpLCAncHggJywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfTEwMCV7Ym94LXNoYWRvdzonLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfScpO1xuICAgICAgfSwgX3RoaXMuYWZ0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7aGVpZ2h0OicsIF90aGlzLnRoaWNrbmVzcygpLCAncHg7Ym94LXNoYWRvdzonLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmxhdCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMub2Zmc2V0KCksICdweCAnLCAtX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfTM1JXtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2JveC1zaGFkb3c6JywgX3RoaXMub2Zmc2V0KCksICdweCAwICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLm9mZnNldCgpLCAncHggMCAnLCBfdGhpcy5jb2xvcigpLCAnfTcwJXtoZWlnaHQ6JywgX3RoaXMudGhpY2tuZXNzKCksICdweDtib3gtc2hhZG93OicsIF90aGlzLm9mZnNldCgpLCAncHggJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9MTAwJXtib3gtc2hhZG93OicsIF90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnLCcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIC1fdGhpcy5sYXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9Jyk7XG4gICAgICB9LCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFwnXFwnO3RvcDo1MCU7bGVmdDo1MCU7ZGlzcGxheTpibG9jazt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplIC8gNSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplIC8gNSwgJ3B4O2JvcmRlci1yYWRpdXM6JywgX3RoaXMucHJvcHMuc2l6ZSAvIDEwLCAncHg7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpO2FuaW1hdGlvbi1maWxsLW1vZGU6bm9uZTthbmltYXRpb246JywgaSA9PT0gMSA/IF90aGlzLmJlZm9yZSgpIDogX3RoaXMuYWZ0ZXIoKSwgJyAycyBpbmZpbml0ZTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDt0cmFuc2Zvcm06cm90YXRlKDE2NWRlZyk7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBzaXplOiA1MCxcbiAgICBjb2xvcjogJyMwMDAwMDAnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLk1vb25Mb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBtb29uID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMubW9vblNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaXplIC8gNztcbiAgICAgIH0sIF90aGlzLmJhbGxTdHlsZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOicsIHNpemUsICdweDtoZWlnaHQ6Jywgc2l6ZSwgJ3B4O2JvcmRlci1yYWRpdXM6MTAwJTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplICsgX3RoaXMubW9vblNpemUoKSAqIDIsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSArIF90aGlzLm1vb25TaXplKCkgKiAyLCAncHg7YW5pbWF0aW9uOicsIG1vb24sICcgMC42cyAwcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczt9Jyk7XG4gICAgICB9LCBfdGhpcy5iYWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLmJhbGxTdHlsZShfdGhpcy5tb29uU2l6ZSgpKSwgJztiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO29wYWNpdHk6MC44O3Bvc2l0aW9uOmFic29sdXRlO3RvcDonLCBfdGhpcy5wcm9wcy5zaXplIC8gMiAtIF90aGlzLm1vb25TaXplKCkgLyAyLCAncHg7YW5pbWF0aW9uOicsIG1vb24sICcgMC42cyAwcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczsnKTtcbiAgICAgIH0sIF90aGlzLmNpcmNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5iYWxsU3R5bGUoX3RoaXMucHJvcHMuc2l6ZSksICc7Ym9yZGVyOicsIF90aGlzLm1vb25TaXplKCksICdweCBzb2xpZCAnLCBfdGhpcy5wcm9wcy5jb2xvciwgJztvcGFjaXR5OjAuMTsnKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmNpcmNsZSgpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUGFjbWFuTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICAvLyBUaGlzIHJldHVybnMgYW4gYW5pbWF0aW9uXG4gIHZhciBwYWNtYW4gPSBbKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoLTQ0ZGVnKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoNDRkZWcpfScpXTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmJhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnNzUle29wYWNpdHk6MC43fTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgnLCAtNCAqIF90aGlzLnByb3BzLnNpemUsICdweCwnLCAtX3RoaXMucHJvcHMuc2l6ZSAvIDQsICdweCl9Jyk7XG4gICAgICB9LCBfdGhpcy5iYWxsU3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLCcsIC1fdGhpcy5wcm9wcy5zaXplIC8gNCwgJ3B4KTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjVweDtsZWZ0OjEwMHB4O2FuaW1hdGlvbjonLCBfdGhpcy5iYWxsKCksICcgMXMgJywgaSAqIDAuMjUsICdzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RoaXMuczEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaXplICsgJ3B4IHNvbGlkIHRyYW5zcGFyZW50JztcbiAgICAgIH0sIF90aGlzLnMyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMuc2l6ZSArICdweCBzb2xpZCAnICsgX3RoaXMucHJvcHMuY29sb3I7XG4gICAgICB9LCBfdGhpcy5wYWNtYW5TdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyLXJpZ2h0OicsIF90aGlzLnMxKCksICc7Ym9yZGVyLXRvcDonLCBpID09PSAwID8gX3RoaXMuczEoKSA6IF90aGlzLnMyKCksICc7Ym9yZGVyLWxlZnQ6JywgX3RoaXMuczIoKSwgJztib3JkZXItYm90dG9tOicsIGkgPT09IDAgPyBfdGhpcy5zMigpIDogX3RoaXMuczEoKSwgJztib3JkZXItcmFkaXVzOicsIF90aGlzLnByb3BzLnNpemUsICdweDtwb3NpdGlvbjphYnNvbHV0ZTthbmltYXRpb246JywgcGFjbWFuW2ldLCAnIDAuOHMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtc2l6ZTowO2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O30nKTtcbiAgICAgIH0sIF90aGlzLnBhYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBhY21hblN0eWxlKDApO1xuICAgICAgfSwgX3RoaXMubWFuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnBhY21hblN0eWxlKDEpLCAnO3Bvc2l0aW9uOmFic29sdXRlOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnBhYygpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5tYW4oKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYmFsbFN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsU3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmJhbGxTdHlsZSg0KSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYmFsbFN0eWxlKDUpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAyNSxcbiAgICBtYXJnaW46ICcycHgnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5Qcm9wYWdhdGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIDEuNSA0LjUgNy41XG4gIHZhciBkaXN0YW5jZSA9IFsxLCAzLCA1XTtcblxuICB2YXIgcHJvcGFnYXRlID0gWygwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMl0sICdyZW0pIHNjYWxlKDAuNSl9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyksICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzJdLCAncmVtKSBzY2FsZSgwLjUpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKV07XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2ZvbnQtc2l6ZTonLCBfdGhpcy5wcm9wcy5zaXplIC8gMywgJ3B4O3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2JhY2tncm91bmQ6JywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLXJhZGl1czo1MCU7YW5pbWF0aW9uOicsIHByb3BhZ2F0ZVtpXSwgJyAxLjVzICBpbmZpbml0ZTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgwKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDUpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIHNpemU6IDE1LFxuICAgIGNvbG9yOiAnIzAwMDAwMCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUHVsc2VMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIFRoaXMgcmV0dXJucyBhbiBhbmltYXRpb25cbiAgdmFyIHB1bHNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9NDUle3RyYW5zZm9ybTpzY2FsZSgwLjEpO29wYWNpdHk6MC43fTgwJXt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O21hcmdpbjonLCBfdGhpcy5wcm9wcy5tYXJnaW4sICc7Ym9yZGVyLXJhZGl1czoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2FuaW1hdGlvbjonLCBwdWxzZSwgJyAwLjc1cyAnLCBpICogMC4xMiwgJ3MgaW5maW5pdGUgY3ViaWMtYmV6aWVyKC4yLC42OCwuMTgsMS4wOCk7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIG1hcmdpbjogJzJweCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbiddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLlJpbmdMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciByaWdodCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06cm90YXRlWCgwZGVnKSByb3RhdGVZKDBkZWcpIHJvdGF0ZVooMGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlWCgxODBkZWcpIHJvdGF0ZVkoMzYwZGVnKSByb3RhdGVaKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIGxlZnQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMzYwZGVnKSByb3RhdGVZKDE4MGRlZykgcm90YXRlWigzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym9yZGVyOicsIF90aGlzLnByb3BzLnNpemUgLyAxMCwgJ3B4IHNvbGlkICcsIF90aGlzLnByb3BzLmNvbG9yLCAnO29wYWNpdHk6MC40O2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO3BlcnNwZWN0aXZlOjgwMHB4O2FuaW1hdGlvbjonLCBpID09PSAxID8gcmlnaHQgOiBsZWZ0LCAnIDJzIDBzIGluZmluaXRlIGxpbmVhcjt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDtwb3NpdGlvbjpyZWxhdGl2ZTt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUmlzZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHJpc2VBbW91bnQgPSAzMDtcblxuICB2YXIgZXZlbiA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGUoMS4xKX0yNSV7dHJhbnNsYXRlWSgtJywgcmlzZUFtb3VudCwgJ3B4KX01MCV7dHJhbnNmb3JtOnNjYWxlKDAuNCl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVZKCcsIHJpc2VBbW91bnQsICdweCl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKSBzY2FsZSgxLjApfScpO1xuXG4gIHZhciBvZGQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnNjYWxlKDAuNCl9MjUle3RyYW5zbGF0ZVkoJywgcmlzZUFtb3VudCwgJ3B4KX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMSl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVZKCcsIC1yaXNlQW1vdW50LCAncHgpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgc2NhbGUoMC43NSl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIGkgJSAyID09PSAwID8gZXZlbiA6IG9kZCwgJyAxcyAwcyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjE1LC40NiwuOSwuNik7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDQpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg1KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUm90YXRlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgcm90YXRlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7b3BhY2l0eTowLjg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDonLCBpICUgMiA/IC0yOCA6IDI1LCAncHg7fScpO1xuICAgICAgfSwgX3RoaXMuYmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLmJhbGwoKSwgJztkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uOicsIHJvdGF0ZSwgJyAxcyAwcyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjcsLS4xMywuMjIsLjg2KTsnKTtcbiAgICAgIH0sIF90aGlzLmxvbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuYmFsbCgpLCAnO2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDEpLCAnOycpO1xuICAgICAgfSwgX3RoaXMuc2hvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuYmFsbCgpLCAnO2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDIpLCAnOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmxvbmcoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc2hvcnQoKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuU2NhbGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBzY2FsZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGV5KDEuMCl9NTAle3RyYW5zZm9ybTpzY2FsZXkoMC40KX0xMDAle3RyYW5zZm9ybTpzY2FsZXkoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy53aWR0aCwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5oZWlnaHQsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6JywgX3RoaXMucHJvcHMucmFkaXVzLCAncHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIHNjYWxlLCAnIDFzICcsIGkgKiAwLjEsICdzIGluZmluaXRlIGN1YmljLWJlemllciguMiwuNjgsLjE4LDEuMDgpO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg0KSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgaGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICByYWRpdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgaGVpZ2h0OiAzNSxcbiAgICB3aWR0aDogNCxcbiAgICBtYXJnaW46ICcycHgnLFxuICAgIHJhZGl1czogMlxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ2hlaWdodCcsICd3aWR0aCcsICdtYXJnaW4nLCAncmFkaXVzJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuU3luY0xvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHN5bmMgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMzMle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfTY2JXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTtkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246Jywgc3luYywgJyAwLjZzICcsIGkgKiAwLjA3LCAncyBpbmZpbml0ZSBlYXNlLWluLW91dDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9pbmRleCcpOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHI9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHQ9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHY9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx3PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsej1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLEE9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtiPUVycm9yKGUrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtiLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7Yi5mcmFtZXNUb1BvcD0xO3Rocm93IGI7fVxudmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEQoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8Q31ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RC5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRSgpe31cbkUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8Q312YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtHLmNvbnN0cnVjdG9yPUY7bShHLEQucHJvdG90eXBlKTtHLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBIPXtjdXJyZW50Om51bGx9LEk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxKPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBLKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilJLmNhbGwoYixjKSYmIUouaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkguY3VycmVudH19XG5mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1yfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZyxOPVtdO2Z1bmN0aW9uIE8oYSxiLGUsYyl7aWYoTi5sZW5ndGgpe3ZhciBkPU4ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBQKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ti5sZW5ndGgmJk4ucHVzaChhKX1cbmZ1bmN0aW9uIFEoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHI6Y2FzZSB0Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1IoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUihkLGgpO2crPVEoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitSKGQsaCsrKSxnKz1RKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFIoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFMoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVChhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9VKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEwoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE0sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBVKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE0sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU8oYixnLGMsZCk7bnVsbD09YXx8UShhLFwiXCIsVCxiKTtQKGIpfVxudmFyIFY9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VShhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9TyhudWxsLG51bGwsYixlKTtudWxsPT1hfHxRKGEsXCJcIixTLGIpO1AoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UShhLFwiXCIscC50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VShhLGIsbnVsbCxwLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe0woYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkQsUHVyZUNvbXBvbmVudDpGLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp4LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOncsY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp6LHJlbmRlcjphfX0sRnJhZ21lbnQ6dSxTdHJpY3RNb2RlOnYsdW5zdGFibGVfQXN5bmNNb2RlOnksY3JlYXRlRWxlbWVudDpLLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1ILmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYoaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUkuY2FsbChiLFxuYykmJiFKLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Sy5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50OkwsdmVyc2lvbjpcIjE2LjMuMFwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpILGFzc2lnbjptfX0sVz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlZ9KSxYPVcmJlZ8fFc7XG5tb2R1bGUuZXhwb3J0cz1YW1wiZGVmYXVsdFwiXT9YW1wiZGVmYXVsdFwiXTpYO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50LCBjcmVhdGVGYWN0b3J5IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICdmYmpzL2xpYi9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNyZWF0ZUNoYW5nZUVtaXR0ZXIgfSBmcm9tICdjaGFuZ2UtZW1pdHRlcic7XG5pbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxudmFyIHNldFN0YXRpYyA9IGZ1bmN0aW9uIHNldFN0YXRpYyhrZXksIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgQmFzZUNvbXBvbmVudFtrZXldID0gdmFsdWU7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICB9O1xufTtcblxudmFyIHNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gc2V0RGlzcGxheU5hbWUoZGlzcGxheU5hbWUpIHtcbiAgcmV0dXJuIHNldFN0YXRpYygnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSk7XG59O1xuXG52YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQkJDEpIHtcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudCQkMTtcbiAgfVxuXG4gIGlmICghQ29tcG9uZW50JCQxKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQkJDEuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50JCQxLm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59O1xuXG52YXIgd3JhcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gd3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsIGhvY05hbWUpIHtcbiAgcmV0dXJuIGhvY05hbWUgKyAnKCcgKyBnZXREaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50KSArICcpJztcbn07XG5cbnZhciBtYXBQcm9wcyA9IGZ1bmN0aW9uIG1hcFByb3BzKHByb3BzTWFwcGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgTWFwUHJvcHMgPSBmdW5jdGlvbiBNYXBQcm9wcyhwcm9wcykge1xuICAgICAgcmV0dXJuIGZhY3RvcnkocHJvcHNNYXBwZXIocHJvcHMpKTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdtYXBQcm9wcycpKShNYXBQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBNYXBQcm9wcztcbiAgfTtcbn07XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIHdpdGhQcm9wcyA9IGZ1bmN0aW9uIHdpdGhQcm9wcyhpbnB1dCkge1xuICB2YXIgaG9jID0gbWFwUHJvcHMoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwcm9wcywgdHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nID8gaW5wdXQocHJvcHMpIDogaW5wdXQpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhQcm9wcycpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbnZhciBwaWNrID0gZnVuY3Rpb24gcGljayhvYmosIGtleXMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgd2l0aFByb3BzT25DaGFuZ2UgPSBmdW5jdGlvbiB3aXRoUHJvcHNPbkNoYW5nZShzaG91bGRNYXBPcktleXMsIHByb3BzTWFwcGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgc2hvdWxkTWFwID0gdHlwZW9mIHNob3VsZE1hcE9yS2V5cyA9PT0gJ2Z1bmN0aW9uJyA/IHNob3VsZE1hcE9yS2V5cyA6IGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwaWNrKHByb3BzLCBzaG91bGRNYXBPcktleXMpLCBwaWNrKG5leHRQcm9wcywgc2hvdWxkTWFwT3JLZXlzKSk7XG4gICAgfTtcblxuICAgIHZhciBXaXRoUHJvcHNPbkNoYW5nZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhXaXRoUHJvcHNPbkNoYW5nZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhQcm9wc09uQ2hhbmdlKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhQcm9wc09uQ2hhbmdlKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jb21wdXRlZFByb3BzID0gcHJvcHNNYXBwZXIoX3RoaXMucHJvcHMpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBXaXRoUHJvcHNPbkNoYW5nZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRNYXAodGhpcy5wcm9wcywgbmV4dFByb3BzKSkge1xuICAgICAgICAgIHRoaXMuY29tcHV0ZWRQcm9wcyA9IHByb3BzTWFwcGVyKG5leHRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIFdpdGhQcm9wc09uQ2hhbmdlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLmNvbXB1dGVkUHJvcHMpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoUHJvcHNPbkNoYW5nZTtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnd2l0aFByb3BzT25DaGFuZ2UnKSkoV2l0aFByb3BzT25DaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFByb3BzT25DaGFuZ2U7XG4gIH07XG59O1xuXG52YXIgbWFwVmFsdWVzID0gZnVuY3Rpb24gbWFwVmFsdWVzKG9iaiwgZnVuYykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZnVuYyhvYmpba2V5XSwga2V5KTtcbiAgICB9XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIHdpdGhIYW5kbGVycyA9IGZ1bmN0aW9uIHdpdGhIYW5kbGVycyhoYW5kbGVycykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgV2l0aEhhbmRsZXJzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhIYW5kbGVycywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhIYW5kbGVycygpIHtcbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBXaXRoSGFuZGxlcnMpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgICB9XG5cbiAgICAgIFdpdGhIYW5kbGVycy5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkSGFuZGxlcnMgPSB7fTtcbiAgICAgIH07XG5cbiAgICAgIFdpdGhIYW5kbGVycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5oYW5kbGVycykpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFdpdGhIYW5kbGVycztcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICB2YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5jYWNoZWRIYW5kbGVycyA9IHt9O1xuICAgICAgdGhpcy5oYW5kbGVycyA9IG1hcFZhbHVlcyh0eXBlb2YgaGFuZGxlcnMgPT09ICdmdW5jdGlvbicgPyBoYW5kbGVycyh0aGlzLnByb3BzKSA6IGhhbmRsZXJzLCBmdW5jdGlvbiAoY3JlYXRlSGFuZGxlciwgaGFuZGxlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgY2FjaGVkSGFuZGxlciA9IF90aGlzMi5jYWNoZWRIYW5kbGVyc1toYW5kbGVyTmFtZV07XG4gICAgICAgICAgaWYgKGNhY2hlZEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRIYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIoX3RoaXMyLnByb3BzKTtcbiAgICAgICAgICBfdGhpczIuY2FjaGVkSGFuZGxlcnNbaGFuZGxlck5hbWVdID0gaGFuZGxlcjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAnd2l0aEhhbmRsZXJzKCk6IEV4cGVjdGVkIGEgbWFwIG9mIGhpZ2hlci1vcmRlciBmdW5jdGlvbnMuICcgKyAnUmVmZXIgdG8gdGhlIGRvY3MgZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlci5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhIYW5kbGVycycpKShXaXRoSGFuZGxlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aEhhbmRsZXJzO1xuICB9O1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRQcm9wcyhwcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG4gICAgdmFyIERlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIERlZmF1bHRQcm9wcyhvd25lclByb3BzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShvd25lclByb3BzKTtcbiAgICB9O1xuICAgIERlZmF1bHRQcm9wcy5kZWZhdWx0UHJvcHMgPSBwcm9wcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnZGVmYXVsdFByb3BzJykpKERlZmF1bHRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBEZWZhdWx0UHJvcHM7XG4gIH07XG59O1xuXG52YXIgb21pdCA9IGZ1bmN0aW9uIG9taXQob2JqLCBrZXlzKSB7XG4gIHZhciByZXN0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBbXSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHJlc3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZGVsZXRlIHJlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3Q7XG59O1xuXG52YXIgcmVuYW1lUHJvcCA9IGZ1bmN0aW9uIHJlbmFtZVByb3Aob2xkTmFtZSwgbmV3TmFtZSkge1xuICB2YXIgaG9jID0gbWFwUHJvcHMoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcztcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb21pdChwcm9wcywgW29sZE5hbWVdKSwgKF9iYWJlbEhlbHBlcnMkZXh0ZW5kcyA9IHt9LCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbbmV3TmFtZV0gPSBwcm9wc1tvbGROYW1lXSwgX2JhYmVsSGVscGVycyRleHRlbmRzKSk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAncmVuYW1lUHJvcCcpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbnZhciBrZXlzID0gT2JqZWN0LmtleXM7XG5cblxudmFyIG1hcEtleXMgPSBmdW5jdGlvbiBtYXBLZXlzKG9iaiwgZnVuYykge1xuICByZXR1cm4ga2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXN1bHRbZnVuYyh2YWwsIGtleSldID0gdmFsO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59O1xuXG52YXIgcmVuYW1lUHJvcHMgPSBmdW5jdGlvbiByZW5hbWVQcm9wcyhuYW1lTWFwKSB7XG4gIHZhciBob2MgPSBtYXBQcm9wcyhmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG9taXQocHJvcHMsIGtleXMobmFtZU1hcCkpLCBtYXBLZXlzKHBpY2socHJvcHMsIGtleXMobmFtZU1hcCkpLCBmdW5jdGlvbiAoXywgb2xkTmFtZSkge1xuICAgICAgcmV0dXJuIG5hbWVNYXBbb2xkTmFtZV07XG4gICAgfSkpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3JlbmFtZVByb3BzJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaG9jO1xufTtcblxudmFyIGZsYXR0ZW5Qcm9wID0gZnVuY3Rpb24gZmxhdHRlblByb3AocHJvcE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuICAgIHZhciBGbGF0dGVuUHJvcCA9IGZ1bmN0aW9uIEZsYXR0ZW5Qcm9wKHByb3BzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgcHJvcHMsIHByb3BzW3Byb3BOYW1lXSkpO1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnZmxhdHRlblByb3AnKSkoRmxhdHRlblByb3ApO1xuICAgIH1cbiAgICByZXR1cm4gRmxhdHRlblByb3A7XG4gIH07XG59O1xuXG52YXIgd2l0aFN0YXRlID0gZnVuY3Rpb24gd2l0aFN0YXRlKHN0YXRlTmFtZSwgc3RhdGVVcGRhdGVyTmFtZSwgaW5pdGlhbFN0YXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBXaXRoU3RhdGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgaW5oZXJpdHMoV2l0aFN0YXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFN0YXRlKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdGF0ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgc3RhdGVWYWx1ZTogdHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IGluaXRpYWxTdGF0ZShfdGhpcy5wcm9wcykgOiBpbml0aWFsU3RhdGVcbiAgICAgICAgfSwgX3RoaXMudXBkYXRlU3RhdGVWYWx1ZSA9IGZ1bmN0aW9uICh1cGRhdGVGbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZVZhbHVlID0gX3JlZi5zdGF0ZVZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc3RhdGVWYWx1ZTogdHlwZW9mIHVwZGF0ZUZuID09PSAnZnVuY3Rpb24nID8gdXBkYXRlRm4oc3RhdGVWYWx1ZSkgOiB1cGRhdGVGblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgICB9XG5cbiAgICAgIFdpdGhTdGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tzdGF0ZU5hbWVdID0gdGhpcy5zdGF0ZS5zdGF0ZVZhbHVlLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbc3RhdGVVcGRhdGVyTmFtZV0gPSB0aGlzLnVwZGF0ZVN0YXRlVmFsdWUsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoU3RhdGU7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhTdGF0ZScpKShXaXRoU3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFN0YXRlO1xuICB9O1xufTtcblxudmFyIHdpdGhTdGF0ZUhhbmRsZXJzID0gZnVuY3Rpb24gd2l0aFN0YXRlSGFuZGxlcnMoaW5pdGlhbFN0YXRlLCBzdGF0ZVVwZGF0ZXJzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBXaXRoU3RhdGVIYW5kbGVycyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhXaXRoU3RhdGVIYW5kbGVycywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhTdGF0ZUhhbmRsZXJzKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdGF0ZUhhbmRsZXJzKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBXaXRoU3RhdGVIYW5kbGVycy5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIHZhciBwcm9wc0NoYW5nZWQgPSBuZXh0UHJvcHMgIT09IHRoaXMucHJvcHM7XG4gICAgICAgIC8vIHRoZSBpZGVhIGlzIHRvIHNraXAgcmVuZGVyIGlmIHN0YXRlVXBkYXRlciBoYW5kbGVyIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdG8gY3JlYXRlIG5vIHN0YXRlIHVwZGF0ZSBoYW5kbGVycyB3aXRoIGFjY2VzcyB0byBzdGF0ZSBhbmQgcHJvcHNcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFzaGFsbG93RXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHByb3BzQ2hhbmdlZCB8fCBzdGF0ZUNoYW5nZWQ7XG4gICAgICB9O1xuXG4gICAgICBXaXRoU3RhdGVIYW5kbGVycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSwgdGhpcy5zdGF0ZVVwZGF0ZXJzKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gV2l0aFN0YXRlSGFuZGxlcnM7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgdmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKHRoaXMucHJvcHMpIDogaW5pdGlhbFN0YXRlO1xuICAgICAgdGhpcy5zdGF0ZVVwZGF0ZXJzID0gbWFwVmFsdWVzKHN0YXRlVXBkYXRlcnMsIGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobWF5QmVFdmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSGF2aW5nIHRoYXQgZnVuY3Rpb25hbCBmb3JtIG9mIHNldFN0YXRlIGNhbiBiZSBjYWxsZWQgYXN5bmNcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHBlcnNpc3QgU3ludGhldGljRXZlbnRcbiAgICAgICAgICBpZiAobWF5QmVFdmVudCAmJiB0eXBlb2YgbWF5QmVFdmVudC5wZXJzaXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtYXlCZUV2ZW50LnBlcnNpc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlLCBwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoc3RhdGUsIHByb3BzKS5hcHBseSh1bmRlZmluZWQsIFttYXlCZUV2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICd3aXRoU3RhdGVIYW5kbGVycycpKShXaXRoU3RhdGVIYW5kbGVycyk7XG4gICAgfVxuICAgIHJldHVybiBXaXRoU3RhdGVIYW5kbGVycztcbiAgfTtcbn07XG5cbnZhciB3aXRoUmVkdWNlciA9IGZ1bmN0aW9uIHdpdGhSZWR1Y2VyKHN0YXRlTmFtZSwgZGlzcGF0Y2hOYW1lLCByZWR1Y2VyLCBpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFdpdGhSZWR1Y2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhSZWR1Y2VyLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFJlZHVjZXIoKSB7XG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2l0aFJlZHVjZXIpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIHN0YXRlVmFsdWU6IF90aGlzLmluaXRpYWxpemVTdGF0ZVZhbHVlKClcbiAgICAgICAgfSwgX3RoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGVWYWx1ZSA9IF9yZWYuc3RhdGVWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN0YXRlVmFsdWU6IHJlZHVjZXIoc3RhdGVWYWx1ZSwgYWN0aW9uKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgIH1cblxuICAgICAgV2l0aFJlZHVjZXIucHJvdG90eXBlLmluaXRpYWxpemVTdGF0ZVZhbHVlID0gZnVuY3Rpb24gaW5pdGlhbGl6ZVN0YXRlVmFsdWUoKSB7XG4gICAgICAgIGlmIChpbml0aWFsU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKHRoaXMucHJvcHMpIDogaW5pdGlhbFN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiAnQEByZWNvbXBvc2UvSU5JVCcgfSk7XG4gICAgICB9O1xuXG4gICAgICBXaXRoUmVkdWNlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tzdGF0ZU5hbWVdID0gdGhpcy5zdGF0ZS5zdGF0ZVZhbHVlLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbZGlzcGF0Y2hOYW1lXSA9IHRoaXMuZGlzcGF0Y2gsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoUmVkdWNlcjtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnd2l0aFJlZHVjZXInKSkoV2l0aFJlZHVjZXIpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFJlZHVjZXI7XG4gIH07XG59O1xuXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eShDb21wb25lbnQkJDEpIHtcbiAgcmV0dXJuIENvbXBvbmVudCQkMTtcbn07XG5cbnZhciBicmFuY2ggPSBmdW5jdGlvbiBicmFuY2godGVzdCwgbGVmdCkge1xuICB2YXIgcmlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGlkZW50aXR5O1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgbGVmdEZhY3RvcnkgPSB2b2lkIDA7XG4gICAgdmFyIHJpZ2h0RmFjdG9yeSA9IHZvaWQgMDtcbiAgICB2YXIgQnJhbmNoID0gZnVuY3Rpb24gQnJhbmNoKHByb3BzKSB7XG4gICAgICBpZiAodGVzdChwcm9wcykpIHtcbiAgICAgICAgbGVmdEZhY3RvcnkgPSBsZWZ0RmFjdG9yeSB8fCBjcmVhdGVGYWN0b3J5KGxlZnQoQmFzZUNvbXBvbmVudCkpO1xuICAgICAgICByZXR1cm4gbGVmdEZhY3RvcnkocHJvcHMpO1xuICAgICAgfVxuICAgICAgcmlnaHRGYWN0b3J5ID0gcmlnaHRGYWN0b3J5IHx8IGNyZWF0ZUZhY3RvcnkocmlnaHQoQmFzZUNvbXBvbmVudCkpO1xuICAgICAgcmV0dXJuIHJpZ2h0RmFjdG9yeShwcm9wcyk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdicmFuY2gnKSkoQnJhbmNoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJyYW5jaDtcbiAgfTtcbn07XG5cbnZhciByZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiByZW5kZXJDb21wb25lbnQoQ29tcG9uZW50JCQxKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoXykge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShDb21wb25lbnQkJDEpO1xuICAgIHZhciBSZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiBSZW5kZXJDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzKTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZW5kZXJDb21wb25lbnQuZGlzcGxheU5hbWUgPSB3cmFwRGlzcGxheU5hbWUoQ29tcG9uZW50JCQxLCAncmVuZGVyQ29tcG9uZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJDb21wb25lbnQ7XG4gIH07XG59O1xuXG52YXIgTm90aGluZyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKE5vdGhpbmcsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5vdGhpbmcoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aGluZyk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE5vdGhpbmcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTm90aGluZztcbn0oQ29tcG9uZW50KTtcblxudmFyIHJlbmRlck5vdGhpbmcgPSBmdW5jdGlvbiByZW5kZXJOb3RoaW5nKF8pIHtcbiAgcmV0dXJuIE5vdGhpbmc7XG59O1xuXG52YXIgc2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkVXBkYXRlKHRlc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhTaG91bGRVcGRhdGUsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBTaG91bGRVcGRhdGUoKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNob3VsZFVwZGF0ZSk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIFNob3VsZFVwZGF0ZS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gdGVzdCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgU2hvdWxkVXBkYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFNob3VsZFVwZGF0ZTtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnc2hvdWxkVXBkYXRlJykpKFNob3VsZFVwZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG52YXIgcHVyZSA9IGZ1bmN0aW9uIHB1cmUoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgaG9jID0gc2hvdWxkVXBkYXRlKGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcyk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAncHVyZScpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICB9XG5cbiAgcmV0dXJuIGhvYyhCYXNlQ29tcG9uZW50KTtcbn07XG5cbnZhciBvbmx5VXBkYXRlRm9yS2V5cyA9IGZ1bmN0aW9uIG9ubHlVcGRhdGVGb3JLZXlzKHByb3BLZXlzKSB7XG4gIHZhciBob2MgPSBzaG91bGRVcGRhdGUoZnVuY3Rpb24gKHByb3BzLCBuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwaWNrKG5leHRQcm9wcywgcHJvcEtleXMpLCBwaWNrKHByb3BzLCBwcm9wS2V5cykpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnb25seVVwZGF0ZUZvcktleXMnKSkoaG9jKEJhc2VDb21wb25lbnQpKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBob2M7XG59O1xuXG52YXIgb25seVVwZGF0ZUZvclByb3BUeXBlcyA9IGZ1bmN0aW9uIG9ubHlVcGRhdGVGb3JQcm9wVHlwZXMoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgcHJvcFR5cGVzID0gQmFzZUNvbXBvbmVudC5wcm9wVHlwZXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXByb3BUeXBlcykge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0EgY29tcG9uZW50IHdpdGhvdXQgYW55IGBwcm9wVHlwZXNgIHdhcyBwYXNzZWQgdG8gJyArICdgb25seVVwZGF0ZUZvclByb3BUeXBlcygpYC4gQ2hlY2sgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSAnICsgKCdjb21wb25lbnQgd2l0aCBkaXNwbGF5IG5hbWUgXCInICsgZ2V0RGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCkgKyAnXCIuJykpO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BUeXBlcyB8fCB7fSk7XG4gIHZhciBPbmx5VXBkYXRlRm9yUHJvcFR5cGVzID0gb25seVVwZGF0ZUZvcktleXMocHJvcEtleXMpKEJhc2VDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnb25seVVwZGF0ZUZvclByb3BUeXBlcycpKShPbmx5VXBkYXRlRm9yUHJvcFR5cGVzKTtcbiAgfVxuICByZXR1cm4gT25seVVwZGF0ZUZvclByb3BUeXBlcztcbn07XG5cbnZhciB3aXRoQ29udGV4dCA9IGZ1bmN0aW9uIHdpdGhDb250ZXh0KGNoaWxkQ29udGV4dFR5cGVzLCBnZXRDaGlsZENvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFdpdGhDb250ZXh0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhDb250ZXh0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2l0aENvbnRleHQpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRDb250ZXh0KF90aGlzLnByb3BzKTtcbiAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgIH1cblxuICAgICAgV2l0aENvbnRleHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gV2l0aENvbnRleHQ7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgV2l0aENvbnRleHQuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICd3aXRoQ29udGV4dCcpKShXaXRoQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBXaXRoQ29udGV4dDtcbiAgfTtcbn07XG5cbnZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChjb250ZXh0VHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuICAgIHZhciBHZXRDb250ZXh0ID0gZnVuY3Rpb24gR2V0Q29udGV4dChvd25lclByb3BzLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgb3duZXJQcm9wcywgY29udGV4dCkpO1xuICAgIH07XG5cbiAgICBHZXRDb250ZXh0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdnZXRDb250ZXh0JykpKEdldENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gR2V0Q29udGV4dDtcbiAgfTtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciBsaWZlY3ljbGUgPSBmdW5jdGlvbiBsaWZlY3ljbGUoc3BlYykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzcGVjLmhhc093blByb3BlcnR5KCdyZW5kZXInKSkge1xuICAgICAgY29uc29sZS5lcnJvcignbGlmZWN5Y2xlKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVuZGVyIG1ldGhvZDsgaXRzIGJlaGF2aW9yIGlzIHRvICcgKyAncGFzcyBhbGwgcHJvcHMgYW5kIHN0YXRlIHRvIHRoZSBiYXNlIGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICB2YXIgTGlmZWN5Y2xlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKExpZmVjeWNsZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlmZWN5Y2xlKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgTGlmZWN5Y2xlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gTGlmZWN5Y2xlO1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIE9iamVjdC5rZXlzKHNwZWMpLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgIHJldHVybiBMaWZlY3ljbGUucHJvdG90eXBlW2hvb2tdID0gc3BlY1tob29rXTtcbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdsaWZlY3ljbGUnKSkoTGlmZWN5Y2xlKTtcbiAgICB9XG4gICAgcmV0dXJuIExpZmVjeWNsZTtcbiAgfTtcbn07XG5cbnZhciBpc0NsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudChDb21wb25lbnQkJDEpIHtcbiAgcmV0dXJuIEJvb2xlYW4oQ29tcG9uZW50JCQxICYmIENvbXBvbmVudCQkMS5wcm90b3R5cGUgJiYgdHlwZW9mIENvbXBvbmVudCQkMS5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKTtcbn07XG5cbnZhciB0b0NsYXNzID0gZnVuY3Rpb24gdG9DbGFzcyhiYXNlQ29tcG9uZW50KSB7XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KGJhc2VDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGJhc2VDb21wb25lbnQ7XG4gIH1cblxuICB2YXIgVG9DbGFzcyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoVG9DbGFzcywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBUb0NsYXNzKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9DbGFzcyk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFRvQ2xhc3MucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgYmFzZUNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoYmFzZUNvbXBvbmVudCwgdGhpcy5wcm9wcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNvbXBvbmVudCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gVG9DbGFzcztcbiAgfShDb21wb25lbnQpO1xuXG4gIFRvQ2xhc3MuZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShiYXNlQ29tcG9uZW50KTtcbiAgVG9DbGFzcy5wcm9wVHlwZXMgPSBiYXNlQ29tcG9uZW50LnByb3BUeXBlcztcbiAgVG9DbGFzcy5jb250ZXh0VHlwZXMgPSBiYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgVG9DbGFzcy5kZWZhdWx0UHJvcHMgPSBiYXNlQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcblxuICByZXR1cm4gVG9DbGFzcztcbn07XG5cbnZhciBzZXRQcm9wVHlwZXMgPSBmdW5jdGlvbiBzZXRQcm9wVHlwZXMocHJvcFR5cGVzKSB7XG4gIHJldHVybiBzZXRTdGF0aWMoJ3Byb3BUeXBlcycsIHByb3BUeXBlcyk7XG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG52YXIgY3JlYXRlU2luayA9IGZ1bmN0aW9uIGNyZWF0ZVNpbmsoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoU2luaywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTaW5rKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2luayk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFNpbmsucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMucHJvcHMpO1xuICAgIH07XG5cbiAgICBTaW5rLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGNhbGxiYWNrKG5leHRQcm9wcyk7XG4gICAgfTtcblxuICAgIFNpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2luaztcbiAgfShDb21wb25lbnQpO1xufTtcblxudmFyIGNvbXBvbmVudEZyb21Qcm9wID0gZnVuY3Rpb24gY29tcG9uZW50RnJvbVByb3AocHJvcE5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCQkMSA9IGZ1bmN0aW9uIENvbXBvbmVudCQkMShwcm9wcykge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzW3Byb3BOYW1lXSwgb21pdChwcm9wcywgW3Byb3BOYW1lXSkpO1xuICB9O1xuICBDb21wb25lbnQkJDEuZGlzcGxheU5hbWUgPSAnY29tcG9uZW50RnJvbVByb3AoJyArIHByb3BOYW1lICsgJyknO1xuICByZXR1cm4gQ29tcG9uZW50JCQxO1xufTtcblxudmFyIG5lc3QgPSBmdW5jdGlvbiBuZXN0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgQ29tcG9uZW50cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIENvbXBvbmVudHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgZmFjdG9yaWVzID0gQ29tcG9uZW50cy5tYXAoY3JlYXRlRmFjdG9yeSk7XG4gIHZhciBOZXN0ID0gZnVuY3Rpb24gTmVzdChfcmVmKSB7XG4gICAgdmFyIHByb3BzID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW10pLFxuICAgICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gICAgcmV0dXJuIGZhY3Rvcmllcy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY2hpbGQsIGZhY3RvcnkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzLCBjaGlsZCk7XG4gICAgfSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lcyA9IENvbXBvbmVudHMubWFwKGdldERpc3BsYXlOYW1lKTtcbiAgICBOZXN0LmRpc3BsYXlOYW1lID0gJ25lc3QoJyArIGRpc3BsYXlOYW1lcy5qb2luKCcsICcpICsgJyknO1xuICB9XG5cbiAgcmV0dXJuIE5lc3Q7XG59O1xuXG52YXIgaG9pc3RTdGF0aWNzID0gZnVuY3Rpb24gaG9pc3RTdGF0aWNzKGhpZ2hlck9yZGVyQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBOZXdDb21wb25lbnQgPSBoaWdoZXJPcmRlckNvbXBvbmVudChCYXNlQ29tcG9uZW50KTtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhOZXdDb21wb25lbnQsIEJhc2VDb21wb25lbnQpO1xuICAgIHJldHVybiBOZXdDb21wb25lbnQ7XG4gIH07XG59O1xuXG52YXIgX2NvbmZpZyA9IHtcbiAgZnJvbUVTT2JzZXJ2YWJsZTogbnVsbCxcbiAgdG9FU09ic2VydmFibGU6IG51bGxcbn07XG5cbnZhciBjb25maWd1cmVPYnNlcnZhYmxlID0gZnVuY3Rpb24gY29uZmlndXJlT2JzZXJ2YWJsZShjKSB7XG4gIF9jb25maWcgPSBjO1xufTtcblxudmFyIGNvbmZpZyA9IHtcbiAgZnJvbUVTT2JzZXJ2YWJsZTogZnVuY3Rpb24gZnJvbUVTT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBfY29uZmlnLmZyb21FU09ic2VydmFibGUgPT09ICdmdW5jdGlvbicgPyBfY29uZmlnLmZyb21FU09ic2VydmFibGUob2JzZXJ2YWJsZSkgOiBvYnNlcnZhYmxlO1xuICB9LFxuICB0b0VTT2JzZXJ2YWJsZTogZnVuY3Rpb24gdG9FU09ic2VydmFibGUoc3RyZWFtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBfY29uZmlnLnRvRVNPYnNlcnZhYmxlID09PSAnZnVuY3Rpb24nID8gX2NvbmZpZy50b0VTT2JzZXJ2YWJsZShzdHJlYW0pIDogc3RyZWFtO1xuICB9XG59O1xuXG52YXIgY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWcgPSBmdW5jdGlvbiBjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyhjb25maWckJDEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wc1RvVmRvbSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgaW5oZXJpdHMoQ29tcG9uZW50RnJvbVN0cmVhbSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbXBvbmVudEZyb21TdHJlYW0oKSB7XG4gICAgICAgIHZhciBfY29uZmlnJGZyb21FU09ic2VydmE7XG5cbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb25lbnRGcm9tU3RyZWFtKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgdmRvbTogbnVsbCB9LCBfdGhpcy5wcm9wc0VtaXR0ZXIgPSBjcmVhdGVDaGFuZ2VFbWl0dGVyKCksIF90aGlzLnByb3BzJCA9IGNvbmZpZyQkMS5mcm9tRVNPYnNlcnZhYmxlKChfY29uZmlnJGZyb21FU09ic2VydmEgPSB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciB1bnN1YnNjcmliZSA9IF90aGlzLnByb3BzRW1pdHRlci5saXN0ZW4oZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQocHJvcHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY29uZmlnJGZyb21FU09ic2VydmFbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSwgX2NvbmZpZyRmcm9tRVNPYnNlcnZhKSksIF90aGlzLnZkb20kID0gY29uZmlnJCQxLnRvRVNPYnNlcnZhYmxlKHByb3BzVG9WZG9tKF90aGlzLnByb3BzJCkpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdHJlYW0gb2YgcHJvcHNcblxuXG4gICAgICAvLyBTdHJlYW0gb2YgdmRvbVxuXG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIGNoaWxkIHByb3AgY2hhbmdlcyBzbyB3ZSBrbm93IHdoZW4gdG8gcmUtcmVuZGVyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy52ZG9tJC5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQodmRvbSkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmRvbTogdmRvbSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb3BzRW1pdHRlci5lbWl0KHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29tcG9uZW50RnJvbVN0cmVhbS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIC8vIFJlY2VpdmUgbmV3IHByb3BzIGZyb20gdGhlIG93bmVyXG4gICAgICAgIHRoaXMucHJvcHNFbWl0dGVyLmVtaXQobmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV4dFN0YXRlLnZkb20gIT09IHRoaXMuc3RhdGUudmRvbTtcbiAgICAgIH07XG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIC8vIENhbGwgd2l0aG91dCBhcmd1bWVudHMgdG8gY29tcGxldGUgc3RyZWFtXG4gICAgICAgIHRoaXMucHJvcHNFbWl0dGVyLmVtaXQoKTtcblxuICAgICAgICAvLyBDbGVhbi11cCBzdWJzY3JpcHRpb24gYmVmb3JlIHVuLW1vdW50aW5nXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuXG4gICAgICBDb21wb25lbnRGcm9tU3RyZWFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnZkb207XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29tcG9uZW50RnJvbVN0cmVhbTtcbiAgICB9KENvbXBvbmVudCk7XG4gIH07XG59O1xuXG52YXIgY29tcG9uZW50RnJvbVN0cmVhbSA9IGZ1bmN0aW9uIGNvbXBvbmVudEZyb21TdHJlYW0ocHJvcHNUb1Zkb20pIHtcbiAgcmV0dXJuIGNvbXBvbmVudEZyb21TdHJlYW1XaXRoQ29uZmlnKGNvbmZpZykocHJvcHNUb1Zkb20pO1xufTtcblxudmFyIGlkZW50aXR5JDEgPSBmdW5jdGlvbiBpZGVudGl0eSh0KSB7XG4gIHJldHVybiB0O1xufTtcblxudmFyIG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyA9IGZ1bmN0aW9uIG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyhjb25maWckJDEpIHtcbiAgdmFyIGNvbXBvbmVudEZyb21TdHJlYW0gPSBjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyh7XG4gICAgZnJvbUVTT2JzZXJ2YWJsZTogaWRlbnRpdHkkMSxcbiAgICB0b0VTT2JzZXJ2YWJsZTogaWRlbnRpdHkkMVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICAgIHZhciBmcm9tRVNPYnNlcnZhYmxlID0gY29uZmlnJCQxLmZyb21FU09ic2VydmFibGUsXG4gICAgICAgICAgdG9FU09ic2VydmFibGUgPSBjb25maWckJDEudG9FU09ic2VydmFibGU7XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRGcm9tU3RyZWFtKGZ1bmN0aW9uIChwcm9wcyQpIHtcbiAgICAgICAgdmFyIF9yZWY7XG5cbiAgICAgICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0b0VTT2JzZXJ2YWJsZSh0cmFuc2Zvcm0oZnJvbUVTT2JzZXJ2YWJsZShwcm9wcyQpKSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChjaGlsZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQoZmFjdG9yeShjaGlsZFByb3BzKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSwgX3JlZjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59O1xuXG52YXIgbWFwUHJvcHNTdHJlYW0gPSBmdW5jdGlvbiBtYXBQcm9wc1N0cmVhbSh0cmFuc2Zvcm0pIHtcbiAgdmFyIGhvYyA9IG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyhjb25maWcpKHRyYW5zZm9ybSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ21hcFByb3BzU3RyZWFtJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaG9jO1xufTtcblxudmFyIGNyZWF0ZUV2ZW50SGFuZGxlcldpdGhDb25maWcgPSBmdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnKGNvbmZpZyQkMSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29uZmlnJGZyb21FU09ic2VydmE7XG5cbiAgICB2YXIgZW1pdHRlciA9IGNyZWF0ZUNoYW5nZUVtaXR0ZXIoKTtcbiAgICB2YXIgc3RyZWFtID0gY29uZmlnJCQxLmZyb21FU09ic2VydmFibGUoKF9jb25maWckZnJvbUVTT2JzZXJ2YSA9IHtcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IGVtaXR0ZXIubGlzdGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9jb25maWckZnJvbUVTT2JzZXJ2YVskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX2NvbmZpZyRmcm9tRVNPYnNlcnZhKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmRsZXI6IGVtaXR0ZXIuZW1pdCxcbiAgICAgIHN0cmVhbTogc3RyZWFtXG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVFdmVudEhhbmRsZXIgPSBjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnKGNvbmZpZyk7XG5cbi8vIEhpZ2hlci1vcmRlciBjb21wb25lbnQgaGVscGVyc1xuXG5leHBvcnQgeyBtYXBQcm9wcywgd2l0aFByb3BzLCB3aXRoUHJvcHNPbkNoYW5nZSwgd2l0aEhhbmRsZXJzLCBkZWZhdWx0UHJvcHMsIHJlbmFtZVByb3AsIHJlbmFtZVByb3BzLCBmbGF0dGVuUHJvcCwgd2l0aFN0YXRlLCB3aXRoU3RhdGVIYW5kbGVycywgd2l0aFJlZHVjZXIsIGJyYW5jaCwgcmVuZGVyQ29tcG9uZW50LCByZW5kZXJOb3RoaW5nLCBzaG91bGRVcGRhdGUsIHB1cmUsIG9ubHlVcGRhdGVGb3JLZXlzLCBvbmx5VXBkYXRlRm9yUHJvcFR5cGVzLCB3aXRoQ29udGV4dCwgZ2V0Q29udGV4dCwgbGlmZWN5Y2xlLCB0b0NsYXNzLCBzZXRTdGF0aWMsIHNldFByb3BUeXBlcywgc2V0RGlzcGxheU5hbWUsIGNvbXBvc2UsIGdldERpc3BsYXlOYW1lLCB3cmFwRGlzcGxheU5hbWUsIHNoYWxsb3dFcXVhbCwgaXNDbGFzc0NvbXBvbmVudCwgY3JlYXRlU2luaywgY29tcG9uZW50RnJvbVByb3AsIG5lc3QsIGhvaXN0U3RhdGljcywgY29tcG9uZW50RnJvbVN0cmVhbSwgY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWcsIG1hcFByb3BzU3RyZWFtLCBtYXBQcm9wc1N0cmVhbVdpdGhDb25maWcsIGNyZWF0ZUV2ZW50SGFuZGxlciwgY3JlYXRlRXZlbnRIYW5kbGVyV2l0aENvbmZpZywgY29uZmlndXJlT2JzZXJ2YWJsZSBhcyBzZXRPYnNlcnZhYmxlQ29uZmlnIH07XG4iLCJpbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdpcy1wbGFpbi1vYmplY3QnO1xuaW1wb3J0IFN0eWxpcyBmcm9tICdzdHlsaXMnO1xuaW1wb3J0IF9pbnNlcnRSdWxlUGx1Z2luIGZyb20gJ3N0eWxpcy1ydWxlLXNoZWV0JztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNsb25lRWxlbWVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUkMihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxudmFyIGh5cGhlbmF0ZV8xID0gaHlwaGVuYXRlJDI7XG5cbnZhciBoeXBoZW5hdGUgPSBoeXBoZW5hdGVfMTtcblxudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxudmFyIGh5cGhlbmF0ZVN0eWxlTmFtZV8xID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuXG4vLyBcbnZhciBvYmpUb0NzcyA9IGZ1bmN0aW9uIG9ialRvQ3NzKG9iaiwgcHJldktleSkge1xuICB2YXIgY3NzID0gT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaHVuayA9IG9ialtrZXldO1xuICAgIHJldHVybiBjaHVuayAhPT0gdW5kZWZpbmVkICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSBmYWxzZSAmJiBjaHVuayAhPT0gJyc7XG4gIH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3Qob2JqW2tleV0pKSByZXR1cm4gb2JqVG9Dc3Mob2JqW2tleV0sIGtleSk7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZVN0eWxlTmFtZV8xKGtleSkgKyAnOiAnICsgb2JqW2tleV0gKyAnOyc7XG4gIH0pLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHByZXZLZXkgPyBwcmV2S2V5ICsgJyB7XFxuICAnICsgY3NzICsgJ1xcbn0nIDogY3NzO1xufTtcblxudmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiBmbGF0dGVuKGNodW5rcywgZXhlY3V0aW9uQ29udGV4dCkge1xuICByZXR1cm4gY2h1bmtzLnJlZHVjZShmdW5jdGlvbiAocnVsZVNldCwgY2h1bmspIHtcbiAgICAvKiBSZW1vdmUgZmFsc2V5IHZhbHVlcyAqL1xuICAgIGlmIChjaHVuayA9PT0gdW5kZWZpbmVkIHx8IGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSBmYWxzZSB8fCBjaHVuayA9PT0gJycpIHtcbiAgICAgIHJldHVybiBydWxlU2V0O1xuICAgIH1cbiAgICAvKiBGbGF0dGVuIHJ1bGVTZXQgKi9cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaHVuaykpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQocnVsZVNldCwgZmxhdHRlbihjaHVuaywgZXhlY3V0aW9uQ29udGV4dCkpO1xuICAgIH1cblxuICAgIC8qIEhhbmRsZSBvdGhlciBjb21wb25lbnRzICovXG4gICAgaWYgKGNodW5rLmhhc093blByb3BlcnR5KCdzdHlsZWRDb21wb25lbnRJZCcpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lIG5vdCBzdXJlIGhvdyB0byBtYWtlIHRoaXMgcGFzc1xuICAgICAgcmV0dXJuIFtdLmNvbmNhdChydWxlU2V0LCBbJy4nICsgY2h1bmsuc3R5bGVkQ29tcG9uZW50SWRdKTtcbiAgICB9XG5cbiAgICAvKiBFaXRoZXIgZXhlY3V0ZSBvciBkZWZlciB0aGUgZnVuY3Rpb24gKi9cbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZXhlY3V0aW9uQ29udGV4dCA/IHJ1bGVTZXQuY29uY2F0LmFwcGx5KHJ1bGVTZXQsIGZsYXR0ZW4oW2NodW5rKGV4ZWN1dGlvbkNvbnRleHQpXSwgZXhlY3V0aW9uQ29udGV4dCkpIDogcnVsZVNldC5jb25jYXQoY2h1bmspO1xuICAgIH1cblxuICAgIC8qIEhhbmRsZSBvYmplY3RzICovXG4gICAgcmV0dXJuIHJ1bGVTZXQuY29uY2F0KFxuICAgIC8vICRGbG93Rml4TWUgaGF2ZSB0byBhZGQgJWNoZWNrcyBzb21laG93IHRvIGlzUGxhaW5PYmplY3RcbiAgICBpc1BsYWluT2JqZWN0KGNodW5rKSA/IG9ialRvQ3NzKGNodW5rKSA6IGNodW5rLnRvU3RyaW5nKCkpO1xuICB9LCBbXSk7XG59O1xuXG4vLyBcbi8vIE5PVEU6IFRoaXMgc3R5bGlzIGluc3RhbmNlIGlzIG9ubHkgdXNlZCB0byBzcGxpdCBydWxlcyBmcm9tIFNTUidkIHN0eWxlIHRhZ3NcbnZhciBzdHlsaXNTcGxpdHRlciA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiBmYWxzZSxcbiAga2V5ZnJhbWU6IGZhbHNlLFxuICBwcmVmaXg6IGZhbHNlLFxuICBjb21wcmVzczogZmFsc2UsXG4gIHNlbWljb2xvbjogdHJ1ZVxufSk7XG5cbnZhciBzdHlsaXMgPSBuZXcgU3R5bGlzKHtcbiAgZ2xvYmFsOiBmYWxzZSxcbiAgY2FzY2FkZTogdHJ1ZSxcbiAga2V5ZnJhbWU6IGZhbHNlLFxuICBwcmVmaXg6IHRydWUsXG4gIGNvbXByZXNzOiBmYWxzZSxcbiAgc2VtaWNvbG9uOiBmYWxzZSAvLyBOT1RFOiBUaGlzIG1lYW5zIFwiYXV0b2NvbXBsZXRlIG1pc3Npbmcgc2VtaWNvbG9uc1wiXG59KTtcblxuLy8gV3JhcCBgaW5zZXJ0UnVsZVBsdWdpbiB0byBidWlsZCBhIGxpc3Qgb2YgcnVsZXMsXG4vLyBhbmQgdGhlbiBtYWtlIG91ciBvd24gcGx1Z2luIHRvIHJldHVybiB0aGUgcnVsZXMuIFRoaXNcbi8vIG1ha2VzIGl0IGVhc2llciB0byBob29rIGludG8gdGhlIGV4aXN0aW5nIFNTUiBhcmNoaXRlY3R1cmVcblxudmFyIHBhcnNpbmdSdWxlcyA9IFtdO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgcmV0dXJuUnVsZXNQbHVnaW4gPSBmdW5jdGlvbiByZXR1cm5SdWxlc1BsdWdpbihjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSAtMikge1xuICAgIHZhciBwYXJzZWRSdWxlcyA9IHBhcnNpbmdSdWxlcztcbiAgICBwYXJzaW5nUnVsZXMgPSBbXTtcbiAgICByZXR1cm4gcGFyc2VkUnVsZXM7XG4gIH1cbn07XG5cbnZhciBwYXJzZVJ1bGVzUGx1Z2luID0gX2luc2VydFJ1bGVQbHVnaW4oZnVuY3Rpb24gKHJ1bGUpIHtcbiAgcGFyc2luZ1J1bGVzLnB1c2gocnVsZSk7XG59KTtcblxuc3R5bGlzLnVzZShbcGFyc2VSdWxlc1BsdWdpbiwgcmV0dXJuUnVsZXNQbHVnaW5dKTtcbnN0eWxpc1NwbGl0dGVyLnVzZShbcGFyc2VSdWxlc1BsdWdpbiwgcmV0dXJuUnVsZXNQbHVnaW5dKTtcblxudmFyIHN0cmluZ2lmeVJ1bGVzID0gZnVuY3Rpb24gc3RyaW5naWZ5UnVsZXMocnVsZXMsIHNlbGVjdG9yLCBwcmVmaXgpIHtcbiAgdmFyIGZsYXRDU1MgPSBydWxlcy5qb2luKCcnKS5yZXBsYWNlKC9eXFxzKlxcL1xcLy4qJC9nbSwgJycpOyAvLyByZXBsYWNlIEpTIGNvbW1lbnRzXG5cbiAgdmFyIGNzc1N0ciA9IHNlbGVjdG9yICYmIHByZWZpeCA/IHByZWZpeCArICcgJyArIHNlbGVjdG9yICsgJyB7ICcgKyBmbGF0Q1NTICsgJyB9JyA6IGZsYXRDU1M7XG5cbiAgcmV0dXJuIHN0eWxpcyhwcmVmaXggfHwgIXNlbGVjdG9yID8gJycgOiBzZWxlY3RvciwgY3NzU3RyKTtcbn07XG5cbnZhciBzcGxpdEJ5UnVsZXMgPSBmdW5jdGlvbiBzcGxpdEJ5UnVsZXMoY3NzKSB7XG4gIHJldHVybiBzdHlsaXNTcGxpdHRlcignJywgY3NzKTtcbn07XG5cbi8vIFxuXG5mdW5jdGlvbiBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQpIC8qIDogJWNoZWNrcyAqL3tcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG5cbi8vIFxuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIERFUFJFQ0FURUQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBvbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIHJlbGVhc2UuXG4gKiBJdCB3YXMgbmVlZGVkIHRvIHJlaHlkcmF0ZSBhbGwgc3R5bGUgYmxvY2tzIHByZXBlbmRlZCB0byBjaHVua3MgYmVmb3JlIFJlYWN0XG4gKiB0cmllcyB0byByZWh5ZHJhdGUgaXRzIEhUTUwgc3RyZWFtLiBTaW5jZSB0aGUgbWFzdGVyIFN0eWxlU2hlZXQgd2lsbCBub3cgZGV0ZWN0XG4gKiB0aGUgdXNlIG9mIHN0cmVhbWVkIHN0eWxlIHRhZ3MgYW5kIHdpbGwgcGVyZm9ybSB0aGUgcmVoeWRyYXRpb24gZWFybGllciB3aGVuIG5lZWRlZFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBiZSBuZWVkZWQgYW55bW9yZSAqL1xuZnVuY3Rpb24gY29uc29saWRhdGVTdHJlYW1lZFN0eWxlcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2Fybignc3R5bGVkLWNvbXBvbmVudHMgYXV0b21hdGljYWxseSBkb2VzIHN0cmVhbWluZyBTU1IgcmVoeWRyYXRpb24gbm93LlxcbicgKyAnQ2FsbGluZyBjb25zb2xpZGF0ZVN0cmVhbWVkU3R5bGVzIG1hbnVhbGx5IGlzIG5vIGxvbmdlciBuZWNlc3NhcnkgYW5kIGEgbm9vcCBub3cuXFxuJyArICctIFBsZWFzZSByZW1vdmUgdGhlIGNvbnNvbGlkYXRlU3RyZWFtZWRTdHlsZXMgY2FsbCBmcm9tIHlvdXIgY2xpZW50LicpO1xuICB9XG59XG5cbi8vIFxuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKiBUaGlzIGlzIHRoZSBcImNhcGFjaXR5XCIgb2Ygb3VyIGFscGhhYmV0IGkuZS4gMngyNiBmb3IgYWxsIGxldHRlcnMgcGx1cyB0aGVpciBjYXBpdGFsaXNlZFxuICogY291bnRlcnBhcnRzICovXG52YXIgY2hhcnNMZW5ndGggPSA1MjtcblxuLyogc3RhcnQgYXQgNzUgZm9yICdhJyB1bnRpbCAneicgKDI1KSBhbmQgdGhlbiBzdGFydCBhdCA2NSBmb3IgY2FwaXRhbGlzZWQgbGV0dGVycyAqL1xudmFyIGdldEFscGhhYmV0aWNDaGFyID0gZnVuY3Rpb24gZ2V0QWxwaGFiZXRpY0NoYXIoY29kZSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlICsgKGNvZGUgPiAyNSA/IDM5IDogOTcpKTtcbn07XG5cbi8qIGlucHV0IGEgbnVtYmVyLCB1c3VhbGx5IGEgaGFzaCBhbmQgY29udmVydCBpdCB0byBiYXNlLTUyICovXG52YXIgZ2VuZXJhdGVBbHBoYWJldGljTmFtZSA9IGZ1bmN0aW9uIGdlbmVyYXRlQWxwaGFiZXRpY05hbWUoY29kZSkge1xuICB2YXIgbmFtZSA9ICcnO1xuICB2YXIgeCA9IHZvaWQgMDtcblxuICAvKiBnZXQgYSBjaGFyIGFuZCBkaXZpZGUgYnkgYWxwaGFiZXQtbGVuZ3RoICovXG4gIGZvciAoeCA9IGNvZGU7IHggPiBjaGFyc0xlbmd0aDsgeCA9IE1hdGguZmxvb3IoeCAvIGNoYXJzTGVuZ3RoKSkge1xuICAgIG5hbWUgPSBnZXRBbHBoYWJldGljQ2hhcih4ICUgY2hhcnNMZW5ndGgpICsgbmFtZTtcbiAgfVxuXG4gIHJldHVybiBnZXRBbHBoYWJldGljQ2hhcih4ICUgY2hhcnNMZW5ndGgpICsgbmFtZTtcbn07XG5cbi8vIFxuXG52YXIgaW50ZXJsZWF2ZSA9IChmdW5jdGlvbiAoc3RyaW5ncywgaW50ZXJwb2xhdGlvbnMpIHtcbiAgcmV0dXJuIGludGVycG9sYXRpb25zLnJlZHVjZShmdW5jdGlvbiAoYXJyYXksIGludGVycCwgaSkge1xuICAgIHJldHVybiBhcnJheS5jb25jYXQoaW50ZXJwLCBzdHJpbmdzW2kgKyAxXSk7XG4gIH0sIFtzdHJpbmdzWzBdXSk7XG59KTtcblxuLy8gXG52YXIgY3NzID0gKGZ1bmN0aW9uIChzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZmxhdHRlbihpbnRlcmxlYXZlKHN0cmluZ3MsIGludGVycG9sYXRpb25zKSk7XG59KTtcblxudmFyIHN0cmVhbSA9IHt9XG5cbi8vIFxuXG5cbnZhciBTQ19BVFRSID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52LlNDX0FUVFIgfHwgJ2RhdGEtc3R5bGVkLWNvbXBvbmVudHMnO1xudmFyIFNDX1NUUkVBTV9BVFRSID0gJ2RhdGEtc3R5bGVkLXN0cmVhbWVkJztcbnZhciBDT05URVhUX0tFWSA9ICdfX3N0eWxlZC1jb21wb25lbnRzLXN0eWxlc2hlZXRfXyc7XG5cbnZhciBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hUTUxFbGVtZW50JyBpbiB3aW5kb3c7XG5cbnZhciBESVNBQkxFX1NQRUVEWSA9IHR5cGVvZiBmYWxzZSA9PT0gJ2Jvb2xlYW4nICYmIGZhbHNlIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbi8vIFxudmFyIFNDX0NPTVBPTkVOVF9JRCA9IC9eW15cXFNcXG5dKj9cXC9cXCogc2MtY29tcG9uZW50LWlkOlxccyooXFxTKylcXHMrXFwqXFwvL2dtO1xuXG52YXIgZXh0cmFjdENvbXBzID0gKGZ1bmN0aW9uIChtYXliZUNTUykge1xuICB2YXIgY3NzID0gJycgKyAobWF5YmVDU1MgfHwgJycpOyAvLyBEZWZpbml0ZWx5IGEgc3RyaW5nLCBhbmQgYSBjbG9uZVxuICB2YXIgZXhpc3RpbmdDb21wb25lbnRzID0gW107XG4gIGNzcy5yZXBsYWNlKFNDX0NPTVBPTkVOVF9JRCwgZnVuY3Rpb24gKG1hdGNoLCBjb21wb25lbnRJZCwgbWF0Y2hJbmRleCkge1xuICAgIGV4aXN0aW5nQ29tcG9uZW50cy5wdXNoKHsgY29tcG9uZW50SWQ6IGNvbXBvbmVudElkLCBtYXRjaEluZGV4OiBtYXRjaEluZGV4IH0pO1xuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG4gIHJldHVybiBleGlzdGluZ0NvbXBvbmVudHMubWFwKGZ1bmN0aW9uIChfcmVmLCBpKSB7XG4gICAgdmFyIGNvbXBvbmVudElkID0gX3JlZi5jb21wb25lbnRJZCxcbiAgICAgICAgbWF0Y2hJbmRleCA9IF9yZWYubWF0Y2hJbmRleDtcblxuICAgIHZhciBuZXh0Q29tcCA9IGV4aXN0aW5nQ29tcG9uZW50c1tpICsgMV07XG4gICAgdmFyIGNzc0Zyb21ET00gPSBuZXh0Q29tcCA/IGNzcy5zbGljZShtYXRjaEluZGV4LCBuZXh0Q29tcC5tYXRjaEluZGV4KSA6IGNzcy5zbGljZShtYXRjaEluZGV4KTtcbiAgICByZXR1cm4geyBjb21wb25lbnRJZDogY29tcG9uZW50SWQsIGNzc0Zyb21ET006IGNzc0Zyb21ET00gfTtcbiAgfSk7XG59KTtcblxuLy8gXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UsIG5vLXVuZGVmICovXG5cbnZhciBnZXROb25jZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xufSk7XG5cbi8vIFxuLy8gSGVscGVyIHRvIGNhbGwgYSBnaXZlbiBmdW5jdGlvbiwgb25seSBvbmNlXG52YXIgb25jZSA9IChmdW5jdGlvbiAoY2IpIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cblxuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cblxuXG5cblxuXG5cblxuXG52YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzKSB7XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG4vLyBcbi8qIFRoZXNlIGFyZSBoZWxwZXJzIGZvciB0aGUgU3R5bGVUYWdzIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGluamVjdGVkXG4gKiBydWxlIG5hbWVzIGZvciBlYWNoIChjb21wb25lbnQpIElEIHRoYXQgdGhleSdyZSBrZWVwaW5nIHRyYWNrIG9mLlxuICogVGhleSdyZSBjcnVjaWFsIGZvciBkZXRlY3Rpbmcgd2hldGhlciBhIG5hbWUgaGFzIGFscmVhZHkgYmVlblxuICogaW5qZWN0ZWQuXG4gKiAoVGhpcyBleGNsdWRlcyByZWh5ZHJhdGVkIG5hbWVzKSAqL1xuXG4vKiBhZGRzIGEgbmV3IElEOm5hbWUgcGFpcmluZyB0byBhIG5hbWVzIGRpY3Rpb25hcnkgKi9cbnZhciBhZGROYW1lRm9ySWQgPSBmdW5jdGlvbiBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKSB7XG4gIGlmIChuYW1lKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdmFyIG5hbWVzRm9ySWQgPSBuYW1lc1tpZF0gfHwgKG5hbWVzW2lkXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIG5hbWVzRm9ySWRbbmFtZV0gPSB0cnVlO1xuICB9XG59O1xuXG4vKiByZXNldHMgYW4gSUQgZW50aXJlbHkgYnkgb3ZlcndyaXRpbmcgaXQgaW4gdGhlIGRpY3Rpb25hcnkgKi9cbnZhciByZXNldElkTmFtZXMgPSBmdW5jdGlvbiByZXNldElkTmFtZXMobmFtZXMsIGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufTtcblxuLyogZmFjdG9yeSBmb3IgYSBuYW1lcyBkaWN0aW9uYXJ5IGNoZWNraW5nIHRoZSBleGlzdGFuY2Ugb2YgYW4gSUQ6bmFtZSBwYWlyaW5nICovXG52YXIgaGFzTmFtZUZvcklkID0gZnVuY3Rpb24gaGFzTmFtZUZvcklkKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaWQsIG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZXNbaWRdICE9PSB1bmRlZmluZWQgJiYgbmFtZXNbaWRdW25hbWVdO1xuICB9O1xufTtcblxuLyogc3RyaW5naWZpZXMgbmFtZXMgZm9yIHRoZSBodG1sL2VsZW1lbnQgb3V0cHV0ICovXG52YXIgc3RyaW5naWZ5TmFtZXMgPSBmdW5jdGlvbiBzdHJpbmdpZnlOYW1lcyhuYW1lcykge1xuICB2YXIgc3RyID0gJyc7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yICh2YXIgaWQgaW4gbmFtZXMpIHtcbiAgICBzdHIgKz0gT2JqZWN0LmtleXMobmFtZXNbaWRdKS5qb2luKCcgJykgKyAnICc7XG4gIH1cbiAgcmV0dXJuIHN0ci50cmltKCk7XG59O1xuXG4vKiBjbG9uZXMgdGhlIG5lc3RlZCBuYW1lcyBkaWN0aW9uYXJ5ICovXG52YXIgY2xvbmVOYW1lcyA9IGZ1bmN0aW9uIGNsb25lTmFtZXMobmFtZXMpIHtcbiAgdmFyIGNsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICBmb3IgKHZhciBpZCBpbiBuYW1lcykge1xuICAgIGNsb25lW2lkXSA9IF9leHRlbmRzKHt9LCBuYW1lc1tpZF0pO1xuICB9XG4gIHJldHVybiBjbG9uZTtcbn07XG5cbi8vIFxuLyogVGhlc2UgYXJlIGhlbHBlcnMgdGhhdCBkZWFsIHdpdGggdGhlIGluc2VydFJ1bGUgKGFrYSBzcGVlZHkpIEFQSVxuICogVGhleSBhcmUgdXNlZCBpbiB0aGUgU3R5bGVUYWdzIGFuZCBzcGVjaWZpY2FsbHkgdGhlIHNwZWVkeSB0YWdcbiAqL1xuXG4vKiByZXRyaWV2ZSBhIHNoZWV0IGZvciBhIGdpdmVuIHN0eWxlIHRhZyAqL1xudmFyIHNoZWV0Rm9yVGFnID0gZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHRhZy5zaGVldCkgcmV0dXJuIHRhZy5zaGVldDtcblxuICAvKiBGaXJlZm94IHF1aXJrIHJlcXVpcmVzIHVzIHRvIHN0ZXAgdGhyb3VnaCBhbGwgc3R5bGVzaGVldHMgdG8gZmluZCBvbmUgb3duZWQgYnkgdGhlIGdpdmVuIHRhZyAqL1xuICB2YXIgc2l6ZSA9IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IDEpIHtcbiAgICB2YXIgc2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKHNoZWV0Lm93bmVyTm9kZSA9PT0gdGFnKSByZXR1cm4gc2hlZXQ7XG4gIH1cblxuICAvKiB3ZSBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gZmluZCBhIHRhZyAqL1xuICB0aHJvdyBuZXcgRXJyb3IoKTtcbn07XG5cbi8qIGluc2VydCBhIHJ1bGUgc2FmZWx5IGFuZCByZXR1cm4gd2hldGhlciBpdCB3YXMgYWN0dWFsbHkgaW5qZWN0ZWQgKi9cbnZhciBzYWZlSW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbmRleCkge1xuICAvKiBhYm9ydCBlYXJseSBpZiBjc3NSdWxlIHN0cmluZyBpcyBmYWxzeSAqL1xuICBpZiAoIWNzc1J1bGUpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4SW5kZXggPSBzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICAvKiB1c2UgaW5zZXJ0UnVsZSBhbmQgY2FwIHBhc3NlZCBpbmRleCB3aXRoIG1heEluZGV4IChubyBvZiBjc3NSdWxlcykgKi9cbiAgICBzaGVldC5pbnNlcnRSdWxlKGNzc1J1bGUsIGluZGV4IDw9IG1heEluZGV4ID8gaW5kZXggOiBtYXhJbmRleCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8qIGFueSBlcnJvciBpbmRpY2F0ZXMgYW4gaW52YWxpZCBydWxlICovXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKiBkZWxldGVzIGBzaXplYCBydWxlcyBzdGFydGluZyBmcm9tIGByZW1vdmFsSW5kZXhgICovXG52YXIgZGVsZXRlUnVsZXMgPSBmdW5jdGlvbiBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKSB7XG4gIHZhciBsb3dlckJvdW5kID0gcmVtb3ZhbEluZGV4IC0gc2l6ZTtcbiAgZm9yICh2YXIgaSA9IHJlbW92YWxJbmRleDsgaSA+PSBsb3dlckJvdW5kOyBpIC09IDEpIHtcbiAgICBzaGVldC5kZWxldGVSdWxlKGkpO1xuICB9XG59O1xuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIGZsb3d0eXBlL29iamVjdC10eXBlLWRlbGltaXRlciAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuXG4vKiB0aGlzIGVycm9yIGlzIHVzZWQgZm9yIG1ha2VTdHlsZVRhZyAqL1xudmFyIHBhcmVudE5vZGVVbm1vdW50ZWRFcnIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gJ1xcblRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc25cXCd0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG4nLnRyaW0oKSA6ICcnO1xuXG4vKiB0aGlzIGVycm9yIGlzIHVzZWQgZm9yIHRhZ3MgKi9cbnZhciB0aHJvd0Nsb25lVGFnRXJyID0gZnVuY3Rpb24gdGhyb3dDbG9uZVRhZ0VycigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAnXFxuVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG4nLnRyaW0oKSA6ICcnKTtcbn07XG5cbi8qIHRoaXMgbWFya2VyIHNlcGFyYXRlcyBjb21wb25lbnQgc3R5bGVzIGFuZCBpcyBpbXBvcnRhbnQgZm9yIHJlaHlkcmF0aW9uICovXG52YXIgbWFrZVRleHRNYXJrZXIgPSBmdW5jdGlvbiBtYWtlVGV4dE1hcmtlcihpZCkge1xuICByZXR1cm4gJ1xcbi8qIHNjLWNvbXBvbmVudC1pZDogJyArIGlkICsgJyAqL1xcbic7XG59O1xuXG4vKiBhZGQgdXAgYWxsIG51bWJlcnMgaW4gYXJyYXkgdXAgdW50aWwgYW5kIGluY2x1ZGluZyB0aGUgaW5kZXggKi9cbnZhciBhZGRVcFVudGlsSW5kZXggPSBmdW5jdGlvbiBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIGluZGV4KSB7XG4gIHZhciB0b3RhbFVwVG9JbmRleCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IGluZGV4OyBpICs9IDEpIHtcbiAgICB0b3RhbFVwVG9JbmRleCArPSBzaXplc1tpXTtcbiAgfVxuXG4gIHJldHVybiB0b3RhbFVwVG9JbmRleDtcbn07XG5cbi8qIGNyZWF0ZSBhIG5ldyBzdHlsZSB0YWcgYWZ0ZXIgbGFzdEVsICovXG52YXIgbWFrZVN0eWxlVGFnID0gZnVuY3Rpb24gbWFrZVN0eWxlVGFnKHRhcmdldCwgdGFnRWwsIGluc2VydEJlZm9yZSkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfQVRUUiwgJycpO1xuXG4gIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gIGlmIChub25jZSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cblxuICAvKiBXb3JrIGFyb3VuZCBpbnNlcnRSdWxlIHF1aXJrIGluIEVkZ2VIVE1MICovXG4gIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG5cbiAgaWYgKHRhcmdldCAmJiAhdGFnRWwpIHtcbiAgICAvKiBBcHBlbmQgdG8gdGFyZ2V0IHdoZW4gbm8gcHJldmlvdXMgZWxlbWVudCB3YXMgcGFzc2VkICovXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRhZ0VsIHx8ICF0YXJnZXQgfHwgIXRhZ0VsLnBhcmVudE5vZGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwYXJlbnROb2RlVW5tb3VudGVkRXJyKTtcbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgbmV3IHN0eWxlIHRhZyBhZnRlciB0aGUgcHJldmlvdXMgb25lICovXG4gICAgdGFnRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIGluc2VydEJlZm9yZSA/IHRhZ0VsIDogdGFnRWwubmV4dFNpYmxpbmcpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufTtcblxuLyogdGFrZXMgYSBjc3MgZmFjdG9yeSBmdW5jdGlvbiBhbmQgb3V0cHV0cyBhbiBodG1sIHN0eWxlZCB0YWcgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0h0bWxUYWcgPSBmdW5jdGlvbiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhZGRpdGlvbmFsQXR0cnMpIHtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIHZhciBhdHRycyA9IFtub25jZSAmJiAnbm9uY2U9XCInICsgbm9uY2UgKyAnXCInLCBTQ19BVFRSICsgJz1cIicgKyBzdHJpbmdpZnlOYW1lcyhuYW1lcykgKyAnXCInLCBhZGRpdGlvbmFsQXR0cnNdO1xuXG4gICAgdmFyIGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICByZXR1cm4gJzxzdHlsZSAnICsgaHRtbEF0dHIgKyAnPicgKyBjc3MoKSArICc8L3N0eWxlPic7XG4gIH07XG59O1xuXG4vKiB0YWtlcyBhIGNzcyBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBvdXRwdXRzIGFuIGVsZW1lbnQgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0VsZW1lbnQgPSBmdW5jdGlvbiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzO1xuXG4gICAgdmFyIHByb3BzID0gKF9wcm9wcyA9IHt9LCBfcHJvcHNbU0NfQVRUUl0gPSBzdHJpbmdpZnlOYW1lcyhuYW1lcyksIF9wcm9wcyk7XG5cbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcHJvcHMubm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogY3NzKCkgfSB9KSk7XG4gIH07XG59O1xuXG52YXIgZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5ID0gZnVuY3Rpb24gZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFya2Vycyk7XG4gIH07XG59O1xuXG4vKiBzcGVlZHkgdGFncyB1dGlsaXNlIGluc2VydFJ1bGUgKi9cbnZhciBtYWtlU3BlZWR5VGFnID0gZnVuY3Rpb24gbWFrZVNwZWVkeVRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbWFya2VycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzaXplcyA9IFtdO1xuXG4gIHZhciBleHRyYWN0SW1wb3J0ID0gZ2V0SW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkO1xuICAvKiBpbmRpY2F0ZXMgd2h0aGVyIGdldEltcG9ydFJ1bGVUYWcgd2FzIGNhbGxlZCAqL1xuICB2YXIgdXNlZEltcG9ydFJ1bGVUYWcgPSBmYWxzZTtcblxuICB2YXIgaW5zZXJ0TWFya2VyID0gZnVuY3Rpb24gaW5zZXJ0TWFya2VyKGlkKSB7XG4gICAgdmFyIHByZXYgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF0gPSBzaXplcy5sZW5ndGg7XG4gICAgc2l6ZXMucHVzaCgwKTtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcbiAgICByZXR1cm4gbWFya2VyO1xuICB9O1xuXG4gIHZhciBpbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBtYXJrZXIgPSBpbnNlcnRNYXJrZXIoaWQpO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgaW5zZXJ0SW5kZXggPSBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIG1hcmtlcik7XG5cbiAgICB2YXIgaW5qZWN0ZWRSdWxlcyA9IDA7XG4gICAgdmFyIGltcG9ydFJ1bGVzID0gW107XG4gICAgdmFyIGNzc1J1bGVzU2l6ZSA9IGNzc1J1bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3NzUnVsZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBjc3NSdWxlID0gY3NzUnVsZXNbaV07XG4gICAgICB2YXIgbWF5SGF2ZUltcG9ydCA9IGV4dHJhY3RJbXBvcnQ7IC8qIEBpbXBvcnQgcnVsZXMgYXJlIHJlb3JkZXJlZCB0byBhcHBlYXIgZmlyc3QgKi9cbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIGNzc1J1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKGNzc1J1bGUpO1xuICAgICAgfSBlbHNlIGlmIChzYWZlSW5zZXJ0UnVsZShzaGVldCwgY3NzUnVsZSwgaW5zZXJ0SW5kZXggKyBpbmplY3RlZFJ1bGVzKSkge1xuICAgICAgICBtYXlIYXZlSW1wb3J0ID0gZmFsc2U7XG4gICAgICAgIGluamVjdGVkUnVsZXMgKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiBpbXBvcnRSdWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB1c2VkSW1wb3J0UnVsZVRhZyA9IHRydWU7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkuaW5zZXJ0UnVsZXMoaWQgKyAnLWltcG9ydCcsIGltcG9ydFJ1bGVzKTtcbiAgICB9XG5cbiAgICBzaXplc1ttYXJrZXJdICs9IGluamVjdGVkUnVsZXM7IC8qIGFkZCB1cCBubyBvZiBpbmplY3RlZCBydWxlcyAqL1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgcmVtb3ZhbEluZGV4ID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpO1xuICAgIGRlbGV0ZVJ1bGVzKHNoZWV0LCByZW1vdmFsSW5kZXgsIHNpemUpO1xuICAgIHNpemVzW21hcmtlcl0gPSAwO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgdXNlZEltcG9ydFJ1bGVUYWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5yZW1vdmVSdWxlcyhpZCArICctaW1wb3J0Jyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIF9zaGVldEZvclRhZyA9IHNoZWV0Rm9yVGFnKGVsKSxcbiAgICAgICAgY3NzUnVsZXMgPSBfc2hlZXRGb3JUYWcuY3NzUnVsZXM7XG5cbiAgICB2YXIgc3RyID0gJyc7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHN0ciArPSBtYWtlVGV4dE1hcmtlcihpZCk7XG4gICAgICB2YXIgZW5kID0gbWFya2Vyc1tpZF0gKyBpO1xuICAgICAgZm9yICg7IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gY3NzUnVsZXNbaV0uY3NzVGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3R5bGVUYWc6IGVsLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIGNzczogY3NzLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKSxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgY2xvbmU6IHRocm93Q2xvbmVUYWdFcnJcbiAgfTtcbn07XG5cbnZhciBtYWtlQnJvd3NlclRhZyA9IGZ1bmN0aW9uIG1ha2VCcm93c2VyVGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKSB7XG4gIHZhciBuYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBtYXJrZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICB2YXIgZXh0cmFjdEltcG9ydCA9IGdldEltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZDtcbiAgdmFyIG1ha2VUZXh0Tm9kZSA9IGZ1bmN0aW9uIG1ha2VUZXh0Tm9kZShpZCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtYWtlVGV4dE1hcmtlcihpZCkpO1xuICB9O1xuXG4gIC8qIGluZGljYXRlcyB3aHRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzW2lkXSA9IG1ha2VUZXh0Tm9kZShpZCk7XG4gICAgZWwuYXBwZW5kQ2hpbGQobWFya2VyKTtcbiAgICBuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJldHVybiBtYXJrZXI7XG4gIH07XG5cbiAgdmFyIGluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIG1hcmtlciA9IGluc2VydE1hcmtlcihpZCk7XG4gICAgdmFyIGltcG9ydFJ1bGVzID0gW107XG4gICAgdmFyIGNzc1J1bGVzU2l6ZSA9IGNzc1J1bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3NzUnVsZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBydWxlID0gY3NzUnVsZXNbaV07XG4gICAgICB2YXIgbWF5SGF2ZUltcG9ydCA9IGV4dHJhY3RJbXBvcnQ7XG4gICAgICBpZiAobWF5SGF2ZUltcG9ydCAmJiBydWxlLmluZGV4T2YoJ0BpbXBvcnQnKSAhPT0gLTEpIHtcbiAgICAgICAgaW1wb3J0UnVsZXMucHVzaChydWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heUhhdmVJbXBvcnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IGkgPT09IGNzc1J1bGVzU2l6ZSAtIDEgPyAnJyA6ICcgJztcbiAgICAgICAgbWFya2VyLmFwcGVuZERhdGEoJycgKyBydWxlICsgc2VwYXJhdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIGltcG9ydFJ1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHVzZWRJbXBvcnRSdWxlVGFnID0gdHJ1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5pbnNlcnRSdWxlcyhpZCArICctaW1wb3J0JywgaW1wb3J0UnVsZXMpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVtb3ZlUnVsZXMgPSBmdW5jdGlvbiByZW1vdmVSdWxlcyhpZCkge1xuICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAobWFya2VyID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIC8qIGNyZWF0ZSBuZXcgZW1wdHkgdGV4dCBub2RlIGFuZCByZXBsYWNlIHRoZSBjdXJyZW50IG9uZSAqL1xuICAgIHZhciBuZXdNYXJrZXIgPSBtYWtlVGV4dE5vZGUoaWQpO1xuICAgIGVsLnJlcGxhY2VDaGlsZChuZXdNYXJrZXIsIG1hcmtlcik7XG4gICAgbWFya2Vyc1tpZF0gPSBuZXdNYXJrZXI7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiB1c2VkSW1wb3J0UnVsZVRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLnJlbW92ZVJ1bGVzKGlkICsgJy1pbXBvcnQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHN0ciArPSBtYXJrZXJzW2lkXS5kYXRhO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3R5bGVUYWc6IGVsLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIGNzczogY3NzLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKSxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgY2xvbmU6IHRocm93Q2xvbmVUYWdFcnJcbiAgfTtcbn07XG5cbnZhciBtYWtlU2VydmVyVGFnSW50ZXJuYWwgPSBmdW5jdGlvbiBtYWtlU2VydmVyVGFnSW50ZXJuYWwobmFtZXNBcmcsIG1hcmtlcnNBcmcpIHtcbiAgdmFyIG5hbWVzID0gbmFtZXNBcmcgPT09IHVuZGVmaW5lZCA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiBuYW1lc0FyZztcbiAgdmFyIG1hcmtlcnMgPSBtYXJrZXJzQXJnID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbWFya2Vyc0FyZztcblxuICB2YXIgaW5zZXJ0TWFya2VyID0gZnVuY3Rpb24gaW5zZXJ0TWFya2VyKGlkKSB7XG4gICAgdmFyIHByZXYgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya2Vyc1tpZF0gPSBbJyddO1xuICB9O1xuXG4gIHZhciBpbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBtYXJrZXIgPSBpbnNlcnRNYXJrZXIoaWQpO1xuICAgIG1hcmtlclswXSArPSBjc3NSdWxlcy5qb2luKCcgJyk7XG4gICAgYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJ1bGVzID0gZnVuY3Rpb24gcmVtb3ZlUnVsZXMoaWQpIHtcbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgbWFya2VyWzBdID0gJyc7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG4gIH07XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHZhciBjc3NGb3JJZCA9IG1hcmtlcnNbaWRdWzBdO1xuICAgICAgaWYgKGNzc0ZvcklkKSB7XG4gICAgICAgIHN0ciArPSBtYWtlVGV4dE1hcmtlcihpZCkgKyBjc3NGb3JJZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICB2YXIgY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgbmFtZXNDbG9uZSA9IGNsb25lTmFtZXMobmFtZXMpO1xuICAgIHZhciBtYXJrZXJzQ2xvbmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIG1hcmtlcnNDbG9uZVtpZF0gPSBbbWFya2Vyc1tpZF1bMF1dO1xuICAgIH1cblxuICAgIHJldHVybiBtYWtlU2VydmVyVGFnSW50ZXJuYWwobmFtZXNDbG9uZSwgbWFya2Vyc0Nsb25lKTtcbiAgfTtcblxuICB2YXIgdGFnID0ge1xuICAgIHN0eWxlVGFnOiBudWxsLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIGNzczogY3NzLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKSxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgY2xvbmU6IGNsb25lXG4gIH07XG5cbiAgcmV0dXJuIHRhZztcbn07XG5cbnZhciBtYWtlU2VydmVyVGFnID0gZnVuY3Rpb24gbWFrZVNlcnZlclRhZygpIHtcbiAgcmV0dXJuIG1ha2VTZXJ2ZXJUYWdJbnRlcm5hbCgpO1xufTtcblxudmFyIG1ha2VUYWcgPSBmdW5jdGlvbiBtYWtlVGFnKHRhcmdldCwgdGFnRWwsIGZvcmNlU2VydmVyLCBpbnNlcnRCZWZvcmUsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgaWYgKElTX0JST1dTRVIgJiYgIWZvcmNlU2VydmVyKSB7XG4gICAgdmFyIGVsID0gbWFrZVN0eWxlVGFnKHRhcmdldCwgdGFnRWwsIGluc2VydEJlZm9yZSk7XG4gICAgaWYgKERJU0FCTEVfU1BFRURZKSB7XG4gICAgICByZXR1cm4gbWFrZUJyb3dzZXJUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFrZVNwZWVkeVRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VTZXJ2ZXJUYWcoKTtcbn07XG5cbi8qIHdyYXBzIGEgZ2l2ZW4gdGFnIHNvIHRoYXQgcmVoeWRyYXRpb24gaXMgcGVyZm9ybWVkIG9uY2Ugd2hlbiBuZWNlc3NhcnkgKi9cbnZhciBtYWtlUmVoeWRyYXRpb25UYWcgPSBmdW5jdGlvbiBtYWtlUmVoeWRyYXRpb25UYWcodGFnLCBlbHMsIGV4dHJhY3RlZCwgbmFtZXMsIGltbWVkaWF0ZVJlaHlkcmF0aW9uKSB7XG4gIC8qIHJlaHlkcmF0aW9uIGZ1bmN0aW9uIHRoYXQgYWRkcyBhbGwgcnVsZXMgdG8gdGhlIG5ldyB0YWcgKi9cbiAgdmFyIHJlaHlkcmF0ZSA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIC8qIGFkZCBhbGwgZXh0cmFjdGVkIGNvbXBvbmVudHMgdG8gdGhlIG5ldyB0YWcgKi9cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHJhY3RlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIF9leHRyYWN0ZWQkaSA9IGV4dHJhY3RlZFtpXSxcbiAgICAgICAgICBjb21wb25lbnRJZCA9IF9leHRyYWN0ZWQkaS5jb21wb25lbnRJZCxcbiAgICAgICAgICBjc3NGcm9tRE9NID0gX2V4dHJhY3RlZCRpLmNzc0Zyb21ET007XG5cbiAgICAgIHZhciBjc3NSdWxlcyA9IHNwbGl0QnlSdWxlcyhjc3NGcm9tRE9NKTtcbiAgICAgIHRhZy5pbnNlcnRSdWxlcyhjb21wb25lbnRJZCwgY3NzUnVsZXMpO1xuICAgIH1cblxuICAgIC8qIHJlbW92ZSBvbGQgSFRNTFN0eWxlRWxlbWVudHMsIHNpbmNlIHRoZXkgaGF2ZSBiZWVuIHJlaHlkcmF0ZWQgKi9cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZWxzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgdmFyIGVsID0gZWxzW19pXTtcbiAgICAgIGlmIChlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGltbWVkaWF0ZVJlaHlkcmF0aW9uKSByZWh5ZHJhdGUoKTtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIHRhZywge1xuICAgIC8qIGFkZCByZWh5ZHJhdGlvbiBob29rIHRvIGluc2VydGlvbiBtZXRob2RzICovXG4gICAgaW5zZXJ0TWFya2VyOiBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICAgIHJlaHlkcmF0ZSgpO1xuICAgICAgcmV0dXJuIHRhZy5pbnNlcnRNYXJrZXIoaWQpO1xuICAgIH0sXG4gICAgaW5zZXJ0UnVsZXM6IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgICAgcmVoeWRyYXRlKCk7XG4gICAgICByZXR1cm4gdGFnLmluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIFxuXG4vKiBkZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbXBvbmVudHMgYmVmb3JlIHRhZ3MgYXJlIHNoYXJkZWQgKi9cbnZhciBNQVhfU0laRSA9IHZvaWQgMDtcbmlmIChJU19CUk9XU0VSKSB7XG4gIC8qIGluIHNwZWVkeSBtb2RlIHdlIGNhbiBrZWVwIGEgbG90IG1vcmUgcnVsZXMgaW4gYSBzaGVldCBiZWZvcmUgYSBzbG93ZG93biBjYW4gYmUgZXhwZWN0ZWQgKi9cbiAgTUFYX1NJWkUgPSBESVNBQkxFX1NQRUVEWSA/IDQwIDogMTAwMDtcbn0gZWxzZSB7XG4gIC8qIGZvciBzZXJ2ZXJzIHdlIGRvIG5vdCBuZWVkIHRvIHNoYXJkIGF0IGFsbCAqL1xuICBNQVhfU0laRSA9IC0xO1xufVxuXG52YXIgc2hlZXRSdW5uaW5nSWQgPSAwO1xudmFyIG1hc3RlciA9IHZvaWQgMDtcblxudmFyIFN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG4gIC8qIGEgbWFwIGZyb20gaWRzIHRvIHRhZ3MgKi9cbiAgLyogZGVmZXJyZWQgcnVsZXMgZm9yIGEgZ2l2ZW4gaWQgKi9cbiAgLyogdGhpcyBpcyB1c2VkIGZvciBub3QgcmVpbmplY3RpbmcgcnVsZXMgdmlhIGhhc05hbWVGb3JJZCgpICovXG4gIC8qIHdoZW4gcnVsZXMgZm9yIGFuIGlkIGFyZSByZW1vdmVkIHVzaW5nIHJlbW92ZSgpIHdlIGhhdmUgdG8gaWdub3JlIHJlaHlkcmF0ZWROYW1lcyBmb3IgaXQgKi9cbiAgLyogYSBsaXN0IG9mIHRhZ3MgYmVsb25naW5nIHRvIHRoaXMgU3R5bGVTaGVldCAqL1xuICAvKiBhIHRhZyBmb3IgaW1wb3J0IHJ1bGVzICovXG4gIC8qIGN1cnJlbnQgY2FwYWNpdHkgdW50aWwgYSBuZXcgdGFnIG11c3QgYmUgY3JlYXRlZCAqL1xuICAvKiBjaGlsZHJlbiAoYWthIGNsb25lcykgb2YgdGhpcyBTdHlsZVNoZWV0IGluaGVyaXRpbmcgYWxsIGFuZCBmdXR1cmUgaW5qZWN0aW9ucyAqL1xuXG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IElTX0JST1dTRVIgPyBkb2N1bWVudC5oZWFkIDogbnVsbDtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXQpO1xuXG4gICAgdGhpcy5nZXRJbXBvcnRSdWxlVGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGltcG9ydFJ1bGVUYWcgPSBfdGhpcy5pbXBvcnRSdWxlVGFnO1xuXG4gICAgICBpZiAoaW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBpbXBvcnRSdWxlVGFnO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlyc3RUYWcgPSBfdGhpcy50YWdzWzBdO1xuICAgICAgdmFyIGluc2VydEJlZm9yZSA9IHRydWU7XG5cbiAgICAgIHJldHVybiBfdGhpcy5pbXBvcnRSdWxlVGFnID0gbWFrZVRhZyhfdGhpcy50YXJnZXQsIGZpcnN0VGFnID8gZmlyc3RUYWcuc3R5bGVUYWcgOiBudWxsLCBfdGhpcy5mb3JjZVNlcnZlciwgaW5zZXJ0QmVmb3JlKTtcbiAgICB9O1xuXG4gICAgdGhpcy5pZCA9IHNoZWV0UnVubmluZ0lkICs9IDE7XG4gICAgdGhpcy5zZWFsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZvcmNlU2VydmVyID0gZm9yY2VTZXJ2ZXI7XG4gICAgdGhpcy50YXJnZXQgPSBmb3JjZVNlcnZlciA/IG51bGwgOiB0YXJnZXQ7XG4gICAgdGhpcy50YWdNYXAgPSB7fTtcbiAgICB0aGlzLmRlZmVycmVkID0ge307XG4gICAgdGhpcy5yZWh5ZHJhdGVkTmFtZXMgPSB7fTtcbiAgICB0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lcyA9IHt9O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY2FwYWNpdHkgPSAxO1xuICAgIHRoaXMuY2xvbmVzID0gW107XG4gIH1cblxuICAvKiByZWh5ZHJhdGUgYWxsIFNTUidkIHN0eWxlIHRhZ3MgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnJlaHlkcmF0ZSA9IGZ1bmN0aW9uIHJlaHlkcmF0ZSgpIHtcbiAgICBpZiAoIUlTX0JST1dTRVIgfHwgdGhpcy5mb3JjZVNlcnZlcikge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGVscyA9IFtdO1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIHZhciBleHRyYWN0ZWQgPSBbXTtcbiAgICB2YXIgaXNTdHJlYW1lZCA9IGZhbHNlO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIG9mIG91ciBTU1Igc3R5bGUgZWxlbWVudHMgZnJvbSB0aGUgRE9NICovXG4gICAgdmFyIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbJyArIFNDX0FUVFIgKyAnXScpO1xuICAgIHZhciBub2Rlc1NpemUgPSBub2Rlcy5sZW5ndGg7XG5cbiAgICAvKiBhYm9ydCByZWh5ZHJhdGlvbiBpZiBubyBwcmV2aW91cyBzdHlsZSB0YWdzIHdlcmUgZm91bmQgKi9cbiAgICBpZiAobm9kZXNTaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzU2l6ZTsgaSArPSAxKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lOiBXZSBjYW4gdHJ1c3QgdGhhdCBhbGwgZWxlbWVudHMgaW4gdGhpcyBxdWVyeSBhcmUgc3R5bGUgZWxlbWVudHNcbiAgICAgIHZhciBlbCA9IG5vZGVzW2ldO1xuXG4gICAgICAvKiBjaGVjayBpZiBzdHlsZSB0YWcgaXMgYSBzdHJlYW1lZCB0YWcgKi9cbiAgICAgIGlzU3RyZWFtZWQgPSAhIWVsLmdldEF0dHJpYnV0ZShTQ19TVFJFQU1fQVRUUikgfHwgaXNTdHJlYW1lZDtcblxuICAgICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBuYW1lcyAqL1xuICAgICAgdmFyIGVsTmFtZXMgPSAoZWwuZ2V0QXR0cmlidXRlKFNDX0FUVFIpIHx8ICcnKS50cmltKCkuc3BsaXQoL1xccysvKTtcbiAgICAgIHZhciBlbE5hbWVzU2l6ZSA9IGVsTmFtZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbE5hbWVzU2l6ZTsgaiArPSAxKSB7XG4gICAgICAgIHZhciBuYW1lID0gZWxOYW1lc1tqXTtcbiAgICAgICAgLyogYWRkIHJlaHlkcmF0ZWQgbmFtZSB0byBzaGVldCB0byBhdm9pZCByZWFkZGluZyBzdHlsZXMgKi9cbiAgICAgICAgdGhpcy5yZWh5ZHJhdGVkTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBuYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgfVxuXG4gICAgICAvKiBleHRyYWN0IGFsbCBjb21wb25lbnRzIGFuZCB0aGVpciBDU1MgKi9cbiAgICAgIGV4dHJhY3RlZCA9IGV4dHJhY3RlZC5jb25jYXQoZXh0cmFjdENvbXBzKGVsLnRleHRDb250ZW50KSk7XG4gICAgICAvKiBzdG9yZSBvcmlnaW5hbCBIVE1MU3R5bGVFbGVtZW50ICovXG4gICAgICBlbHMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgLyogYWJvcnQgcmVoeWRyYXRpb24gaWYgbm90aGluZyB3YXMgZXh0cmFjdGVkICovXG4gICAgdmFyIGV4dHJhY3RlZFNpemUgPSBleHRyYWN0ZWQubGVuZ3RoO1xuICAgIGlmIChleHRyYWN0ZWRTaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKiBjcmVhdGUgYSB0YWcgdG8gYmUgdXNlZCBmb3IgcmVoeWRyYXRpb24gKi9cbiAgICB2YXIgdGFnID0gdGhpcy5tYWtlVGFnKG51bGwpO1xuICAgIHZhciByZWh5ZHJhdGlvblRhZyA9IG1ha2VSZWh5ZHJhdGlvblRhZyh0YWcsIGVscywgZXh0cmFjdGVkLCBuYW1lcywgaXNTdHJlYW1lZCk7XG5cbiAgICAvKiByZXNldCBjYXBhY2l0eSBhbmQgYWRqdXN0IE1BWF9TSVpFIGJ5IHRoZSBpbml0aWFsIHNpemUgb2YgdGhlIHJlaHlkcmF0aW9uICovXG4gICAgdGhpcy5jYXBhY2l0eSA9IE1hdGgubWF4KDEsIE1BWF9TSVpFIC0gZXh0cmFjdGVkU2l6ZSk7XG4gICAgdGhpcy50YWdzLnB1c2gocmVoeWRyYXRpb25UYWcpO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBpZHMgKi9cbiAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgZXh0cmFjdGVkU2l6ZTsgX2ogKz0gMSkge1xuICAgICAgdGhpcy50YWdNYXBbZXh0cmFjdGVkW19qXS5jb21wb25lbnRJZF0gPSByZWh5ZHJhdGlvblRhZztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKiByZXRyaWV2ZSBhIFwibWFzdGVyXCIgaW5zdGFuY2Ugb2YgU3R5bGVTaGVldCB3aGljaCBpcyB0eXBpY2FsbHkgdXNlZCB3aGVuIG5vIG90aGVyIGlzIGF2YWlsYWJsZVxuICAgKiBUaGUgbWFzdGVyIFN0eWxlU2hlZXQgaXMgdGFyZ2V0ZWQgYnkgaW5qZWN0R2xvYmFsLCBrZXlmcmFtZXMsIGFuZCBjb21wb25lbnRzIG91dHNpZGUgb2YgYW55XG4gICAgKiBTdHlsZVNoZWV0TWFuYWdlcidzIGNvbnRleHQgKi9cblxuXG4gIC8qIHJlc2V0IHRoZSBpbnRlcm5hbCBcIm1hc3RlclwiIGluc3RhbmNlICovXG4gIFN0eWxlU2hlZXQucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgbWFzdGVyID0gbmV3IFN0eWxlU2hlZXQodW5kZWZpbmVkLCBmb3JjZVNlcnZlcikucmVoeWRyYXRlKCk7XG4gIH07XG5cbiAgLyogYWRkcyBcImNoaWxkcmVuXCIgdG8gdGhlIFN0eWxlU2hlZXQgdGhhdCBpbmhlcml0IGFsbCBvZiB0aGUgcGFyZW50cycgcnVsZXNcbiAgICogd2hpbGUgdGhlaXIgb3duIHJ1bGVzIGRvIG5vdCBhZmZlY3QgdGhlIHBhcmVudCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh0aGlzLnRhcmdldCwgdGhpcy5mb3JjZVNlcnZlcik7XG4gICAgLyogYWRkIHRvIGNsb25lIGFycmF5ICovXG4gICAgdGhpcy5jbG9uZXMucHVzaChzaGVldCk7XG5cbiAgICAvKiBjbG9uZSBhbGwgdGFncyAqL1xuICAgIHNoZWV0LnRhZ3MgPSB0aGlzLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHZhciBpZHMgPSB0YWcuZ2V0SWRzKCk7XG4gICAgICB2YXIgbmV3VGFnID0gdGFnLmNsb25lKCk7XG5cbiAgICAgIC8qIHJlY29uc3RydWN0IHRhZ01hcCAqL1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc2hlZXQudGFnTWFwW2lkc1tpXV0gPSBuZXdUYWc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdUYWc7XG4gICAgfSk7XG5cbiAgICAvKiBjbG9uZSBvdGhlciBtYXBzICovXG4gICAgc2hlZXQucmVoeWRyYXRlZE5hbWVzID0gX2V4dGVuZHMoe30sIHRoaXMucmVoeWRyYXRlZE5hbWVzKTtcbiAgICBzaGVldC5kZWZlcnJlZCA9IF9leHRlbmRzKHt9LCB0aGlzLmRlZmVycmVkKTtcblxuICAgIHJldHVybiBzaGVldDtcbiAgfTtcblxuICAvKiBmb3JjZSBTdHlsZVNoZWV0IHRvIGNyZWF0ZSBhIG5ldyB0YWcgb24gdGhlIG5leHQgaW5qZWN0aW9uICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5zZWFsQWxsVGFncyA9IGZ1bmN0aW9uIHNlYWxBbGxUYWdzKCkge1xuICAgIHRoaXMuY2FwYWNpdHkgPSAxO1xuICAgIHRoaXMuc2VhbGVkID0gdHJ1ZTtcbiAgfTtcblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5tYWtlVGFnID0gZnVuY3Rpb24gbWFrZVRhZyQkMSh0YWcpIHtcbiAgICB2YXIgbGFzdEVsID0gdGFnID8gdGFnLnN0eWxlVGFnIDogbnVsbDtcbiAgICB2YXIgaW5zZXJ0QmVmb3JlID0gZmFsc2U7XG5cbiAgICByZXR1cm4gbWFrZVRhZyh0aGlzLnRhcmdldCwgbGFzdEVsLCB0aGlzLmZvcmNlU2VydmVyLCBpbnNlcnRCZWZvcmUsIHRoaXMuZ2V0SW1wb3J0UnVsZVRhZyk7XG4gIH07XG5cbiAgLyogZ2V0IGEgdGFnIGZvciBhIGdpdmVuIGNvbXBvbmVudElkLCBhc3NpZ24gdGhlIGNvbXBvbmVudElkIHRvIG9uZSwgb3Igc2hhcmQgKi9cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0VGFnRm9ySWQgPSBmdW5jdGlvbiBnZXRUYWdGb3JJZChpZCkge1xuICAgIC8qIHNpbXBseSByZXR1cm4gYSB0YWcsIHdoZW4gdGhlIGNvbXBvbmVudElkIHdhcyBhbHJlYWR5IGFzc2lnbmVkIG9uZSAqL1xuICAgIHZhciBwcmV2ID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQgJiYgIXRoaXMuc2VhbGVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIC8qIHNoYXJkIChjcmVhdGUgYSBuZXcgdGFnKSBpZiB0aGUgdGFnIGlzIGV4aGF1c3RlZCAoU2VlIE1BWF9TSVpFKSAqL1xuICAgIHRoaXMuY2FwYWNpdHkgLT0gMTtcbiAgICBpZiAodGhpcy5jYXBhY2l0eSA9PT0gMCkge1xuICAgICAgdGhpcy5jYXBhY2l0eSA9IE1BWF9TSVpFO1xuICAgICAgdGhpcy5zZWFsZWQgPSBmYWxzZTtcbiAgICAgIHRhZyA9IHRoaXMubWFrZVRhZyh0YWcpO1xuICAgICAgdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdID0gdGFnO1xuICB9O1xuXG4gIC8qIG1haW5seSBmb3IgaW5qZWN0R2xvYmFsIHRvIGNoZWNrIGZvciBpdHMgaWQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmhhc0lkID0gZnVuY3Rpb24gaGFzSWQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdICE9PSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLyogY2FjaGluZyBsYXllciBjaGVja2luZyBpZCtuYW1lIHRvIGFscmVhZHkgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgdGFnIGFuZCBpbmplY3RlZCBydWxlcyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaGFzTmFtZUZvcklkID0gZnVuY3Rpb24gaGFzTmFtZUZvcklkKGlkLCBuYW1lKSB7XG4gICAgLyogZXhjZXB0aW9uIGZvciByZWh5ZHJhdGVkIG5hbWVzIHdoaWNoIGFyZSBjaGVja2VkIHNlcGFyYXRlbHkgKi9cbiAgICBpZiAodGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID09PSB1bmRlZmluZWQgJiYgdGhpcy5yZWh5ZHJhdGVkTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgcmV0dXJuIHRhZyAhPT0gdW5kZWZpbmVkICYmIHRhZy5oYXNOYW1lRm9ySWQoaWQsIG5hbWUpO1xuICB9O1xuXG4gIC8qIHJlZ2lzdGVycyBhIGNvbXBvbmVudElkIGFuZCByZWdpc3RlcnMgaXQgb24gaXRzIHRhZyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuZGVmZXJyZWRJbmplY3QgPSBmdW5jdGlvbiBkZWZlcnJlZEluamVjdChpZCwgY3NzUnVsZXMpIHtcbiAgICAvKiBkb24ndCBpbmplY3Qgd2hlbiB0aGUgaWQgaXMgYWxyZWFkeSByZWdpc3RlcmVkICovXG4gICAgaWYgKHRoaXMudGFnTWFwW2lkXSAhPT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2xvbmVzW2ldLmRlZmVycmVkSW5qZWN0KGlkLCBjc3NSdWxlcyk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRUYWdGb3JJZChpZCkuaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB0aGlzLmRlZmVycmVkW2lkXSA9IGNzc1J1bGVzO1xuICB9O1xuXG4gIC8qIGluamVjdHMgcnVsZXMgZm9yIGEgZ2l2ZW4gaWQgd2l0aCBhIG5hbWUgdGhhdCB3aWxsIG5lZWQgdG8gYmUgY2FjaGVkICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5pbmplY3QoaWQsIGNzc1J1bGVzLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvKiBhZGQgZGVmZXJyZWQgcnVsZXMgZm9yIGNvbXBvbmVudCAqL1xuICAgIHZhciBpbmplY3RSdWxlcyA9IGNzc1J1bGVzO1xuICAgIHZhciBkZWZlcnJlZFJ1bGVzID0gdGhpcy5kZWZlcnJlZFtpZF07XG4gICAgaWYgKGRlZmVycmVkUnVsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5qZWN0UnVsZXMgPSBkZWZlcnJlZFJ1bGVzLmNvbmNhdChpbmplY3RSdWxlcyk7XG4gICAgICBkZWxldGUgdGhpcy5kZWZlcnJlZFtpZF07XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMuZ2V0VGFnRm9ySWQoaWQpO1xuICAgIHRhZy5pbnNlcnRSdWxlcyhpZCwgaW5qZWN0UnVsZXMsIG5hbWUpO1xuICB9O1xuXG4gIC8qIHJlbW92ZXMgYWxsIHJ1bGVzIGZvciBhIGdpdmVuIGlkLCB3aGljaCBkb2Vzbid0IHJlbW92ZSBpdHMgbWFya2VyIGJ1dCByZXNldHMgaXQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShpZCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2xvbmVzW2ldLnJlbW92ZShpZCk7XG4gICAgfVxuXG4gICAgLyogcmVtb3ZlIGFsbCBydWxlcyBmcm9tIHRoZSB0YWcgKi9cbiAgICB0YWcucmVtb3ZlUnVsZXMoaWQpO1xuICAgIC8qIGlnbm9yZSBwb3NzaWJsZSByZWh5ZHJhdGVkIG5hbWVzICovXG4gICAgdGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID0gdHJ1ZTtcbiAgICAvKiBkZWxldGUgcG9zc2libGUgZGVmZXJyZWQgcnVsZXMgKi9cbiAgICBkZWxldGUgdGhpcy5kZWZlcnJlZFtpZF07XG4gIH07XG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gdG9IVE1MKCkge1xuICAgIHJldHVybiB0aGlzLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcudG9IVE1MKCk7XG4gICAgfSkuam9pbignJyk7XG4gIH07XG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUudG9SZWFjdEVsZW1lbnRzID0gZnVuY3Rpb24gdG9SZWFjdEVsZW1lbnRzKCkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQ7XG5cblxuICAgIHJldHVybiB0aGlzLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcsIGkpIHtcbiAgICAgIHZhciBrZXkgPSAnc2MtJyArIGlkICsgJy0nICsgaTtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQodGFnLnRvRWxlbWVudCgpLCB7IGtleToga2V5IH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGNyZWF0ZUNsYXNzKFN0eWxlU2hlZXQsIG51bGwsIFt7XG4gICAga2V5OiAnbWFzdGVyJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiBtYXN0ZXIgfHwgKG1hc3RlciA9IG5ldyBTdHlsZVNoZWV0KCkucmVoeWRyYXRlKCkpO1xuICAgIH1cblxuICAgIC8qIE5PVEU6IFRoaXMgaXMganVzdCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCBqZXN0LXN0eWxlZC1jb21wb25lbnRzICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luc3RhbmNlJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiBTdHlsZVNoZWV0Lm1hc3RlcjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBfU3R5bGVTaGVldE1hbmFnZXIkY2g7XG5cbi8vIFxuLyogdGhpcyBlcnJvciBpcyB1c2VkIGZvciBtYWtlU3R5bGVUYWcgKi9cbnZhciB0YXJnZXRQcm9wRXJyID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICdcXG5UaGUgU3R5bGVTaGVldE1hbmFnZXIgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG4nLnRyaW0oKSA6ICcnO1xuXG52YXIgU3R5bGVTaGVldE1hbmFnZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhTdHlsZVNoZWV0TWFuYWdlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3R5bGVTaGVldE1hbmFnZXIoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldE1hbmFnZXIpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltDT05URVhUX0tFWV0gPSB0aGlzLnNoZWV0SW5zdGFuY2UsIF9yZWY7XG4gIH07XG5cbiAgU3R5bGVTaGVldE1hbmFnZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaGVldCkge1xuICAgICAgdGhpcy5zaGVldEluc3RhbmNlID0gdGhpcy5wcm9wcy5zaGVldDtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudGFyZ2V0KSB7XG4gICAgICB0aGlzLnNoZWV0SW5zdGFuY2UgPSBuZXcgU3R5bGVTaGVldCh0aGlzLnByb3BzLnRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih0YXJnZXRQcm9wRXJyKTtcbiAgICB9XG4gIH07XG5cbiAgU3R5bGVTaGVldE1hbmFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG4gICAgLy8gRmxvdyB2MC40My4xIHdpbGwgcmVwb3J0IGFuIGVycm9yIGFjY2Vzc2luZyB0aGUgYGNoaWxkcmVuYCBwcm9wZXJ0eSxcbiAgICAvLyBidXQgdjAuNDcuMCB3aWxsIG5vdC4gSXQgaXMgbmVjZXNzYXJ5IHRvIHVzZSBhIHR5cGUgY2FzdCBpbnN0ZWFkIG9mXG4gICAgLy8gYSBcImZpeG1lXCIgY29tbWVudCB0byBzYXRpc2Z5IGJvdGggRmxvdyB2ZXJzaW9ucy5cbiAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldE1hbmFnZXI7XG59KENvbXBvbmVudCk7XG5cblN0eWxlU2hlZXRNYW5hZ2VyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9TdHlsZVNoZWV0TWFuYWdlciRjaCA9IHt9LCBfU3R5bGVTaGVldE1hbmFnZXIkY2hbQ09OVEVYVF9LRVldID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmluc3RhbmNlT2YoU3R5bGVTaGVldCksIFByb3BUeXBlcy5pbnN0YW5jZU9mKFNlcnZlclN0eWxlU2hlZXQpXSkuaXNSZXF1aXJlZCwgX1N0eWxlU2hlZXRNYW5hZ2VyJGNoKTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVTaGVldE1hbmFnZXIucHJvcFR5cGVzID0ge1xuICBzaGVldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmluc3RhbmNlT2YoU3R5bGVTaGVldCksIFByb3BUeXBlcy5pbnN0YW5jZU9mKFNlcnZlclN0eWxlU2hlZXQpXSksXG4gIHRhcmdldDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlbmRDaGlsZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9KVxufSA6IHZvaWQgMDtcblxuLy8gXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogdGhpcyBlcnJvciBpcyB1c2VkIGZvciBtYWtlU3R5bGVUYWcgKi9cbnZhciBzaGVldENsb3NlZEVyciA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAnXFxuQ2FuXFwndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdVxcJ3ZlIGNvbnN1bWVkIGEgU2VydmVyU3R5bGVTaGVldFxcJ3Mgc3R5bGVzIVxcblNlcnZlclN0eWxlU2hlZXQgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcbicudHJpbSgpIDogJyc7XG5cbnZhciBzdHJlYW1Ccm93c2VyRXJyID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICdTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci4nIDogJyc7XG5cbnZhciBTZXJ2ZXJTdHlsZVNoZWV0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXJ2ZXJTdHlsZVNoZWV0KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcnZlclN0eWxlU2hlZXQpO1xuXG4gICAgLyogVGhlIG1hc3RlciBzaGVldCBtaWdodCBiZSByZXNldCwgc28ga2VlcCBhIHJlZmVyZW5jZSBoZXJlICovXG4gICAgdGhpcy5tYXN0ZXJTaGVldCA9IFN0eWxlU2hlZXQubWFzdGVyO1xuICAgIHRoaXMuaW5zdGFuY2UgPSB0aGlzLm1hc3RlclNoZWV0LmNsb25lKCk7XG4gICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgfVxuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgLyogUmVtb3ZlIGNsb3NlZCBTdHlsZVNoZWV0cyBmcm9tIHRoZSBtYXN0ZXIgc2hlZXQgKi9cbiAgICAgIHZhciBpbmRleCA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmVzLmluZGV4T2YodGhpcy5pbnN0YW5jZSk7XG4gICAgICB0aGlzLm1hc3RlclNoZWV0LmNsb25lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5jb2xsZWN0U3R5bGVzID0gZnVuY3Rpb24gY29sbGVjdFN0eWxlcyhjaGlsZHJlbikge1xuICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHNoZWV0Q2xvc2VkRXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRNYW5hZ2VyLFxuICAgICAgeyBzaGVldDogdGhpcy5pbnN0YW5jZSB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmdldFN0eWxlVGFncyA9IGZ1bmN0aW9uIGdldFN0eWxlVGFncygpIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UudG9IVE1MKCk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0U3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gZ2V0U3R5bGVFbGVtZW50KCkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50b1JlYWN0RWxlbWVudHMoKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0gPSBmdW5jdGlvbiBpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cmVhbUJyb3dzZXJFcnIpO1xuICAgIH1cblxuICAgIC8qIHRoZSB0YWcgaW5kZXgga2VlcHMgdHJhY2sgb2Ygd2hpY2ggdGFncyBoYXZlIGFscmVhZHkgYmVlbiBlbWl0dGVkICovXG4gICAgdmFyIGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcblxuICAgIHZhciBpbnN0YW5jZVRhZ0luZGV4ID0gMDtcblxuICAgIHZhciBzdHJlYW1BdHRyID0gU0NfU1RSRUFNX0FUVFIgKyAnPVwidHJ1ZVwiJztcbiAgICB2YXIgb3VyU3RyZWFtID0gbmV3IHN0cmVhbS5SZWFkYWJsZSgpO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBvdXJTdHJlYW0uX3JlYWQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIHJlYWRhYmxlU3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICB2YXIgdGFncyA9IGluc3RhbmNlLnRhZ3M7XG5cbiAgICAgIHZhciBodG1sID0gJyc7XG5cbiAgICAgIC8qIHJldHJpZXZlIGh0bWwgZm9yIGVhY2ggbmV3IHN0eWxlIHRhZyAqL1xuICAgICAgZm9yICg7IGluc3RhbmNlVGFnSW5kZXggPCB0YWdzLmxlbmd0aDsgaW5zdGFuY2VUYWdJbmRleCArPSAxKSB7XG4gICAgICAgIHZhciB0YWcgPSB0YWdzW2luc3RhbmNlVGFnSW5kZXhdO1xuICAgICAgICBodG1sICs9IHRhZy50b0hUTUwoc3RyZWFtQXR0cik7XG4gICAgICB9XG5cbiAgICAgIC8qIGZvcmNlIG91ciBTdHlsZVNoZWV0cyB0byBlbWl0IGVudGlyZWx5IG5ldyB0YWdzICovXG4gICAgICBpbnN0YW5jZS5zZWFsQWxsVGFncygpO1xuICAgICAgLyogcHJlcGVuZCBzdHlsZSBodG1sIHRvIGNodW5rICovXG4gICAgICBvdXJTdHJlYW0ucHVzaChodG1sICsgY2h1bmspO1xuICAgIH0pO1xuXG4gICAgcmVhZGFibGVTdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNvbXBsZXRlKCk7XG4gICAgICBvdXJTdHJlYW0ucHVzaChudWxsKTtcbiAgICB9KTtcblxuICAgIHJlYWRhYmxlU3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIF90aGlzLmNvbXBsZXRlKCk7XG4gICAgICBvdXJTdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91clN0cmVhbTtcbiAgfTtcblxuICByZXR1cm4gU2VydmVyU3R5bGVTaGVldDtcbn0oKTtcblxuLy8gXG5cbnZhciBMSU1JVCA9IDIwMDtcblxudmFyIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyA9IChmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgdmFyIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgdmFyIHdhcm5pbmdTZWVuID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAoIXdhcm5pbmdTZWVuKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc2VzW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGdlbmVyYXRlZENsYXNzZXMpLmxlbmd0aCA+PSBMSU1JVCkge1xuICAgICAgICAvLyBVbmFibGUgdG8gZmluZCBsYXRlc3RSdWxlIGluIHRlc3QgZW52aXJvbm1lbnQuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIHByZWZlci10ZW1wbGF0ZSAqL1xuICAgICAgICBjb25zb2xlLndhcm4oJ092ZXIgJyArIExJTUlUICsgJyBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgJyArIGRpc3BsYXlOYW1lICsgJy4gXFxuJyArICdDb25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbicgKyAnRXhhbXBsZTpcXG4nICsgJyAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyh7XFxuJyArICcgICAgc3R5bGU6ICh7IGJhY2tncm91bmQgfSkgPT4gKHtcXG4nICsgJyAgICAgIGJhY2tncm91bmQsXFxuJyArICcgICAgfSksXFxuJyArICcgIH0pYHdpZHRoOiAxMDAlO2BcXG5cXG4nICsgJyAgPENvbXBvbmVudCAvPicpO1xuICAgICAgICB3YXJuaW5nU2VlbiA9IHRydWU7XG4gICAgICAgIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcblxuLy8gXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vKipcbiAqIFRyeWluZyB0byBhdm9pZCB0aGUgdW5rbm93bi1wcm9wIGVycm9ycyBvbiBzdHlsZWQgY29tcG9uZW50cyBieSBmaWx0ZXJpbmcgYnlcbiAqIFJlYWN0J3MgYXR0cmlidXRlIHdoaXRlbGlzdC5cbiAqXG4gKiBUbyByZWdlbmVyYXRlIHRoaXMgcmVnZXg6XG4gKlxuICogMS4gYG5wbSBpIC1nIHJlZ2V4Z2VuYCAoaHR0cHM6Ly9naXRodWIuY29tL2Rldm9uZ292ZXR0L3JlZ2V4Z2VuKVxuICogMi4gUnVuIGByZWdleGdlbmAgd2l0aCB0aGUgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgd29yZHMgYmVsb3cgYXMgaW5wdXRcbiAqIDMuIFN1cnJvdW5kIHRoZSBlbWl0dGVkIHJlZ2V4IHdpdGggdGhpczogYC9eKEdFTkVSQVRFRF9SRUdFWCkkL2AgLS0gdGhpcyB3aWxsIGVuc3VyZSBhIGZ1bGwgc3RyaW5nIG1hdGNoXG4gKiAgICBhbmQgbm8gZmFsc2UgcG9zaXRpdmVzIGZyb20gcGFydGlhbHNcbiAqKi9cbi8qXG5jaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBrZXkgcmVmIGF1dG9Gb2N1cyBkZWZhdWx0VmFsdWUgdmFsdWVMaW5rIGRlZmF1bHRDaGVja2VkIGNoZWNrZWRMaW5rIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgb25Gb2N1c0luIG9uRm9jdXNPdXQgY2xhc3NOYW1lIG9uQ29weSBvbkN1dCBvblBhc3RlIG9uQ29tcG9zaXRpb25FbmQgb25Db21wb3NpdGlvblN0YXJ0IG9uQ29tcG9zaXRpb25VcGRhdGUgb25LZXlEb3duIG9uS2V5UHJlc3Mgb25LZXlVcCBvbkZvY3VzIG9uQmx1ciBvbkNoYW5nZSBvbklucHV0IG9uU3VibWl0IG9uUmVzZXQgb25DbGljayBvbkNvbnRleHRNZW51IG9uRG91YmxlQ2xpY2sgb25EcmFnIG9uRHJhZ0VuZCBvbkRyYWdFbnRlciBvbkRyYWdFeGl0IG9uRHJhZ0xlYXZlIG9uRHJhZ092ZXIgb25EcmFnU3RhcnQgb25Ecm9wIG9uTW91c2VEb3duIG9uTW91c2VFbnRlciBvbk1vdXNlTGVhdmUgb25Nb3VzZU1vdmUgb25Nb3VzZU91dCBvbk1vdXNlT3ZlciBvbk1vdXNlVXAgb25TZWxlY3Qgb25Ub3VjaENhbmNlbCBvblRvdWNoRW5kIG9uVG91Y2hNb3ZlIG9uVG91Y2hTdGFydCBvblNjcm9sbCBvbldoZWVsIG9uQWJvcnQgb25DYW5QbGF5IG9uQ2FuUGxheVRocm91Z2ggb25EdXJhdGlvbkNoYW5nZSBvbkVtcHRpZWQgb25FbmNyeXB0ZWQgb25FbmRlZCBvbkVycm9yIG9uTG9hZGVkRGF0YSBvbkxvYWRlZE1ldGFkYXRhIG9uTG9hZFN0YXJ0IG9uUGF1c2Ugb25QbGF5IG9uUGxheWluZyBvblByb2dyZXNzIG9uUmF0ZUNoYW5nZSBvblNlZWtlZCBvblNlZWtpbmcgb25TdGFsbGVkIG9uU3VzcGVuZCBvblRpbWVVcGRhdGUgb25Wb2x1bWVDaGFuZ2Ugb25XYWl0aW5nIG9uTG9hZCBvbkFuaW1hdGlvblN0YXJ0IG9uQW5pbWF0aW9uRW5kIG9uQW5pbWF0aW9uSXRlcmF0aW9uIG9uVHJhbnNpdGlvbkVuZCBvbkNvcHlDYXB0dXJlIG9uQ3V0Q2FwdHVyZSBvblBhc3RlQ2FwdHVyZSBvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZSBvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlIG9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlIG9uS2V5RG93bkNhcHR1cmUgb25LZXlQcmVzc0NhcHR1cmUgb25LZXlVcENhcHR1cmUgb25Gb2N1c0NhcHR1cmUgb25CbHVyQ2FwdHVyZSBvbkNoYW5nZUNhcHR1cmUgb25JbnB1dENhcHR1cmUgb25TdWJtaXRDYXB0dXJlIG9uUmVzZXRDYXB0dXJlIG9uQ2xpY2tDYXB0dXJlIG9uQ29udGV4dE1lbnVDYXB0dXJlIG9uRG91YmxlQ2xpY2tDYXB0dXJlIG9uRHJhZ0NhcHR1cmUgb25EcmFnRW5kQ2FwdHVyZSBvbkRyYWdFbnRlckNhcHR1cmUgb25EcmFnRXhpdENhcHR1cmUgb25EcmFnTGVhdmVDYXB0dXJlIG9uRHJhZ092ZXJDYXB0dXJlIG9uRHJhZ1N0YXJ0Q2FwdHVyZSBvbkRyb3BDYXB0dXJlIG9uTW91c2VEb3duQ2FwdHVyZSBvbk1vdXNlRW50ZXJDYXB0dXJlIG9uTW91c2VMZWF2ZUNhcHR1cmUgb25Nb3VzZU1vdmVDYXB0dXJlIG9uTW91c2VPdXRDYXB0dXJlIG9uTW91c2VPdmVyQ2FwdHVyZSBvbk1vdXNlVXBDYXB0dXJlIG9uU2VsZWN0Q2FwdHVyZSBvblRvdWNoQ2FuY2VsQ2FwdHVyZSBvblRvdWNoRW5kQ2FwdHVyZSBvblRvdWNoTW92ZUNhcHR1cmUgb25Ub3VjaFN0YXJ0Q2FwdHVyZSBvblNjcm9sbENhcHR1cmUgb25XaGVlbENhcHR1cmUgb25BYm9ydENhcHR1cmUgb25DYW5QbGF5Q2FwdHVyZSBvbkNhblBsYXlUaHJvdWdoQ2FwdHVyZSBvbkR1cmF0aW9uQ2hhbmdlQ2FwdHVyZSBvbkVtcHRpZWRDYXB0dXJlIG9uRW5jcnlwdGVkQ2FwdHVyZSBvbkVuZGVkQ2FwdHVyZSBvbkVycm9yQ2FwdHVyZSBvbkxvYWRlZERhdGFDYXB0dXJlIG9uTG9hZGVkTWV0YWRhdGFDYXB0dXJlIG9uTG9hZFN0YXJ0Q2FwdHVyZSBvblBhdXNlQ2FwdHVyZSBvblBsYXlDYXB0dXJlIG9uUGxheWluZ0NhcHR1cmUgb25Qcm9ncmVzc0NhcHR1cmUgb25SYXRlQ2hhbmdlQ2FwdHVyZSBvblNlZWtlZENhcHR1cmUgb25TZWVraW5nQ2FwdHVyZSBvblN0YWxsZWRDYXB0dXJlIG9uU3VzcGVuZENhcHR1cmUgb25UaW1lVXBkYXRlQ2FwdHVyZSBvblZvbHVtZUNoYW5nZUNhcHR1cmUgb25XYWl0aW5nQ2FwdHVyZSBvbkxvYWRDYXB0dXJlIG9uQW5pbWF0aW9uU3RhcnRDYXB0dXJlIG9uQW5pbWF0aW9uRW5kQ2FwdHVyZSBvbkFuaW1hdGlvbkl0ZXJhdGlvbkNhcHR1cmUgb25UcmFuc2l0aW9uRW5kQ2FwdHVyZSBhY2NlcHQgYWNjZXB0Q2hhcnNldCBhY2Nlc3NLZXkgYWN0aW9uIGFsbG93RnVsbFNjcmVlbiBhbGxvd1RyYW5zcGFyZW5jeSBhbHQgYXMgYXN5bmMgYXV0b0NvbXBsZXRlIGF1dG9QbGF5IGNhcHR1cmUgY2VsbFBhZGRpbmcgY2VsbFNwYWNpbmcgY2hhclNldCBjaGFsbGVuZ2UgY2hlY2tlZCBjaXRlIGNsYXNzSUQgY2xhc3NOYW1lIGNvbHMgY29sU3BhbiBjb250ZW50IGNvbnRlbnRFZGl0YWJsZSBjb250ZXh0TWVudSBjb250cm9sc0xpc3QgY29udHJvbHMgY29vcmRzIGNyb3NzT3JpZ2luIGRhdGEgZGF0ZVRpbWUgZGVmYXVsdCBkZWZlciBkaXIgZGlzYWJsZWQgZG93bmxvYWQgZHJhZ2dhYmxlIGVuY1R5cGUgZm9ybSBmb3JtQWN0aW9uIGZvcm1FbmNUeXBlIGZvcm1NZXRob2QgZm9ybU5vVmFsaWRhdGUgZm9ybVRhcmdldCBmcmFtZUJvcmRlciBoZWFkZXJzIGhlaWdodCBoaWRkZW4gaGlnaCBocmVmIGhyZWZMYW5nIGh0bWxGb3IgaHR0cEVxdWl2IGljb24gaWQgaW5wdXRNb2RlIGludGVncml0eSBpcyBrZXlQYXJhbXMga2V5VHlwZSBraW5kIGxhYmVsIGxhbmcgbGlzdCBsb29wIGxvdyBtYW5pZmVzdCBtYXJnaW5IZWlnaHQgbWFyZ2luV2lkdGggbWF4IG1heExlbmd0aCBtZWRpYSBtZWRpYUdyb3VwIG1ldGhvZCBtaW4gbWluTGVuZ3RoIG11bHRpcGxlIG11dGVkIG5hbWUgbm9uY2Ugbm9WYWxpZGF0ZSBvcGVuIG9wdGltdW0gcGF0dGVybiBwbGFjZWhvbGRlciBwbGF5c0lubGluZSBwb3N0ZXIgcHJlbG9hZCBwcm9maWxlIHJhZGlvR3JvdXAgcmVhZE9ubHkgcmVmZXJyZXJQb2xpY3kgcmVsIHJlcXVpcmVkIHJldmVyc2VkIHJvbGUgcm93cyByb3dTcGFuIHNhbmRib3ggc2NvcGUgc2NvcGVkIHNjcm9sbGluZyBzZWFtbGVzcyBzZWxlY3RlZCBzaGFwZSBzaXplIHNpemVzIHNwYW4gc3BlbGxDaGVjayBzcmMgc3JjRG9jIHNyY0xhbmcgc3JjU2V0IHN0YXJ0IHN0ZXAgc3R5bGUgc3VtbWFyeSB0YWJJbmRleCB0YXJnZXQgdGl0bGUgdHlwZSB1c2VNYXAgdmFsdWUgd2lkdGggd21vZGUgd3JhcCBhYm91dCBkYXRhdHlwZSBpbmxpc3QgcHJlZml4IHByb3BlcnR5IHJlc291cmNlIHR5cGVvZiB2b2NhYiBhdXRvQ2FwaXRhbGl6ZSBhdXRvQ29ycmVjdCBhdXRvU2F2ZSBjb2xvciBpdGVtUHJvcCBpdGVtU2NvcGUgaXRlbVR5cGUgaXRlbUlEIGl0ZW1SZWYgcmVzdWx0cyBzZWN1cml0eSB1bnNlbGVjdGFibGUgYWNjZW50SGVpZ2h0IGFjY3VtdWxhdGUgYWRkaXRpdmUgYWxpZ25tZW50QmFzZWxpbmUgYWxsb3dSZW9yZGVyIGFscGhhYmV0aWMgYW1wbGl0dWRlIGFyYWJpY0Zvcm0gYXNjZW50IGF0dHJpYnV0ZU5hbWUgYXR0cmlidXRlVHlwZSBhdXRvUmV2ZXJzZSBhemltdXRoIGJhc2VGcmVxdWVuY3kgYmFzZVByb2ZpbGUgYmFzZWxpbmVTaGlmdCBiYm94IGJlZ2luIGJpYXMgYnkgY2FsY01vZGUgY2FwSGVpZ2h0IGNsaXAgY2xpcFBhdGggY2xpcFJ1bGUgY2xpcFBhdGhVbml0cyBjb2xvckludGVycG9sYXRpb24gY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycyBjb2xvclByb2ZpbGUgY29sb3JSZW5kZXJpbmcgY29udGVudFNjcmlwdFR5cGUgY29udGVudFN0eWxlVHlwZSBjdXJzb3IgY3ggY3kgZCBkZWNlbGVyYXRlIGRlc2NlbnQgZGlmZnVzZUNvbnN0YW50IGRpcmVjdGlvbiBkaXNwbGF5IGRpdmlzb3IgZG9taW5hbnRCYXNlbGluZSBkdXIgZHggZHkgZWRnZU1vZGUgZWxldmF0aW9uIGVuYWJsZUJhY2tncm91bmQgZW5kIGV4cG9uZW50IGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQgZmlsbCBmaWxsT3BhY2l0eSBmaWxsUnVsZSBmaWx0ZXIgZmlsdGVyUmVzIGZpbHRlclVuaXRzIGZsb29kQ29sb3IgZmxvb2RPcGFjaXR5IGZvY3VzYWJsZSBmb250RmFtaWx5IGZvbnRTaXplIGZvbnRTaXplQWRqdXN0IGZvbnRTdHJldGNoIGZvbnRTdHlsZSBmb250VmFyaWFudCBmb250V2VpZ2h0IGZvcm1hdCBmcm9tIGZ4IGZ5IGcxIGcyIGdseXBoTmFtZSBnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbCBnbHlwaE9yaWVudGF0aW9uVmVydGljYWwgZ2x5cGhSZWYgZ3JhZGllbnRUcmFuc2Zvcm0gZ3JhZGllbnRVbml0cyBoYW5naW5nIGhvcml6QWR2WCBob3Jpek9yaWdpblggaWRlb2dyYXBoaWMgaW1hZ2VSZW5kZXJpbmcgaW4gaW4yIGludGVyY2VwdCBrIGsxIGsyIGszIGs0IGtlcm5lbE1hdHJpeCBrZXJuZWxVbml0TGVuZ3RoIGtlcm5pbmcga2V5UG9pbnRzIGtleVNwbGluZXMga2V5VGltZXMgbGVuZ3RoQWRqdXN0IGxldHRlclNwYWNpbmcgbGlnaHRpbmdDb2xvciBsaW1pdGluZ0NvbmVBbmdsZSBsb2NhbCBtYXJrZXJFbmQgbWFya2VyTWlkIG1hcmtlclN0YXJ0IG1hcmtlckhlaWdodCBtYXJrZXJVbml0cyBtYXJrZXJXaWR0aCBtYXNrIG1hc2tDb250ZW50VW5pdHMgbWFza1VuaXRzIG1hdGhlbWF0aWNhbCBtb2RlIG51bU9jdGF2ZXMgb2Zmc2V0IG9wYWNpdHkgb3BlcmF0b3Igb3JkZXIgb3JpZW50IG9yaWVudGF0aW9uIG9yaWdpbiBvdmVyZmxvdyBvdmVybGluZVBvc2l0aW9uIG92ZXJsaW5lVGhpY2tuZXNzIHBhaW50T3JkZXIgcGFub3NlMSBwYXRoTGVuZ3RoIHBhdHRlcm5Db250ZW50VW5pdHMgcGF0dGVyblRyYW5zZm9ybSBwYXR0ZXJuVW5pdHMgcG9pbnRlckV2ZW50cyBwb2ludHMgcG9pbnRzQXRYIHBvaW50c0F0WSBwb2ludHNBdFogcHJlc2VydmVBbHBoYSBwcmVzZXJ2ZUFzcGVjdFJhdGlvIHByaW1pdGl2ZVVuaXRzIHIgcmFkaXVzIHJlZlggcmVmWSByZW5kZXJpbmdJbnRlbnQgcmVwZWF0Q291bnQgcmVwZWF0RHVyIHJlcXVpcmVkRXh0ZW5zaW9ucyByZXF1aXJlZEZlYXR1cmVzIHJlc3RhcnQgcmVzdWx0IHJvdGF0ZSByeCByeSBzY2FsZSBzZWVkIHNoYXBlUmVuZGVyaW5nIHNsb3BlIHNwYWNpbmcgc3BlY3VsYXJDb25zdGFudCBzcGVjdWxhckV4cG9uZW50IHNwZWVkIHNwcmVhZE1ldGhvZCBzdGFydE9mZnNldCBzdGREZXZpYXRpb24gc3RlbWggc3RlbXYgc3RpdGNoVGlsZXMgc3RvcENvbG9yIHN0b3BPcGFjaXR5IHN0cmlrZXRocm91Z2hQb3NpdGlvbiBzdHJpa2V0aHJvdWdoVGhpY2tuZXNzIHN0cmluZyBzdHJva2Ugc3Ryb2tlRGFzaGFycmF5IHN0cm9rZURhc2hvZmZzZXQgc3Ryb2tlTGluZWNhcCBzdHJva2VMaW5lam9pbiBzdHJva2VNaXRlcmxpbWl0IHN0cm9rZU9wYWNpdHkgc3Ryb2tlV2lkdGggc3VyZmFjZVNjYWxlIHN5c3RlbUxhbmd1YWdlIHRhYmxlVmFsdWVzIHRhcmdldFggdGFyZ2V0WSB0ZXh0QW5jaG9yIHRleHREZWNvcmF0aW9uIHRleHRSZW5kZXJpbmcgdGV4dExlbmd0aCB0byB0cmFuc2Zvcm0gdTEgdTIgdW5kZXJsaW5lUG9zaXRpb24gdW5kZXJsaW5lVGhpY2tuZXNzIHVuaWNvZGUgdW5pY29kZUJpZGkgdW5pY29kZVJhbmdlIHVuaXRzUGVyRW0gdkFscGhhYmV0aWMgdkhhbmdpbmcgdklkZW9ncmFwaGljIHZNYXRoZW1hdGljYWwgdmFsdWVzIHZlY3RvckVmZmVjdCB2ZXJzaW9uIHZlcnRBZHZZIHZlcnRPcmlnaW5YIHZlcnRPcmlnaW5ZIHZpZXdCb3ggdmlld1RhcmdldCB2aXNpYmlsaXR5IHdpZHRocyB3b3JkU3BhY2luZyB3cml0aW5nTW9kZSB4IHhIZWlnaHQgeDEgeDIgeENoYW5uZWxTZWxlY3RvciB4bGlua0FjdHVhdGUgeGxpbmtBcmNyb2xlIHhsaW5rSHJlZiB4bGlua1JvbGUgeGxpbmtTaG93IHhsaW5rVGl0bGUgeGxpbmtUeXBlIHhtbEJhc2UgeG1sbnMgeG1sbnNYbGluayB4bWxMYW5nIHhtbFNwYWNlIHkgeTEgeTIgeUNoYW5uZWxTZWxlY3RvciB6IHpvb21BbmRQYW5cbiovXG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxudmFyIEFUVFJJQlVURV9SRUdFWCA9IC9eKCg/OnMoPzp1cHByZXNzQ29udGVudEVkaXRhYmxlV2Fybnxjcm9sbHxwYWMpfCg/OnNoYXBlfGltYWdlfHRleHQpUmVuZGVyfCg/OmxldHRlcnx3b3JkKVNwYWN8dkhhbmd8aGFuZylpbmd8KD86b24oPzpBbmltYXRpb25JdGVyYXRpb258Qyg/Om8oPzptcG9zaXRpb24oPzpVcGRhdGV8U3RhcnR8RW5kKXxudGV4dE1lbnV8cHkpfGFuUGxheVRocm91Z2h8YW5QbGF5fGhhbmdlfGxpY2t8dXQpfCg/Oig/OkR1cmF0aW9ufFZvbHVtZXxSYXRlKUNoYW5nfCg/Ok1vdXNlTGVhfCg/OlRvdWNofE1vdXNlKU1vfERyYWdMZWEpdnxQYXVzKWV8TG9hZGVkKD86TWV0YWR8RClhdGF8KD86QW5pbWF0aW9ufFRvdWNofExvYWR8RHJhZylTdGFydHwoPzooPzpUKD86cmFuc2l0aW9ufG91Y2gpfEFuaW1hdGlvbilFfFN1c3BlKW5kfERvdWJsZUNsaWNrfCg/OlRvdWNoQ2FuY3xXaGUpZWx8KD86TW91c2UoPzpFbnR8T3YpZXxEcmFnKD86RW50fE92KWV8RXJybylyfFRpbWVVcGRhdGV8KD86RSg/Om4oPzpjcnlwdHxkKXxtcHRpKXxTKD86dGFsbHxlZWspKWVkfE1vdXNlRG93bnxQKD86cm9ncmVzc3xsYXlpbmcpfCg/Ok1vdXNlT3V8RHJhZ0V4aXxTKD86ZWxlY3x1Ym1pKXxSZXNlfElucHUpdHxLZXlQcmVzc3xEcmFnRW5kfEtleSg/OkRvd258VXApfCg/OldhaXR8U2Vlaylpbmd8KD86TW91c2VVfERybylwfFNjcm9sbHxQYXN0ZXxGb2N1c3xBYm9ydHxEcmFnfFBsYXl8TG9hZHxCbHVyKUNhcHR1cnxhbGlnbm1lbnRCYXNlbGlufCg/OmxpbWl0aW5nQ29uZUFuZ3x4bGluayg/Oig/OkFyY3J8UilvfFRpdCl8cyg/OnVyZmFjZVNjYXx0eXxjYSl8dW5zZWxlY3RhYnxiYXNlUHJvZml8Zm9udFN0eXwoPzpmb2N1c3xkcmFnZylhYnxtdWx0aXB8cHJvZml8dGl0KWx8ZCg/Om9taW5hbnRCYXNlbGlufGVmYXVsdFZhbHUpfGEoPzp1dG8oPzpDYXBpdGFsaXp8UmV2ZXJzfFNhdil8ZGRpdGl2KXwoPzooPzpmb3JtTm9WYWxpZHx4bGlua0FjdHV8bm9WYWxpZHxhY2N1bXVsfHJvdClhfGF1dG9Db21wbGV8ZGVjZWxlcmEpdHwoPzooPzphdHRyaWJ1dGV8aXRlbSlUfGRhdGF0KXlwfCg/OmF0dHJpYnV0ZXxnbHlwaClOYW18cGxheXNJbmxpbnwoPzpmb3JtRXxlKW5jVHlwfCg/OndyaXRpbmd8aW5wdXR8ZWRnZSlNb2R8KD86eGxpbmtUeXxpdGVtU2NvfGtleVR5fHNsbylwfCg/OmFtcGxpdHV8bW8pZHwoPzp4bWxTcGF8bm9uKWN8ZmlsbFJ1bHwoPzpkYXRlVGl8bmEpbXxyKD86ZXNvdXJjfG9sKXx4bWxCYXN8d21vZCllfCg/OmdseXBoT3JpZW50YXRpb25Ib3Jpem9udHxsb2MpYWx8KD86ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJ8c2VsZWN0fHJldmVyc3xtdXQpZWR8Yyg/Om8oPzpsb3JJbnRlcnBvbGF0aW9uRmlsdGVyfG9yZClzfG8oPzpsb3IoPzpJbnRlcnBvbGF0aW9uKT98bnQoPzpyb2xzfGVudCkpfCg/Om9udGVudFMoPzpjcmlwdHx0eWxlKVR5cHxvKD86bnRlbnRFZGl0YWJ8bG9yUHJvZmkpbHxsKD86YXNzTmFtfGlwUnVsKXxhKD86bGNNb2R8cHR1cil8aXQpZXxvbG9yUmVuZGVyaW5nfGwoPzppcFBhdGhVbml0c3xhc3NJRCl8KD86b250cm9sc0xpc3xhcEhlaWdoKXR8aCg/OmVja2VkTGlua3xhKD86bGxlbmdlfHJTZXQpfGlsZHJlbnxlY2tlZCl8ZWxsKD86U3BhY3xQYWRkKWluZ3xvKD86bnRleHRNZW51fGxzKXwoPzpyb3NzT3JpZ2l8b2xTcGEpbnxsaXAoPzpQYXRoKT98dXJzb3J8W3h5XSl8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGQoPzphbmdlcm91c2x5U2V0SW5uZXJIVE1MfGVmYXVsdENoZWNrZWR8b3dubG9hZHxpc2FibGVkfGlzcGxheXxbeHldKXwoPzpzKD86dHJpa2V0aHJvdWdoVGhpY2tufGVhbWwpZXN8KD86dW5kfG92KWVybGluZVRoaWNrbmVzfHIoPzplcXVpcmVkRXh0ZW5zaW9ufGFkaXUpfCg/OnJlcXVpcmVkRmVhdHVyfHRhYmxlVmFsdXxzdGl0Y2hUaWx8bnVtT2N0YXZ8ZmlsdGVyUillfGtleSg/Oig/OlNwbGlufFRpbSllfFBhcmFtKXxhdXRvRm9jdXxoZWFkZXJ8YmlhKXN8KD86KD86c3QoPzpyaWtldGhyb3VnaFBvc2l8ZERldmlhKXwoPzp1bmR8b3YpZXJsaW5lUG9zaXwoPzp0ZXh0RGVjb3J8ZWxldilhfG9yaWVudGEpdGlvfCg/OnN0cm9rZUxpbmVqb3xvcmlnKWl8Zm9ybUFjdGlvfHpvb21BbmRQYXxvbkZvY3VzSXxkaXJlY3Rpb3woPzp2ZXJzfGFjdClpb3xyb3dTcGF8YmVnaXxpY28pbnxvKD86big/OkFuaW1hdGlvbkl0ZXJhdGlvbnxDKD86byg/Om1wb3NpdGlvbig/OlVwZGF0ZXxTdGFydHxFbmQpfG50ZXh0TWVudXxweSl8YW5QbGF5VGhyb3VnaHxhblBsYXl8aGFuZ2V8bGlja3x1dCl8KD86KD86RHVyYXRpb258Vm9sdW1lfFJhdGUpQ2hhbmd8KD86TW91c2VMZWF8KD86VG91Y2h8TW91c2UpTW98RHJhZ0xlYSl2fFBhdXMpZXxMb2FkZWQoPzpNZXRhZHxEKWF0YXwoPzpBbmltYXRpb258VG91Y2h8TG9hZHxEcmFnKVN0YXJ0fCg/Oig/OlQoPzpyYW5zaXRpb258b3VjaCl8QW5pbWF0aW9uKUV8U3VzcGUpbmR8RG91YmxlQ2xpY2t8KD86VG91Y2hDYW5jfFdoZSllbHwoPzpNb3VzZSg/OkVudHxPdillfERyYWcoPzpFbnR8T3YpZXxFcnJvKXJ8VGltZVVwZGF0ZXwoPzpFKD86big/OmNyeXB0fGQpfG1wdGkpfFMoPzp0YWxsfGVlaykpZWR8TW91c2VEb3dufFAoPzpyb2dyZXNzfGxheWluZyl8KD86TW91c2VPdXxEcmFnRXhpfFMoPzplbGVjfHVibWkpfFJlc2V8SW5wdSl0fEtleVByZXNzfERyYWdFbmR8S2V5KD86RG93bnxVcCl8KD86V2FpdHxTZWVrKWluZ3woPzpNb3VzZVV8RHJvKXB8U2Nyb2xsfFBhc3RlfEZvY3VzfEFib3J0fERyYWd8UGxheXxMb2FkfEJsdXIpfHJpZW50KXxwKD86cmVzZXJ2ZUEoPzpzcGVjdFJhdGlvfGxwaGEpfG9pbnRzQXRbWC1aXXxhbm9zZTEpfCg/OnBhdHRlcm5Db250ZW50fG1hKD86c2soPzpDb250ZW50KT98cmtlcil8cHJpbWl0aXZlfGdyYWRpZW50fHBhdHRlcm58ZmlsdGVyKVVuaXRzfCg/OmdyYWRpZW50VHxwYXR0ZXJuVHx0KXJhbnNmb3JtfCg/Oig/OmFsbG93VHJhbnNwYXJ8YmFzZUZyZXF1KWVuY3xyZSg/OmZlcnJlclBvbGljfGFkT25sKXwoPzooPzpzdCg/OnJva2V8b3ApT3xmbG9vZE98ZmlsbE98bylwYWN8aW50ZWdyfHNlY3VyKWl0fHZpc2liaWxpdHxmb250RmFtaWx8YWNjZXNzS2V8cHJvcGVydHxzdW1tYXIpeXwoPzpzdHJva2VNaXRlcmxpbWl8KD86c3BlY3VsYXJDb25zdGF8cmVwZWF0Q291fGZvbnRWYXJpYSlufCg/Oig/OnNwZWN1bGFyRXxlKXhwb258cmVuZGVyaW5nSW50fGFzYyllbnxkKD86aWZmdXNlQ29uc3RhfGVzY2UpbnwoPzpmb250U2l6ZUFkanV8bGVuZ3RoQWRqdXxtYW5pZmUpc3xiYXNlbGluZVNoaWZ8dmVjdG9yRWZmZWN8KD86KD86bWFyKD86a2VyfGdpbil8eClIfGFjY2VudEh8Zm9udFcpZWlnaHxhKD86dXRvQ29ycmVjfGJvdSl8bWFya2VyU3RhcnxvbkZvY3VzT3V8aW50ZXJjZXB8cmVzdGFyfGZvcm1hfGlubGlzfGhlaWdofGxpcyl0fCg/Oig/OnN0KD86cm9rZURhc2hvfGFydE8pfG8pZmZzfGFjY2VwdENoYXJzfGZvcm1UYXJnfHZpZXdUYXJnfHNyY1MpZXR8KD86KD86ZW5hYmxlQmFja2dyb3V8bWFya2VyRSlufHMoPzpwKD86cmVhZE1ldGhvfGVlKXxlZSl8Zm9ybU1ldGhvfG0oPzphcmtlck1pfGV0aG8pfHByZWxvYXxraW4pZHxrKD86ZXJuZWwoPzpVbml0TGVuZ3RofE1hdHJpeCl8WzEtNF0pfCg/Olt4eV1DaGFubmVsU2VsZWN0fGxpZ2h0aW5nQ29sfHRleHRBbmNofGZsb29kQ29sfHN0b3BDb2x8b3BlcmF0fGh0bWxGKW9yfCg/OmFsbG93RnVsbFNjcmV8aGlkZCllbnxzdHJva2VEYXNoYXJyYXl8c3lzdGVtTGFuZ3VhZ2V8KD86c3Ryb2tlTGluZWNhfGl0ZW1Qcm98dXNlTWF8d3JhfGxvbylwfHYoPzpNYXRoZW1hdGljYWx8ZXJ0KD86T3JpZ2luW1hZXXxBZHZZKXxhbHVlc3xvY2FiKXwoPzpwb2ludGVyRXZlfGtleVBvaSludHN8dW5pY29kZVJhbmdlfCg/Oig/OmFsbG93UmVvcmR8cGxhY2Vob2xkfGZyYW1lQm9yZHxwYWludE9yZHxwb3N0fG9yZCllfHJlcGVhdER1fGQoPzplZmV8dSkpcnxtYXRoZW1hdGljYWx8KD86dkl8aSlkZW9ncmFwaGljfGgoPzpvcml6KD86T3JpZ2lufEFkdilYfHR0cEVxdWl2KXx1KD86bmljb2RlQmlkaXxbMTJdKXwoPzpmb250U3RyZXRjfGhpZylofCg/Oig/Om1hcig/OmtlcnxnaW4pV3xzdHJva2VXKWlkfGF6aW11KXRofHZBbHBoYWJldGljfG1lZGlhR3JvdXB8c3BlbGxDaGVja3woPzp1bml0c1BlckV8b3B0aW11fGZybyltfHIoPzphZGlvR3JvdXB8ZSg/OnN1bHRzfGZbWFldfGwpfG93c3xbeHldKXwoPzp4bWxuc1hsfHZhbHVlTClpbmt8YSg/OnJhYmljRm9ybXxsKD86cGhhYmV0aWN8dCl8c3luYyl8cGF0aExlbmd0aHwoPzp0ZXh0fG0oPzppbnxheCkpTGVuZ3RofGlubmVySFRNTHx4bGlua1Nob3d8KD86eGxpbmtIcnxnbHlwaFIpZWZ8cig/OmUoPzpxdWlyZWR8c3VsdHxmKSk/fG8oPzp2ZXJmbG93fHBlbil8KD86dGFiSW5kZXwoPzpzYW5kfGIpYm98dmlld0JvKXh8KD86KD86aHJlZnx4bWx8c3JjKUxhfGtlcm5pKW5nfGYoPzpvKD86bnRTaXplfHJtKXxpbCg/OnRlcnxsKSl8YXV0b1BsYXl8dW5pY29kZXxwKD86YXR0ZXJufG9pbnRzKXx0KD86YXJnZXRbWFldfG8pfGkoPzp0ZW1SZWZ8bjJ8cyl8ZGl2aXNvcnxkKD86ZWZhdWx0fGF0YXxpcik/fHNyY0RvY3xzKD86Y29wZWR8dGUoPzptW2h2XXxwKXxwYW4pfCg/OndpZHRofHNpemUpc3woPzpzdHJpfGxhKW5nfHByZWZpeHxpdGVtSUR8cyg/OnQoPzpyb2tlfGFydCl8aGFwZXxjb3BlfHJjKXxhKD86Y2NlcHR8cyl8dCg/OmFyZ2V0fHlwZSl8dHlwZW9mfHdpZHRofHZhbHVlfHgoPzptbG5zKT98bGFiZWx8bSg/OmVkaWF8YSg/OnNrfHgpfGluKXxzaXplfGhyZWZ8ayg/OmV5KT98ZW5kfGxvd3x4WzEyXXxpW2RuXXx5WzEyXXxnWzEyXXxieXxmW3h5XXxbeXpdKSQvO1xuXG4vKiBGcm9tIERPTVByb3BlcnR5ICovXG52YXIgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiA9ICc6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEJztcbnZhciBBVFRSSUJVVEVfTkFNRV9DSEFSID0gQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArICdcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG52YXIgaXNDdXN0b21BdHRyaWJ1dGUgPSBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChuZXcgUmVnRXhwKCdeKGRhdGF8YXJpYSktWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpKTtcblxudmFyIHZhbGlkQXR0ciA9IChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gQVRUUklCVVRFX1JFR0VYLnRlc3QobmFtZSkgfHwgaXNDdXN0b21BdHRyaWJ1dGUobmFtZS50b0xvd2VyQ2FzZSgpKTtcbn0pO1xuXG4vLyBcblxuZnVuY3Rpb24gaXNUYWcodGFyZ2V0KSAvKiA6ICVjaGVja3MgKi97XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJztcbn1cblxuLy8gXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0LmRpc3BsYXlOYW1lIHx8IHRhcmdldC5uYW1lIHx8ICdDb21wb25lbnQnO1xufVxuXG4vLyBcblxudmFyIGRldGVybWluZVRoZW1lID0gKGZ1bmN0aW9uIChwcm9wcywgZmFsbGJhY2tUaGVtZSwgZGVmYXVsdFByb3BzKSB7XG4gIC8vIFByb3BzIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciBUaGVtZVByb3ZpZGVyLCB3aGljaCBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXJcbiAgLy8gZGVmYXVsdFByb3BzLCBidXQgUmVhY3QgYXV0b21hdGljYWxseSBwdXRzIGRlZmF1bHRQcm9wcyBvbiBwcm9wcy5cblxuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG4gIHZhciBpc0RlZmF1bHRUaGVtZSA9IGRlZmF1bHRQcm9wcyAmJiBwcm9wcy50aGVtZSA9PT0gZGVmYXVsdFByb3BzLnRoZW1lO1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSAmJiAhaXNEZWZhdWx0VGhlbWUgPyBwcm9wcy50aGVtZSA6IGZhbGxiYWNrVGhlbWU7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuICByZXR1cm4gdGhlbWU7XG59KTtcblxuLy8gXG52YXIgZXNjYXBlUmVnZXggPSAvW1tcXF0uIyokPjwrfj18XjooKSxcIidgLV0rL2c7XG52YXIgZGFzaGVzQXRFbmRzID0gLyheLXwtJCkvZztcblxuLyoqXG4gKiBUT0RPOiBFeHBsb3JlIHVzaW5nIENTUy5lc2NhcGUgd2hlbiBpdCBiZWNvbWVzIG1vcmUgYXZhaWxhYmxlXG4gKiBpbiBldmVyZ3JlZW4gYnJvd3NlcnMuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAvLyBSZXBsYWNlIGFsbCBwb3NzaWJsZSBDU1Mgc2VsZWN0b3JzXG4gIC5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnLScpXG5cbiAgLy8gUmVtb3ZlIGV4dHJhbmVvdXMgaHlwaGVucyBhdCB0aGUgc3RhcnQgYW5kIGVuZFxuICAucmVwbGFjZShkYXNoZXNBdEVuZHMsICcnKTtcbn1cblxuLy8gXG4vKipcbiAqIENyZWF0ZXMgYSBicm9hZGNhc3QgdGhhdCBjYW4gYmUgbGlzdGVuZWQgdG8sIGkuZS4gc2ltcGxlIGV2ZW50IGVtaXR0ZXJcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL3JlYWN0LWJyb2FkY2FzdFxuICovXG5cbnZhciBjcmVhdGVCcm9hZGNhc3QgPSBmdW5jdGlvbiBjcmVhdGVCcm9hZGNhc3QoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB7fTtcbiAgdmFyIGlkID0gMDtcbiAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gIGZ1bmN0aW9uIHB1Ymxpc2gobmV4dFN0YXRlKSB7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgIGZvciAodmFyIGtleSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1trZXldO1xuICAgICAgaWYgKGxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcihzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgdmFyIGN1cnJlbnRJZCA9IGlkO1xuICAgIGxpc3RlbmVyc1tjdXJyZW50SWRdID0gbGlzdGVuZXI7XG4gICAgaWQgKz0gMTtcbiAgICBsaXN0ZW5lcihzdGF0ZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRJZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKHVuc3ViSUQpIHtcbiAgICBsaXN0ZW5lcnNbdW5zdWJJRF0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4geyBwdWJsaXNoOiBwdWJsaXNoLCBzdWJzY3JpYmU6IHN1YnNjcmliZSwgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG59O1xuXG52YXIgX1RoZW1lUHJvdmlkZXIkY2hpbGRDO1xudmFyIF9UaGVtZVByb3ZpZGVyJGNvbnRleDtcblxuLy8gXG4vKiBnbG9iYWxzIFJlYWN0JEVsZW1lbnQgKi9cbi8vIE5PVEU6IERPIE5PVCBDSEFOR0UsIGNoYW5naW5nIHRoaXMgaXMgYSBzZW12ZXIgbWFqb3IgY2hhbmdlIVxudmFyIENIQU5ORUwgPSAnX19zdHlsZWQtY29tcG9uZW50c19fJztcbnZhciBDSEFOTkVMX05FWFQgPSBDSEFOTkVMICsgJ25leHRfXyc7XG5cbnZhciBDT05URVhUX0NIQU5ORUxfU0hBUEUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXRUaGVtZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHVuc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuY1xufSk7XG5cbnZhciB3YXJuQ2hhbm5lbERlcHJlY2F0ZWQgPSB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuQ2hhbm5lbERlcHJlY2F0ZWQgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IFVzYWdlIG9mIGBjb250ZXh0LicgKyBDSEFOTkVMICsgJ2AgYXMgYSBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiBJdCB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIG9iamVjdCBvbiBgLmNvbnRleHQuJyArIENIQU5ORUxfTkVYVCArICdgIGluIGEgZnV0dXJlIHZlcnNpb24uJyk7XG4gIH0pO1xufVxuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24odGVzdCkge1xuICByZXR1cm4gdHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKipcbiAqIFByb3ZpZGUgYSB0aGVtZSB0byBhbiBlbnRpcmUgcmVhY3QgY29tcG9uZW50IHRyZWUgdmlhIGNvbnRleHQgYW5kIGV2ZW50IGxpc3RlbmVycyAoaGF2ZSB0byBkb1xuICogYm90aCBjb250ZXh0IGFuZCBldmVudCBlbWl0dGVyIGFzIHB1cmUgY29tcG9uZW50cyBibG9jayBjb250ZXh0IHVwZGF0ZXMpXG4gKi9cblxudmFyIFRoZW1lUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhUaGVtZVByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lUHJvdmlkZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMudW5zdWJzY3JpYmVUb091dGVySWQgPSAtMTtcblxuICAgIF90aGlzLmdldFRoZW1lID0gX3RoaXMuZ2V0VGhlbWUuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSBUaGVtZVByb3ZpZGVyIHdyYXBwZXIgYW55d2hlcmUgYXJvdW5kIHRoaXMgdGhlbWUgcHJvdmlkZXIsIG1lcmdlIHRoaXMgdGhlbWVcbiAgICAvLyB3aXRoIHRoZSBvdXRlciB0aGVtZVxuICAgIHZhciBvdXRlckNvbnRleHQgPSB0aGlzLmNvbnRleHRbQ0hBTk5FTF9ORVhUXTtcbiAgICBpZiAob3V0ZXJDb250ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmVUb091dGVySWQgPSBvdXRlckNvbnRleHQuc3Vic2NyaWJlKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICBfdGhpczIub3V0ZXJUaGVtZSA9IHRoZW1lO1xuXG4gICAgICAgIGlmIChfdGhpczIuYnJvYWRjYXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfdGhpczIucHVibGlzaChfdGhpczIucHJvcHMudGhlbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmJyb2FkY2FzdCA9IGNyZWF0ZUJyb2FkY2FzdCh0aGlzLmdldFRoZW1lKCkpO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcyxcbiAgICAgICAgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQsIChfYmFiZWxIZWxwZXJzJGV4dGVuZHMgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzW0NIQU5ORUxfTkVYVF0gPSB7XG4gICAgICBnZXRUaGVtZTogdGhpcy5nZXRUaGVtZSxcbiAgICAgIHN1YnNjcmliZTogdGhpcy5icm9hZGNhc3Quc3Vic2NyaWJlLFxuICAgICAgdW5zdWJzY3JpYmU6IHRoaXMuYnJvYWRjYXN0LnVuc3Vic2NyaWJlXG4gICAgfSwgX2JhYmVsSGVscGVycyRleHRlbmRzW0NIQU5ORUxdID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5DaGFubmVsRGVwcmVjYXRlZCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBQYXRjaCB0aGUgb2xkIGBzdWJzY3JpYmVgIHByb3ZpZGUgdmlhIGBDSEFOTkVMYCBmb3Igb2xkZXIgY2xpZW50cy5cbiAgICAgIHZhciB1bnN1YnNjcmliZUlkID0gX3RoaXMzLmJyb2FkY2FzdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMzLmJyb2FkY2FzdC51bnN1YnNjcmliZSh1bnN1YnNjcmliZUlkKTtcbiAgICAgIH07XG4gICAgfSwgX2JhYmVsSGVscGVycyRleHRlbmRzKSk7XG4gIH07XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudGhlbWUgIT09IG5leHRQcm9wcy50aGVtZSkge1xuICAgICAgdGhpcy5wdWJsaXNoKG5leHRQcm9wcy50aGVtZSk7XG4gICAgfVxuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmVUb091dGVySWQgIT09IC0xKSB7XG4gICAgICB0aGlzLmNvbnRleHRbQ0hBTk5FTF9ORVhUXS51bnN1YnNjcmliZSh0aGlzLnVuc3Vic2NyaWJlVG9PdXRlcklkKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gR2V0IHRoZSB0aGVtZSBmcm9tIHRoZSBwcm9wcywgc3VwcG9ydGluZyBib3RoIChvdXRlclRoZW1lKSA9PiB7fSBhcyB3ZWxsIGFzIG9iamVjdCBub3RhdGlvblxuXG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUuZ2V0VGhlbWUgPSBmdW5jdGlvbiBnZXRUaGVtZShwYXNzZWRUaGVtZSkge1xuICAgIHZhciB0aGVtZSA9IHBhc3NlZFRoZW1lIHx8IHRoaXMucHJvcHMudGhlbWU7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhlbWUpKSB7XG4gICAgICB2YXIgbWVyZ2VkVGhlbWUgPSB0aGVtZSh0aGlzLm91dGVyVGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzUGxhaW5PYmplY3QobWVyZ2VkVGhlbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4gdGhlbWU9eygpID0+ICh7fSl9IScgOiAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gICAgfVxuICAgIGlmICghaXNQbGFpbk9iamVjdCh0aGVtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnIDogJycpO1xuICAgIH1cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRoaXMub3V0ZXJUaGVtZSwgdGhlbWUpO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiBwdWJsaXNoKHRoZW1lKSB7XG4gICAgdGhpcy5icm9hZGNhc3QucHVibGlzaCh0aGlzLmdldFRoZW1lKHRoZW1lKSk7XG4gIH07XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUaGVtZVByb3ZpZGVyO1xufShDb21wb25lbnQpO1xuXG5UaGVtZVByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9UaGVtZVByb3ZpZGVyJGNoaWxkQyA9IHt9LCBfVGhlbWVQcm92aWRlciRjaGlsZENbQ0hBTk5FTF0gPSBQcm9wVHlwZXMuZnVuYywgX1RoZW1lUHJvdmlkZXIkY2hpbGRDW0NIQU5ORUxfTkVYVF0gPSBDT05URVhUX0NIQU5ORUxfU0hBUEUsIF9UaGVtZVByb3ZpZGVyJGNoaWxkQyk7XG5UaGVtZVByb3ZpZGVyLmNvbnRleHRUeXBlcyA9IChfVGhlbWVQcm92aWRlciRjb250ZXggPSB7fSwgX1RoZW1lUHJvdmlkZXIkY29udGV4W0NIQU5ORUxfTkVYVF0gPSBDT05URVhUX0NIQU5ORUxfU0hBUEUsIF9UaGVtZVByb3ZpZGVyJGNvbnRleCk7XG5cbi8vIFxuXG4vLyBIQUNLIGZvciBnZW5lcmF0aW5nIGFsbCBzdGF0aWMgc3R5bGVzIHdpdGhvdXQgbmVlZGluZyB0byBhbGxvY2F0ZVxuLy8gYW4gZW1wdHkgZXhlY3V0aW9uIGNvbnRleHQgZXZlcnkgc2luZ2xlIHRpbWUuLi5cbnZhciBTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQgPSB7fTtcblxudmFyIF9TdHlsZWRDb21wb25lbnQgPSAoZnVuY3Rpb24gKENvbXBvbmVudFN0eWxlLCBjb25zdHJ1Y3RXaXRoT3B0aW9ucykge1xuICB2YXIgaWRlbnRpZmllcnMgPSB7fTtcblxuICAvKiBXZSBkZXBlbmQgb24gY29tcG9uZW50cyBoYXZpbmcgdW5pcXVlIElEcyAqL1xuICB2YXIgZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGdlbmVyYXRlSWQoX2Rpc3BsYXlOYW1lLCBwYXJlbnRDb21wb25lbnRJZCkge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiBfZGlzcGxheU5hbWUgIT09ICdzdHJpbmcnID8gJ3NjJyA6IGVzY2FwZShfZGlzcGxheU5hbWUpO1xuXG4gICAgdmFyIGNvbXBvbmVudElkID0gdm9pZCAwO1xuXG4gICAgLyoqXG4gICAgICogb25seSBmYWxsIGJhY2sgdG8gaGFzaGluZyB0aGUgY29tcG9uZW50IGluamVjdGlvbiBvcmRlciBpZlxuICAgICAqIGEgcHJvcGVyIGRpc3BsYXlOYW1lIGlzbid0IHByb3ZpZGVkIGJ5IHRoZSBiYWJlbCBwbHVnaW5cbiAgICAgKi9cbiAgICBpZiAoIV9kaXNwbGF5TmFtZSkge1xuICAgICAgdmFyIG5yID0gKGlkZW50aWZpZXJzW2Rpc3BsYXlOYW1lXSB8fCAwKSArIDE7XG4gICAgICBpZGVudGlmaWVyc1tkaXNwbGF5TmFtZV0gPSBucjtcblxuICAgICAgY29tcG9uZW50SWQgPSBkaXNwbGF5TmFtZSArICctJyArIENvbXBvbmVudFN0eWxlLmdlbmVyYXRlTmFtZShkaXNwbGF5TmFtZSArIG5yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcG9uZW50SWQgPSBkaXNwbGF5TmFtZSArICctJyArIENvbXBvbmVudFN0eWxlLmdlbmVyYXRlTmFtZShkaXNwbGF5TmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudENvbXBvbmVudElkICE9PSB1bmRlZmluZWQgPyBwYXJlbnRDb21wb25lbnRJZCArICctJyArIGNvbXBvbmVudElkIDogY29tcG9uZW50SWQ7XG4gIH07XG5cbiAgdmFyIEJhc2VTdHlsZWRDb21wb25lbnQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGluaGVyaXRzKEJhc2VTdHlsZWRDb21wb25lbnQsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQmFzZVN0eWxlZENvbXBvbmVudCgpIHtcbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VTdHlsZWRDb21wb25lbnQpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5hdHRycyA9IHt9LCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgdGhlbWU6IG51bGwsXG4gICAgICAgIGdlbmVyYXRlZENsYXNzTmFtZTogJydcbiAgICAgIH0sIF90aGlzLnVuc3Vic2NyaWJlSWQgPSAtMSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBCYXNlU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS51bnN1YnNjcmliZUZyb21Db250ZXh0ID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVGcm9tQ29udGV4dCgpIHtcbiAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlSWQgIT09IC0xKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtDSEFOTkVMX05FWFRdLnVuc3Vic2NyaWJlKHRoaXMudW5zdWJzY3JpYmVJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJhc2VTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLmJ1aWxkRXhlY3V0aW9uQ29udGV4dCA9IGZ1bmN0aW9uIGJ1aWxkRXhlY3V0aW9uQ29udGV4dCh0aGVtZSwgcHJvcHMpIHtcbiAgICAgIHZhciBhdHRycyA9IHRoaXMuY29uc3RydWN0b3IuYXR0cnM7XG5cbiAgICAgIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoe30sIHByb3BzLCB7IHRoZW1lOiB0aGVtZSB9KTtcbiAgICAgIGlmIChhdHRycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmF0dHJzID0gT2JqZWN0LmtleXMoYXR0cnMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIGF0dHIgPSBhdHRyc1trZXldO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgYWNjW2tleV0gPSB0eXBlb2YgYXR0ciA9PT0gJ2Z1bmN0aW9uJyA/IGF0dHIoY29udGV4dCkgOiBhdHRyO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHRoaXMuYXR0cnMpO1xuICAgIH07XG5cbiAgICBCYXNlU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoZW1lLCBwcm9wcykge1xuICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IHRoaXMuY29uc3RydWN0b3IsXG4gICAgICAgICAgYXR0cnMgPSBfY29uc3RydWN0b3IuYXR0cnMsXG4gICAgICAgICAgY29tcG9uZW50U3R5bGUgPSBfY29uc3RydWN0b3IuY29tcG9uZW50U3R5bGUsXG4gICAgICAgICAgd2FyblRvb01hbnlDbGFzc2VzID0gX2NvbnN0cnVjdG9yLndhcm5Ub29NYW55Q2xhc3NlcztcblxuICAgICAgdmFyIHN0eWxlU2hlZXQgPSB0aGlzLmNvbnRleHRbQ09OVEVYVF9LRVldIHx8IFN0eWxlU2hlZXQubWFzdGVyO1xuXG4gICAgICAvLyBzdGF0aWNhbHkgc3R5bGVkLWNvbXBvbmVudHMgZG9uJ3QgbmVlZCB0byBidWlsZCBhbiBleGVjdXRpb24gY29udGV4dCBvYmplY3QsXG4gICAgICAvLyBhbmQgc2hvdWxkbid0IGJlIGluY3JlYXNpbmcgdGhlIG51bWJlciBvZiBjbGFzcyBuYW1lc1xuICAgICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljICYmIGF0dHJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCwgc3R5bGVTaGVldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhlY3V0aW9uQ29udGV4dCA9IHRoaXMuYnVpbGRFeGVjdXRpb25Db250ZXh0KHRoZW1lLCBwcm9wcyk7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBjb21wb25lbnRTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuVG9vTWFueUNsYXNzZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHdhcm5Ub29NYW55Q2xhc3NlcyhjbGFzc05hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmFzZVN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjb21wb25lbnRTdHlsZSA9IHRoaXMuY29uc3RydWN0b3IuY29tcG9uZW50U3R5bGU7XG5cbiAgICAgIHZhciBzdHlsZWRDb250ZXh0ID0gdGhpcy5jb250ZXh0W0NIQU5ORUxfTkVYVF07XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSBzdGF0aWNhbHktc3R5bGVkIGNvbXBvbmVudCwgd2UgZG9uJ3QgbmVlZCB0byB0aGUgdGhlbWVcbiAgICAgIC8vIHRvIGdlbmVyYXRlIG9yIGJ1aWxkIHN0eWxlcy5cbiAgICAgIGlmIChjb21wb25lbnRTdHlsZS5pc1N0YXRpYykge1xuICAgICAgICB2YXIgZ2VuZXJhdGVkQ2xhc3NOYW1lID0gdGhpcy5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQsIHRoaXMucHJvcHMpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZ2VuZXJhdGVkQ2xhc3NOYW1lOiBnZW5lcmF0ZWRDbGFzc05hbWUgfSk7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgdGhlbWUgaW4gdGhlIGNvbnRleHQsIHN1YnNjcmliZSB0byB0aGUgZXZlbnQgZW1pdHRlci4gVGhpc1xuICAgICAgICAvLyBpcyBuZWNlc3NhcnkgZHVlIHRvIHB1cmUgY29tcG9uZW50cyBibG9ja2luZyBjb250ZXh0IHVwZGF0ZXMsIHRoaXMgY2lyY3VtdmVudHNcbiAgICAgICAgLy8gdGhhdCBieSB1cGRhdGluZyB3aGVuIGFuIGV2ZW50IGlzIGVtaXR0ZWRcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVkQ29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmUgPSBzdHlsZWRDb250ZXh0LnN1YnNjcmliZTtcblxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSWQgPSBzdWJzY3JpYmUoZnVuY3Rpb24gKG5leHRUaGVtZSkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCBiZSBjYWxsZWQgb25jZSBpbW1lZGlhdGVseVxuICAgICAgICAgIHZhciB0aGVtZSA9IGRldGVybWluZVRoZW1lKF90aGlzMi5wcm9wcywgbmV4dFRoZW1lLCBfdGhpczIuY29uc3RydWN0b3IuZGVmYXVsdFByb3BzKTtcbiAgICAgICAgICB2YXIgZ2VuZXJhdGVkQ2xhc3NOYW1lID0gX3RoaXMyLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoZW1lLCBfdGhpczIucHJvcHMpO1xuXG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdGhlbWU6IHRoZW1lLCBnZW5lcmF0ZWRDbGFzc05hbWU6IGdlbmVyYXRlZENsYXNzTmFtZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgICB2YXIgdGhlbWUgPSB0aGlzLnByb3BzLnRoZW1lIHx8IHt9O1xuICAgICAgICB2YXIgX2dlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhlbWUsIHRoaXMucHJvcHMpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdGhlbWU6IHRoZW1lLCBnZW5lcmF0ZWRDbGFzc05hbWU6IF9nZW5lcmF0ZWRDbGFzc05hbWUgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJhc2VTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSBzdGF0aWNhbHktc3R5bGVkIGNvbXBvbmVudCwgd2UgZG9uJ3QgbmVlZCB0byBsaXN0ZW4gdG9cbiAgICAgIC8vIHByb3BzIGNoYW5nZXMgdG8gdXBkYXRlIHN0eWxlc1xuICAgICAgdmFyIGNvbXBvbmVudFN0eWxlID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wb25lbnRTdHlsZTtcblxuICAgICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAob2xkU3RhdGUpIHtcbiAgICAgICAgdmFyIHRoZW1lID0gZGV0ZXJtaW5lVGhlbWUobmV4dFByb3BzLCBvbGRTdGF0ZS50aGVtZSwgX3RoaXMzLmNvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcyk7XG4gICAgICAgIHZhciBnZW5lcmF0ZWRDbGFzc05hbWUgPSBfdGhpczMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhlbWUsIG5leHRQcm9wcyk7XG5cbiAgICAgICAgcmV0dXJuIHsgdGhlbWU6IHRoZW1lLCBnZW5lcmF0ZWRDbGFzc05hbWU6IGdlbmVyYXRlZENsYXNzTmFtZSB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEJhc2VTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlRnJvbUNvbnRleHQoKTtcbiAgICB9O1xuXG4gICAgQmFzZVN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICB2YXIgaW5uZXJSZWYgPSB0aGlzLnByb3BzLmlubmVyUmVmO1xuICAgICAgdmFyIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuc3RhdGUuZ2VuZXJhdGVkQ2xhc3NOYW1lO1xuICAgICAgdmFyIF9jb25zdHJ1Y3RvcjIgPSB0aGlzLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHN0eWxlZENvbXBvbmVudElkID0gX2NvbnN0cnVjdG9yMi5zdHlsZWRDb21wb25lbnRJZCxcbiAgICAgICAgICB0YXJnZXQgPSBfY29uc3RydWN0b3IyLnRhcmdldDtcblxuXG4gICAgICB2YXIgaXNUYXJnZXRUYWcgPSBpc1RhZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gW1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICAgIHRoaXMucHJvcHMuY2xhc3NOYW1lLCBzdHlsZWRDb21wb25lbnRJZCwgdGhpcy5hdHRycy5jbGFzc05hbWUsIGdlbmVyYXRlZENsYXNzTmFtZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcblxuICAgICAgdmFyIGJhc2VQcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLmF0dHJzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzU3R5bGVkQ29tcG9uZW50KHRhcmdldCkpIHtcbiAgICAgICAgYmFzZVByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlUHJvcHMucmVmID0gaW5uZXJSZWY7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wc0ZvckVsZW1lbnQgPSBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcHJvcE5hbWUpIHtcbiAgICAgICAgLy8gRG9uJ3QgcGFzcyB0aHJvdWdoIG5vbiBIVE1MIHRhZ3MgdGhyb3VnaCB0byBIVE1MIGVsZW1lbnRzXG4gICAgICAgIC8vIGFsd2F5cyBvbWl0IGlubmVyUmVmXG4gICAgICAgIGlmIChwcm9wTmFtZSAhPT0gJ2lubmVyUmVmJyAmJiBwcm9wTmFtZSAhPT0gJ2NsYXNzTmFtZScgJiYgKCFpc1RhcmdldFRhZyB8fCB2YWxpZEF0dHIocHJvcE5hbWUpKSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIGFjY1twcm9wTmFtZV0gPSBfdGhpczQucHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIGJhc2VQcm9wcyk7XG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhcmdldCwgcHJvcHNGb3JFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhc2VTdHlsZWRDb21wb25lbnQ7XG4gIH0oQ29tcG9uZW50KTtcblxuICB2YXIgY3JlYXRlU3R5bGVkQ29tcG9uZW50ID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkQ29tcG9uZW50KHRhcmdldCwgb3B0aW9ucywgcnVsZXMpIHtcbiAgICB2YXIgX1N0eWxlZENvbXBvbmVudCRjb250O1xuXG4gICAgdmFyIF9vcHRpb25zJGRpc3BsYXlOYW1lID0gb3B0aW9ucy5kaXNwbGF5TmFtZSxcbiAgICAgICAgZGlzcGxheU5hbWUgPSBfb3B0aW9ucyRkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gaXNUYWcodGFyZ2V0KSA/ICdzdHlsZWQuJyArIHRhcmdldCA6ICdTdHlsZWQoJyArIGdldENvbXBvbmVudE5hbWUodGFyZ2V0KSArICcpJyA6IF9vcHRpb25zJGRpc3BsYXlOYW1lLFxuICAgICAgICBfb3B0aW9ucyRjb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICAgIGNvbXBvbmVudElkID0gX29wdGlvbnMkY29tcG9uZW50SWQgPT09IHVuZGVmaW5lZCA/IGdlbmVyYXRlSWQob3B0aW9ucy5kaXNwbGF5TmFtZSwgb3B0aW9ucy5wYXJlbnRDb21wb25lbnRJZCkgOiBfb3B0aW9ucyRjb21wb25lbnRJZCxcbiAgICAgICAgX29wdGlvbnMkUGFyZW50Q29tcG9uID0gb3B0aW9ucy5QYXJlbnRDb21wb25lbnQsXG4gICAgICAgIFBhcmVudENvbXBvbmVudCA9IF9vcHRpb25zJFBhcmVudENvbXBvbiA9PT0gdW5kZWZpbmVkID8gQmFzZVN0eWxlZENvbXBvbmVudCA6IF9vcHRpb25zJFBhcmVudENvbXBvbixcbiAgICAgICAgZXh0ZW5kaW5nUnVsZXMgPSBvcHRpb25zLnJ1bGVzLFxuICAgICAgICBhdHRycyA9IG9wdGlvbnMuYXR0cnM7XG5cblxuICAgIHZhciBzdHlsZWRDb21wb25lbnRJZCA9IG9wdGlvbnMuZGlzcGxheU5hbWUgJiYgb3B0aW9ucy5jb21wb25lbnRJZCA/IGVzY2FwZShvcHRpb25zLmRpc3BsYXlOYW1lKSArICctJyArIG9wdGlvbnMuY29tcG9uZW50SWQgOiBjb21wb25lbnRJZDtcblxuICAgIHZhciBjb21wb25lbnRTdHlsZSA9IG5ldyBDb21wb25lbnRTdHlsZShleHRlbmRpbmdSdWxlcyA9PT0gdW5kZWZpbmVkID8gcnVsZXMgOiBleHRlbmRpbmdSdWxlcy5jb25jYXQocnVsZXMpLCBhdHRycywgc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gICAgdmFyIFN0eWxlZENvbXBvbmVudCA9IGZ1bmN0aW9uIChfUGFyZW50Q29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhTdHlsZWRDb21wb25lbnQsIF9QYXJlbnRDb21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnQoKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9QYXJlbnRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWcpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzQ29tcG9uZW50SWQgPSBvcHRpb25zLmNvbXBvbmVudElkLFxuICAgICAgICAgICAgb3B0aW9uc1RvQ29weSA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFsnY29tcG9uZW50SWQnXSk7XG5cblxuICAgICAgICB2YXIgbmV3Q29tcG9uZW50SWQgPSBwcmV2aW91c0NvbXBvbmVudElkICYmIHByZXZpb3VzQ29tcG9uZW50SWQgKyAnLScgKyAoaXNUYWcodGFnKSA/IHRhZyA6IGVzY2FwZShnZXRDb21wb25lbnROYW1lKHRhZykpKTtcblxuICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zVG9Db3B5LCB7XG4gICAgICAgICAgY29tcG9uZW50SWQ6IG5ld0NvbXBvbmVudElkLFxuICAgICAgICAgIFBhcmVudENvbXBvbmVudDogU3R5bGVkQ29tcG9uZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFnLCBuZXdPcHRpb25zLCBydWxlcyk7XG4gICAgICB9O1xuXG4gICAgICBjcmVhdGVDbGFzcyhTdHlsZWRDb21wb25lbnQsIG51bGwsIFt7XG4gICAgICAgIGtleTogJ2V4dGVuZCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgIHZhciBydWxlc0Zyb21PcHRpb25zID0gb3B0aW9ucy5ydWxlcyxcbiAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50SWQgPSBvcHRpb25zLmNvbXBvbmVudElkLFxuICAgICAgICAgICAgICBvcHRpb25zVG9Db3B5ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgWydydWxlcycsICdjb21wb25lbnRJZCddKTtcblxuXG4gICAgICAgICAgdmFyIG5ld1J1bGVzID0gcnVsZXNGcm9tT3B0aW9ucyA9PT0gdW5kZWZpbmVkID8gcnVsZXMgOiBydWxlc0Zyb21PcHRpb25zLmNvbmNhdChydWxlcyk7XG5cbiAgICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zVG9Db3B5LCB7XG4gICAgICAgICAgICBydWxlczogbmV3UnVsZXMsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnRJZDogcGFyZW50Q29tcG9uZW50SWQsXG4gICAgICAgICAgICBQYXJlbnRDb21wb25lbnQ6IFN0eWxlZENvbXBvbmVudFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNyZWF0ZVN0eWxlZENvbXBvbmVudCwgdGFyZ2V0LCBuZXdPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFN0eWxlZENvbXBvbmVudDtcbiAgICB9KFBhcmVudENvbXBvbmVudCk7XG5cbiAgICBTdHlsZWRDb21wb25lbnQuY29udGV4dFR5cGVzID0gKF9TdHlsZWRDb21wb25lbnQkY29udCA9IHt9LCBfU3R5bGVkQ29tcG9uZW50JGNvbnRbQ0hBTk5FTF0gPSBQcm9wVHlwZXMuZnVuYywgX1N0eWxlZENvbXBvbmVudCRjb250W0NIQU5ORUxfTkVYVF0gPSBDT05URVhUX0NIQU5ORUxfU0hBUEUsIF9TdHlsZWRDb21wb25lbnQkY29udFtDT05URVhUX0tFWV0gPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuaW5zdGFuY2VPZihTdHlsZVNoZWV0KSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoU2VydmVyU3R5bGVTaGVldCldKSwgX1N0eWxlZENvbXBvbmVudCRjb250KTtcbiAgICBTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQgPSBzdHlsZWRDb21wb25lbnRJZDtcbiAgICBTdHlsZWRDb21wb25lbnQuYXR0cnMgPSBhdHRycztcbiAgICBTdHlsZWRDb21wb25lbnQuY29tcG9uZW50U3R5bGUgPSBjb21wb25lbnRTdHlsZTtcbiAgICBTdHlsZWRDb21wb25lbnQudGFyZ2V0ID0gdGFyZ2V0O1xuXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhkaXNwbGF5TmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0eWxlZENvbXBvbmVudDtcbiAgfTtcblxuICByZXR1cm4gY3JlYXRlU3R5bGVkQ29tcG9uZW50O1xufSk7XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzL2Jsb2IvbWFzdGVyL211cm11cmhhc2gyX2djLmpzXG5mdW5jdGlvbiBtdXJtdXJoYXNoKHN0cikge1xuICB2YXIgbCA9IHN0ci5sZW5ndGggfCAwLFxuICAgICAgaCA9IGwgfCAwLFxuICAgICAgaSA9IDAsXG4gICAgICBrO1xuXG4gIHdoaWxlIChsID49IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG5cbiAgICBrID0gKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgICBrIF49IGsgPj4+IDI0O1xuICAgIGsgPSAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoayA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuXG4gICAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNikgXiBrO1xuXG4gICAgbCAtPSA0O1xuICAgICsraTtcbiAgfVxuXG4gIHN3aXRjaCAobCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgfVxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPSAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoaCA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuICBoIF49IGggPj4+IDE1O1xuXG4gIHJldHVybiBoID4+PiAwO1xufVxuXG4vLyBcbnZhciBhcmVTdHlsZXNDYWNoZWFibGUgPSBJU19CUk9XU0VSO1xuXG52YXIgaXNTdGF0aWNSdWxlcyA9IGZ1bmN0aW9uIGlzU3RhdGljUnVsZXMocnVsZXMsIGF0dHJzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldO1xuXG4gICAgLy8gcmVjdXJzaXZlIGNhc2VcbiAgICBpZiAoQXJyYXkuaXNBcnJheShydWxlKSAmJiAhaXNTdGF0aWNSdWxlcyhydWxlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicgJiYgIWlzU3R5bGVkQ29tcG9uZW50KHJ1bGUpKSB7XG4gICAgICAvLyBmdW5jdGlvbnMgYXJlIGFsbG93ZWQgdG8gYmUgc3RhdGljIGlmIHRoZXkncmUganVzdCBiZWluZ1xuICAgICAgLy8gdXNlZCB0byBnZXQgdGhlIGNsYXNzbmFtZSBvZiBhIG5lc3RlZCBzdHlsZWQgY29wbW9uZW50XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGF0dHJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgIGZvciAodmFyIGtleSBpbiBhdHRycykge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIGlzSFJNRW5hYmxlZCA9IHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5ob3QgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxuLypcbiBDb21wb25lbnRTdHlsZSBpcyBhbGwgdGhlIENTUy1zcGVjaWZpYyBzdHVmZiwgbm90XG4gdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG52YXIgX0NvbXBvbmVudFN0eWxlID0gKGZ1bmN0aW9uIChuYW1lR2VuZXJhdG9yLCBmbGF0dGVuLCBzdHJpbmdpZnlSdWxlcykge1xuICAvKiBjb21iaW5lcyBoYXNoU3RyIChtdXJtdXJoYXNoKSBhbmQgbmFtZUdlbmVyYXRvciBmb3IgY29udmVuaWVuY2UgKi9cbiAgdmFyIGdlbmVyYXRlUnVsZUhhc2ggPSBmdW5jdGlvbiBnZW5lcmF0ZVJ1bGVIYXNoKHN0cikge1xuICAgIHJldHVybiBuYW1lR2VuZXJhdG9yKG11cm11cmhhc2goc3RyKSk7XG4gIH07XG5cbiAgdmFyIENvbXBvbmVudFN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBvbmVudFN0eWxlKHJ1bGVzLCBhdHRycywgY29tcG9uZW50SWQpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudFN0eWxlKTtcblxuICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgdGhpcy5pc1N0YXRpYyA9ICFpc0hSTUVuYWJsZWQgJiYgaXNTdGF0aWNSdWxlcyhydWxlcywgYXR0cnMpO1xuICAgICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgICBpZiAoIVN0eWxlU2hlZXQubWFzdGVyLmhhc0lkKGNvbXBvbmVudElkKSkge1xuICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gWycuJyArIGNvbXBvbmVudElkICsgJyB7fSddIDogW107XG5cbiAgICAgICAgU3R5bGVTaGVldC5tYXN0ZXIuZGVmZXJyZWRJbmplY3QoY29tcG9uZW50SWQsIHBsYWNlaG9sZGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEZsYXR0ZW5zIGEgcnVsZSBzZXQgaW50byB2YWxpZCBDU1NcbiAgICAgKiBIYXNoZXMgaXQsIHdyYXBzIHRoZSB3aG9sZSBjaHVuayBpbiBhIC5oYXNoMTIzNCB7fVxuICAgICAqIFJldHVybnMgdGhlIGhhc2ggdG8gYmUgaW5qZWN0ZWQgb24gcmVuZGVyKClcbiAgICAgKiAqL1xuXG5cbiAgICBDb21wb25lbnRTdHlsZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gICAgICB2YXIgaXNTdGF0aWMgPSB0aGlzLmlzU3RhdGljLFxuICAgICAgICAgIGNvbXBvbmVudElkID0gdGhpcy5jb21wb25lbnRJZCxcbiAgICAgICAgICBsYXN0Q2xhc3NOYW1lID0gdGhpcy5sYXN0Q2xhc3NOYW1lO1xuXG4gICAgICBpZiAoYXJlU3R5bGVzQ2FjaGVhYmxlICYmIGlzU3RhdGljICYmIGxhc3RDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGFzdENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQpO1xuICAgICAgdmFyIG5hbWUgPSBnZW5lcmF0ZVJ1bGVIYXNoKHRoaXMuY29tcG9uZW50SWQgKyBmbGF0Q1NTLmpvaW4oJycpKTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZChjb21wb25lbnRJZCwgbmFtZSkpIHtcbiAgICAgICAgdmFyIGNzcyA9IHN0cmluZ2lmeVJ1bGVzKGZsYXRDU1MsICcuJyArIG5hbWUpO1xuICAgICAgICBzdHlsZVNoZWV0LmluamVjdCh0aGlzLmNvbXBvbmVudElkLCBjc3MsIG5hbWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxhc3RDbGFzc05hbWUgPSBuYW1lO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfTtcblxuICAgIENvbXBvbmVudFN0eWxlLmdlbmVyYXRlTmFtZSA9IGZ1bmN0aW9uIGdlbmVyYXRlTmFtZShzdHIpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZVJ1bGVIYXNoKHN0cik7XG4gICAgfTtcblxuICAgIHJldHVybiBDb21wb25lbnRTdHlsZTtcbiAgfSgpO1xuXG4gIHJldHVybiBDb21wb25lbnRTdHlsZTtcbn0pO1xuXG4vLyBcbi8vIFRoYW5rcyB0byBSZWFjdERPTUZhY3RvcmllcyBmb3IgdGhpcyBoYW5keSBsaXN0IVxuXG52YXIgZG9tRWxlbWVudHMgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsXG5cbi8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxuLy8gXG52YXIgX3N0eWxlZCA9IChmdW5jdGlvbiAoc3R5bGVkQ29tcG9uZW50LCBjb25zdHJ1Y3RXaXRoT3B0aW9ucykge1xuICB2YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKHRhZykge1xuICAgIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhzdHlsZWRDb21wb25lbnQsIHRhZyk7XG4gIH07XG5cbiAgLy8gU2hvcnRoYW5kcyBmb3IgYWxsIHZhbGlkIEhUTUwgRWxlbWVudHNcbiAgZG9tRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG9tRWxlbWVudCkge1xuICAgIHN0eWxlZFtkb21FbGVtZW50XSA9IHN0eWxlZChkb21FbGVtZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHN0eWxlZDtcbn0pO1xuXG4vLyBcbnZhciByZXBsYWNlV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2VXaGl0ZXNwYWNlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcc3xcXFxcbi9nLCAnJyk7XG59O1xuXG52YXIgX2tleWZyYW1lcyA9IChmdW5jdGlvbiAobmFtZUdlbmVyYXRvciwgc3RyaW5naWZ5UnVsZXMsIGNzcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgdmFyIHJ1bGVzID0gY3NzLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB2YXIgbmFtZSA9IG5hbWVHZW5lcmF0b3IobXVybXVyaGFzaChyZXBsYWNlV2hpdGVzcGFjZShKU09OLnN0cmluZ2lmeShydWxlcykpKSk7XG4gICAgdmFyIGlkID0gJ3NjLWtleWZyYW1lcy0nICsgbmFtZTtcblxuICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoaWQsIG5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0LmluamVjdChpZCwgc3RyaW5naWZ5UnVsZXMocnVsZXMsIG5hbWUsICdAa2V5ZnJhbWVzJyksIG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xuICB9O1xufSk7XG5cbi8vIFxudmFyIF9pbmplY3RHbG9iYWwgPSAoZnVuY3Rpb24gKHN0cmluZ2lmeVJ1bGVzLCBjc3MpIHtcbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICB2YXIgc3R5bGVTaGVldCA9IFN0eWxlU2hlZXQubWFzdGVyO1xuICAgIHZhciBydWxlcyA9IGNzcy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGhhc2ggPSBtdXJtdXJoYXNoKEpTT04uc3RyaW5naWZ5KHJ1bGVzKSk7XG4gICAgdmFyIGlkID0gJ3NjLWdsb2JhbC0nICsgaGFzaDtcblxuICAgIGlmICghc3R5bGVTaGVldC5oYXNJZChpZCkpIHtcbiAgICAgIHN0eWxlU2hlZXQuaW5qZWN0KGlkLCBzdHJpbmdpZnlSdWxlcyhydWxlcykpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gaW5qZWN0R2xvYmFsO1xufSk7XG5cbi8vIFxuXG52YXIgX2NvbnN0cnVjdFdpdGhPcHRpb25zID0gKGZ1bmN0aW9uIChjc3MpIHtcbiAgdmFyIGNvbnN0cnVjdFdpdGhPcHRpb25zID0gZnVuY3Rpb24gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgIGlmICh0eXBlb2YgdGFnICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGFnICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICdDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJyArIFN0cmluZyh0YWcpIDogJycpO1xuICAgIH1cblxuICAgIC8qIFRoaXMgaXMgY2FsbGFibGUgZGlyZWN0bHkgYXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiAqL1xuICAgIC8vICRGbG93Rml4TWU6IE5vdCB0eXBlZCB0byBhdm9pZCBkZXN0cnVjdHVyaW5nIGFyZ3VtZW50c1xuICAgIHZhciB0ZW1wbGF0ZUZ1bmN0aW9uID0gZnVuY3Rpb24gdGVtcGxhdGVGdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRDb25zdHJ1Y3Rvcih0YWcsIG9wdGlvbnMsIGNzcy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICAvKiBJZiBjb25maWcgbWV0aG9kcyBhcmUgY2FsbGVkLCB3cmFwIHVwIGEgbmV3IHRlbXBsYXRlIGZ1bmN0aW9uIGFuZCBtZXJnZSBvcHRpb25zICovXG4gICAgdGVtcGxhdGVGdW5jdGlvbi53aXRoQ29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBjb25maWcpKTtcbiAgICB9O1xuICAgIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICBhdHRyczogX2V4dGVuZHMoe30sIG9wdGlvbnMuYXR0cnMgfHwge30sIGF0dHJzKVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGVtcGxhdGVGdW5jdGlvbjtcbiAgfTtcblxuICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnM7XG59KTtcblxuLy8gXG4vKiBnbG9iYWxzIFJlYWN0Q2xhc3MgKi9cblxudmFyIHdyYXBXaXRoVGhlbWUgPSBmdW5jdGlvbiB3cmFwV2l0aFRoZW1lKENvbXBvbmVudCQkMSkge1xuICB2YXIgX1dpdGhUaGVtZSRjb250ZXh0VHlwO1xuXG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50JCQxLmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudCQkMS5uYW1lIHx8ICdDb21wb25lbnQnO1xuICB2YXIgaXNTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50ID0gdHlwZW9mIENvbXBvbmVudCQkMSA9PT0gJ2Z1bmN0aW9uJyAmJiAhKENvbXBvbmVudCQkMS5wcm90b3R5cGUgJiYgJ2lzUmVhY3RDb21wb25lbnQnIGluIENvbXBvbmVudCQkMS5wcm90b3R5cGUpO1xuXG4gIC8vIE5PVEU6IFdlIGNhbid0IHBhc3MgYSByZWYgdG8gYSBzdGF0ZWxlc3MgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgdmFyIHNob3VsZFNldElubmVyUmVmID0gaXNTdHlsZWRDb21wb25lbnQoQ29tcG9uZW50JCQxKSB8fCBpc1N0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQ7XG5cbiAgdmFyIFdpdGhUaGVtZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoV2l0aFRoZW1lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFdpdGhUaGVtZSgpIHtcbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhUaGVtZSk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge30sIF90aGlzLnVuc3Vic2NyaWJlSWQgPSAtMSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICAvLyBOT1RFOiBUaGlzIGlzIHNvIHRoYXQgaXNTdHlsZWRDb21wb25lbnQgcGFzc2VzIGZvciB0aGUgaW5uZXJSZWYgdW53cmFwcGluZ1xuXG5cbiAgICBXaXRoVGhlbWUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZGVmYXVsdFByb3BzID0gdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHM7XG5cbiAgICAgIHZhciBzdHlsZWRDb250ZXh0ID0gdGhpcy5jb250ZXh0W0NIQU5ORUxfTkVYVF07XG4gICAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUodGhpcy5wcm9wcywgdW5kZWZpbmVkLCBkZWZhdWx0UHJvcHMpO1xuICAgICAgaWYgKHN0eWxlZENvbnRleHQgPT09IHVuZGVmaW5lZCAmJiB0aGVtZVByb3AgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcycpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZWRDb250ZXh0ID09PSB1bmRlZmluZWQgJiYgdGhlbWVQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRoZW1lOiB0aGVtZVByb3AgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3Vic2NyaWJlID0gc3R5bGVkQ29udGV4dC5zdWJzY3JpYmU7XG5cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZUlkID0gc3Vic2NyaWJlKGZ1bmN0aW9uIChuZXh0VGhlbWUpIHtcbiAgICAgICAgICB2YXIgdGhlbWUgPSBkZXRlcm1pbmVUaGVtZShfdGhpczIucHJvcHMsIG5leHRUaGVtZSwgZGVmYXVsdFByb3BzKTtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyB0aGVtZTogdGhlbWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBXaXRoVGhlbWUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFByb3BzO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChvbGRTdGF0ZSkge1xuICAgICAgICB2YXIgdGhlbWUgPSBkZXRlcm1pbmVUaGVtZShuZXh0UHJvcHMsIG9sZFN0YXRlLnRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgICAgIHJldHVybiB7IHRoZW1lOiB0aGVtZSB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFdpdGhUaGVtZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlSWQgIT09IC0xKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtDSEFOTkVMX05FWFRdLnVuc3Vic2NyaWJlKHRoaXMudW5zdWJzY3JpYmVJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFdpdGhUaGVtZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0aGVtZTogdGhpcy5zdGF0ZS50aGVtZVxuICAgICAgfSwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICghc2hvdWxkU2V0SW5uZXJSZWYpIHtcbiAgICAgICAgcHJvcHMucmVmID0gcHJvcHMuaW5uZXJSZWY7XG4gICAgICAgIGRlbGV0ZSBwcm9wcy5pbm5lclJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50JCQxLCBwcm9wcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBXaXRoVGhlbWU7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSAnV2l0aFRoZW1lKCcgKyBjb21wb25lbnROYW1lICsgJyknO1xuICBXaXRoVGhlbWUuc3R5bGVkQ29tcG9uZW50SWQgPSAnd2l0aFRoZW1lJztcbiAgV2l0aFRoZW1lLmNvbnRleHRUeXBlcyA9IChfV2l0aFRoZW1lJGNvbnRleHRUeXAgPSB7fSwgX1dpdGhUaGVtZSRjb250ZXh0VHlwW0NIQU5ORUxdID0gUHJvcFR5cGVzLmZ1bmMsIF9XaXRoVGhlbWUkY29udGV4dFR5cFtDSEFOTkVMX05FWFRdID0gQ09OVEVYVF9DSEFOTkVMX1NIQVBFLCBfV2l0aFRoZW1lJGNvbnRleHRUeXApO1xuXG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhXaXRoVGhlbWUsIENvbXBvbmVudCQkMSk7XG59O1xuXG4vLyBcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTID0ge1xuICBTdHlsZVNoZWV0OiBTdHlsZVNoZWV0XG59O1xuXG4vLyBcblxuLyogSW1wb3J0IHNpbmdsZXRvbnMgKi9cbi8qIEltcG9ydCBzaW5nbGV0b24gY29uc3RydWN0b3JzICovXG4vKiBJbXBvcnQgY29tcG9uZW50cyAqL1xuLyogSW1wb3J0IEhpZ2hlciBPcmRlciBDb21wb25lbnRzICovXG4vKiBXYXJuaW5nIGlmIHlvdSd2ZSBpbXBvcnRlZCB0aGlzIGZpbGUgb24gUmVhY3QgTmF0aXZlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5cIiArIFwiUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuXCIgKyAnUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZScpO1xufVxuXG4vKiBXYXJuaW5nIGlmIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiBzdHlsZWQtY29tcG9uZW50cyAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddID0gd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddIHx8IDA7XG5cbiAgaWYgKHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9PT0gMSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2YgJ3N0eWxlZC1jb21wb25lbnRzJyBpbml0aWFsaXplZCBpbiB0aGlzIGFwcGxpY2F0aW9uLiBcIiArICdUaGlzIG1heSBjYXVzZSBkeW5hbWljIHN0eWxlcyBub3QgcmVuZGVyaW5nIHByb3Blcmx5LCBlcnJvcnMgaGFwcGVuaW5nIGR1cmluZyByZWh5ZHJhdGlvbiBwcm9jZXNzICcgKyAnYW5kIG1ha2VzIHlvdSBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBhIGdvb2QgcmVhc29uLlxcblxcbicgKyAnU2VlIGh0dHBzOi8vcy1jLnNoLzJCQVh6ZWQgZm9yIG1vcmUgaW5mby4nKTtcbiAgfVxuXG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSArPSAxO1xufVxuXG4vKiBJbnN0YW50aWF0ZSBzaW5nbGV0b25zICovXG52YXIgQ29tcG9uZW50U3R5bGUgPSBfQ29tcG9uZW50U3R5bGUoZ2VuZXJhdGVBbHBoYWJldGljTmFtZSwgZmxhdHRlbiwgc3RyaW5naWZ5UnVsZXMpO1xudmFyIGNvbnN0cnVjdFdpdGhPcHRpb25zID0gX2NvbnN0cnVjdFdpdGhPcHRpb25zKGNzcyk7XG52YXIgU3R5bGVkQ29tcG9uZW50ID0gX1N0eWxlZENvbXBvbmVudChDb21wb25lbnRTdHlsZSwgY29uc3RydWN0V2l0aE9wdGlvbnMpO1xuXG4vKiBJbnN0YW50aWF0ZSBleHBvcnRlZCBzaW5nbGV0b25zICovXG52YXIga2V5ZnJhbWVzID0gX2tleWZyYW1lcyhnZW5lcmF0ZUFscGhhYmV0aWNOYW1lLCBzdHJpbmdpZnlSdWxlcywgY3NzKTtcbnZhciBpbmplY3RHbG9iYWwgPSBfaW5qZWN0R2xvYmFsKHN0cmluZ2lmeVJ1bGVzLCBjc3MpO1xudmFyIHN0eWxlZCA9IF9zdHlsZWQoU3R5bGVkQ29tcG9uZW50LCBjb25zdHJ1Y3RXaXRoT3B0aW9ucyk7XG5cbmV4cG9ydCB7IGNzcywga2V5ZnJhbWVzLCBpbmplY3RHbG9iYWwsIGlzU3R5bGVkQ29tcG9uZW50LCBjb25zb2xpZGF0ZVN0cmVhbWVkU3R5bGVzLCBUaGVtZVByb3ZpZGVyLCB3cmFwV2l0aFRoZW1lIGFzIHdpdGhUaGVtZSwgU2VydmVyU3R5bGVTaGVldCwgU3R5bGVTaGVldE1hbmFnZXIsIF9fRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9IQVVOVEVEX0JZX1NQT09LWV9HSE9TVFMgfTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXMuanMubWFwXG4iLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeSgpKSA6XG5cdFx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddID8gZGVmaW5lKGZhY3RvcnkoKSkgOlxuXHRcdFx0KHdpbmRvd1snc3R5bGlzUnVsZVNoZWV0J10gPSBmYWN0b3J5KCkpXG59KGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCdcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluc2VydFJ1bGUpIHtcblx0XHR2YXIgZGVsaW1pdGVyID0gJy8qfCovJ1xuXHRcdHZhciBuZWVkbGUgPSBkZWxpbWl0ZXIrJ30nXG5cblx0XHRmdW5jdGlvbiB0b1NoZWV0IChibG9jaykge1xuXHRcdFx0aWYgKGJsb2NrKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGluc2VydFJ1bGUoYmxvY2sgKyAnfScpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJ1bGVTaGVldCAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuXHRcdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRcdC8vIHByb3BlcnR5XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyBAaW1wb3J0XG5cdFx0XHRcdFx0aWYgKGRlcHRoID09PSAwICYmIGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gNjQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShjb250ZW50Kyc7JyksICcnXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gc2VsZWN0b3Jcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGlmIChucyA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgZGVsaW1pdGVyXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gYXQtcnVsZVxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0c3dpdGNoIChucykge1xuXHRcdFx0XHRcdFx0Ly8gQGZvbnQtZmFjZSwgQHBhZ2Vcblx0XHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0Y2FzZSAxMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKHNlbGVjdG9yc1swXStjb250ZW50KSwgJydcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIC0yOlxuXHRcdFx0XHRcdGNvbnRlbnQuc3BsaXQobmVlZGxlKS5mb3JFYWNoKHRvU2hlZXQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KSlcbiIsIi8qXG4gKiAgICAgICAgICBfXyAgICAgICAgX19fXG4gKiAgICBfX19fXy8gL19fXyAgX18vIChfKV9fX19cbiAqICAgLyBfX18vIF9fLyAvIC8gLyAvIC8gX19fL1xuICogIChfXyAgKSAvXy8gL18vIC8gLyAoX18gIClcbiAqIC9fX19fL1xcX18vXFxfXywgL18vXy9fX19fL1xuICogICAgICAgICAgL19fX18vXG4gKlxuICogbGlnaHQgLSB3ZWlnaHQgY3NzIHByZXByb2Nlc3NvciBAbGljZW5jZSBNSVRcbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7LyogZXNsaW50LWRpc2FibGUgKi9cblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeShudWxsKSkgOlxuXHRcdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSA/IGRlZmluZShmYWN0b3J5KG51bGwpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXMnXSA9IGZhY3RvcnkobnVsbCkpXG59KC8qKiBAcGFyYW0geyo9fSBvcHRpb25zICovZnVuY3Rpb24gZmFjdG9yeSAob3B0aW9ucykgey8qIGVzbGludC1kaXNhYmxlICovXG5cblx0J3VzZSBzdHJpY3QnXG5cblx0LyoqXG5cdCAqIE5vdGVzXG5cdCAqXG5cdCAqIFRoZSBbJzxtZXRob2QgbmFtZT4nXSBwYXR0ZXJuIGlzIHVzZWQgdG8gc3VwcG9ydCBjbG9zdXJlIGNvbXBpbGVyXG5cdCAqIHRoZSBqc2RvYyBzaWduYXR1cmVzIGFyZSBhbHNvIHVzZWQgdG8gdGhlIHNhbWUgZWZmZWN0XG5cdCAqXG5cdCAqIC0tLS1cblx0ICpcblx0ICogaW50ICsgaW50ICsgaW50ID09PSBuNCBbZmFzdGVyXVxuXHQgKlxuXHQgKiB2c1xuXHQgKlxuXHQgKiBpbnQgPT09IG4xICYmIGludCA9PT0gbjIgJiYgaW50ID09PSBuM1xuXHQgKlxuXHQgKiAtLS0tXG5cdCAqXG5cdCAqIHN3aXRjaCAoaW50KSB7IGNhc2UgaW50cy4uLn0gW2Zhc3Rlcl1cblx0ICpcblx0ICogdnNcblx0ICpcblx0ICogaWYgKGludCA9PSAxICYmIGludCA9PT0gMiAuLi4pXG5cdCAqXG5cdCAqIC0tLS1cblx0ICpcblx0ICogVGhlIChmaXJzdCpuMSArIHNlY29uZCpuMiArIHRoaXJkKm4zKSBmb3JtYXQgdXNlZCBpbiB0aGUgcHJvcGVydHkgcGFyc2VyXG5cdCAqIGlzIGEgc2ltcGxlIHdheSB0byBoYXNoIHRoZSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzXG5cdCAqIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGluZGV4IHRoZXkgb2NjdXIgaW5cblx0ICogc2luY2UgYW55IG51bWJlciBvZiAzIGNoYXJhY3RlciBzZXF1ZW5jZXMgY291bGQgcHJvZHVjZSBkdXBsaWNhdGVzLlxuXHQgKlxuXHQgKiBPbiB0aGUgb3RoZXIgaGFuZCBzZXF1ZW5jZXMgdGhhdCBhcmUgZGlyZWN0bHkgdGllZCB0byB0aGUgaW5kZXggb2YgdGhlIGNoYXJhY3RlclxuXHQgKiByZXNvbHZlIGEgZmFyIG1vcmUgYWNjdXJhdGUgbWVhc3VyZSwgaXQncyBhbHNvIGZhc3RlclxuXHQgKiB0byBldmFsdWF0ZSBvbmUgY29uZGl0aW9uIGluIGEgc3dpdGNoIHN0YXRlbWVudFxuXHQgKiB0aGFuIHRocmVlIGluIGFuIGlmIHN0YXRlbWVudCByZWdhcmRsZXNzIG9mIHRoZSBhZGRlZCBtYXRoLlxuXHQgKlxuXHQgKiBUaGlzIGFsbG93cyB0aGUgdmVuZG9yIHByZWZpeGVyIHRvIGJlIGJvdGggc21hbGwgYW5kIGZhc3QuXG5cdCAqL1xuXG5cdHZhciBudWxscHRuID0gL15cXDArL2cgLyogbWF0Y2hlcyBsZWFkaW5nIG51bGwgY2hhcmFjdGVycyAqL1xuXHR2YXIgZm9ybWF0cHRuID0gL1tcXDBcXHJcXGZdL2cgLyogbWF0Y2hlcyBuZXcgbGluZSwgbnVsbCBhbmQgZm9ybWZlZWQgY2hhcmFjdGVycyAqL1xuXHR2YXIgY29sb25wdG4gPSAvOiAqL2cgLyogc3BsaXRzIGFuaW1hdGlvbiBydWxlcyAqL1xuXHR2YXIgY3Vyc29ycHRuID0gL3pvb3xncmEvIC8qIGFzc2VydCBjdXJzb3IgdmFyaWVudCAqL1xuXHR2YXIgdHJhbnNmb3JtcHRuID0gLyhbLDogXSkodHJhbnNmb3JtKS9nIC8qIHZlbmRvciBwcmVmaXggdHJhbnNmb3JtLCBvbGRlciB3ZWJraXQgKi9cblx0dmFyIGFuaW1hdGlvbnB0biA9IC8sK1xccyooPyFbXihdKlspXSkvZyAvKiBzcGxpdHMgbXVsdGlwbGUgc2hvcnRoYW5kIG5vdGF0aW9uIGFuaW1hdGlvbnMgKi9cblx0dmFyIHByb3BlcnRpZXNwdG4gPSAvICtcXHMqKD8hW14oXSpbKV0pL2cgLyogYW5pbWF0aW9uIHByb3BlcnRpZXMgKi9cblx0dmFyIGVsZW1lbnRwdG4gPSAvICpbXFwwXSAqL2cgLyogc2VsZWN0b3IgZWxlbWVudHMgKi9cblx0dmFyIHNlbGVjdG9ycHRuID0gLyxcXHIrPy9nIC8qIHNwbGl0cyBzZWxlY3RvcnMgKi9cblx0dmFyIGFuZHB0biA9IC8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nIC8qIG1hdGNoICYgKi9cblx0dmFyIGVzY2FwZXB0biA9IC86Z2xvYmFsXFwoKCg/OlteXFwoXFwpXFxbXFxdXSp8XFxbLipcXF18XFwoW15cXChcXCldKlxcKSkqKVxcKS9nIC8qIG1hdGNoZXMgOmdsb2JhbCguKikgKi9cblx0dmFyIGludmFsaWRwdG4gPSAvXFxXKy9nIC8qIHJlbW92ZXMgaW52YWxpZCBjaGFyYWN0ZXJzIGZyb20ga2V5ZnJhbWVzICovXG5cdHZhciBrZXlmcmFtZXB0biA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyAvKiBtYXRjaGVzIEBrZXlmcmFtZXMgJDEgKi9cblx0dmFyIHBsY2hvbGRycHRuID0gLzo6KHBsYWNlKS9nIC8qIG1hdGNoIDo6cGxhY2Vob2xkZXIgdmFyaWVudCAqL1xuXHR2YXIgcmVhZG9ubHlwdG4gPSAvOihyZWFkLW9ubHkpL2cgLyogbWF0Y2ggOnJlYWQtb25seSB2YXJpZW50ICovXG5cdHZhciBiZWZvcmVwdG4gPSAvXFxzKyg/PVt7XFxdOz06Pl0pL2cgLyogbWF0Y2hlcyBcXHMgYmVmb3JlIF0gOyA9IDogKi9cblx0dmFyIGFmdGVycHRuID0gLyhbW309Oj5dKVxccysvZyAvKiBtYXRjaGVzIFxccyBhZnRlciBjaGFyYWN0ZXJzIFsgfSA9IDogKi9cblx0dmFyIHRhaWxwdG4gPSAvKFxce1tee10rPyk7KD89XFx9KS9nIC8qIG1hdGNoZXMgdGFpbCBzZW1pLWNvbG9ucyA7fSAqL1xuXHR2YXIgd2hpdGVwdG4gPSAvXFxzezIsfS9nIC8qIG1hdGNoZXMgcmVwZWF0aW5nIHdoaXRlc3BhY2UgKi9cblx0dmFyIHBzZXVkb3B0biA9IC8oW15cXChdKSg6KykgKi9nIC8qIHBzZXVkbyBlbGVtZW50ICovXG5cdHZhciB3cml0aW5ncHRuID0gL1tzdmhdXFx3Ky1bdGJscl17Mn0vIC8qIG1hdGNoIHdyaXRpbmcgbW9kZSBwcm9wZXJ0eSB2YWx1ZXMgKi9cblx0dmFyIGdyYWRpZW50cHRuID0gLyhbXFx3LV0rdFxcKCkvZyAvKiBtYXRjaCAqZ3JhZGllbnQgcHJvcGVydHkgKi9cblx0dmFyIHN1cHBvcnRzcHRuID0gL1xcKFxccyooLiopXFxzKlxcKS9nIC8qIG1hdGNoIHN1cHBvcnRzIChncm91cHMpICovXG5cdHZhciBwcm9wZXJ0eXB0biA9IC8oW1xcc1xcU10qPyk7L2cgLyogbWF0Y2ggcHJvcGVydGllcyBsZWFkaW5nIHNlbWljb2xvbiAqL1xuXHR2YXIgc2VsZnB0biA9IC8tc2VsZnxmbGV4LS9nIC8qIG1hdGNoIGZsZXgtIGFuZCAtc2VsZiBpbiBhbGlnbi1zZWxmOiBmbGV4LSo7ICovXG5cdHZhciBwc2V1ZG9mbXQgPSAvW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8gLyogZXh0cmF0cyA6cmVhZG9ubHkgb3IgOnBsYWNob2xkZXIgZnJvbSBzZWxlY3RvciAqL1xuXHR2YXIgdHJpbXB0biA9IC9bIFxcdF0rJC8gLyogbWF0Y2ggdGFpbCB3aGl0c3BhY2UgKi9cblx0dmFyIGRpbWVuc2lvbnB0biA9IC9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8gLyogbWF0Y2ggbWF4L21pbi9maXQtY29udGVudCwgZmlsbC1hdmFpbGFibGVcblxuXHQvKiB2ZW5kb3JzICovXG5cdHZhciB3ZWJraXQgPSAnLXdlYmtpdC0nXG5cdHZhciBtb3ogPSAnLW1vei0nXG5cdHZhciBtcyA9ICctbXMtJ1xuXG5cdC8qIGNoYXJhY3RlciBjb2RlcyAqL1xuXHR2YXIgU0VNSUNPTE9OID0gNTkgLyogOyAqL1xuXHR2YXIgQ0xPU0VCUkFDRVMgPSAxMjUgLyogfSAqL1xuXHR2YXIgT1BFTkJSQUNFUyA9IDEyMyAvKiB7ICovXG5cdHZhciBPUEVOUEFSRU5USEVTRVMgPSA0MCAvKiAoICovXG5cdHZhciBDTE9TRVBBUkVOVEhFU0VTID0gNDEgLyogKSAqL1xuXHR2YXIgT1BFTkJSQUNLRVQgPSA5MSAvKiBbICovXG5cdHZhciBDTE9TRUJSQUNLRVQgPSA5MyAvKiBdICovXG5cdHZhciBORVdMSU5FID0gMTAgLyogXFxuICovXG5cdHZhciBDQVJSSUFHRSA9IDEzIC8qIFxcciAqL1xuXHR2YXIgVEFCID0gOSAvKiBcXHQgKi9cblx0dmFyIEFUID0gNjQgLyogQCAqL1xuXHR2YXIgU1BBQ0UgPSAzMiAvKiAgICovXG5cdHZhciBBTkQgPSAzOCAvKiAmICovXG5cdHZhciBEQVNIID0gNDUgLyogLSAqL1xuXHR2YXIgVU5ERVJTQ09SRSA9IDk1IC8qIF8gKi9cblx0dmFyIFNUQVIgPSA0MiAvKiAqICovXG5cdHZhciBDT01NQSA9IDQ0IC8qICwgKi9cblx0dmFyIENPTE9OID0gNTggLyogOiAqL1xuXHR2YXIgU0lOR0xFUVVPVEUgPSAzOSAvKiAnICovXG5cdHZhciBET1VCTEVRVU9URSA9IDM0IC8qIFwiICovXG5cdHZhciBGT1dBUkRTTEFTSCA9IDQ3IC8qIC8gKi9cblx0dmFyIEdSRUFURVJUSEFOID0gNjIgLyogPiAqL1xuXHR2YXIgUExVUyA9IDQzIC8qICsgKi9cblx0dmFyIFRJTERFID0gMTI2IC8qIH4gKi9cblx0dmFyIE5VTEwgPSAwIC8qIFxcMCAqL1xuXHR2YXIgRk9STUZFRUQgPSAxMiAvKiBcXGYgKi9cblx0dmFyIFZFUlRJQ0FMVEFCID0gMTEgLyogXFx2ICovXG5cblx0Lyogc3BlY2lhbCBpZGVudGlmaWVycyAqL1xuXHR2YXIgS0VZRlJBTUUgPSAxMDcgLyogayAqL1xuXHR2YXIgTUVESUEgPSAxMDkgLyogbSAqL1xuXHR2YXIgU1VQUE9SVFMgPSAxMTUgLyogcyAqL1xuXHR2YXIgUExBQ0VIT0xERVIgPSAxMTIgLyogcCAqL1xuXHR2YXIgUkVBRE9OTFkgPSAxMTEgLyogbyAqL1xuXHR2YXIgSU1QT1JUID0gMTY5IC8qIDxhdD5pICovXG5cdHZhciBDSEFSU0VUID0gMTYzIC8qIDxhdD5jICovXG5cdHZhciBET0NVTUVOVCA9IDEwMCAvKiA8YXQ+ZCAqL1xuXHR2YXIgUEFHRSA9IDExMiAvKiA8YXQ+cCAqL1xuXG5cdHZhciBjb2x1bW4gPSAxIC8qIGN1cnJlbnQgY29sdW1uICovXG5cdHZhciBsaW5lID0gMSAvKiBjdXJyZW50IGxpbmUgbnVtZWJyICovXG5cdHZhciBwYXR0ZXJuID0gMCAvKiA6cGF0dGVybiAqL1xuXG5cdHZhciBjYXNjYWRlID0gMSAvKiAjaWQgaDEgaDIgdnMgaDEjaWQgaDIjaWQgICovXG5cdHZhciBwcmVmaXggPSAxIC8qIHZlbmRvciBwcmVmaXggKi9cblx0dmFyIGVzY2FwZSA9IDEgLyogZXNjYXBlIDpnbG9iYWwoKSBwYXR0ZXJuICovXG5cdHZhciBjb21wcmVzcyA9IDAgLyogY29tcHJlc3Mgb3V0cHV0ICovXG5cdHZhciBzZW1pY29sb24gPSAwIC8qIG5vL3NlbWljb2xvbiBvcHRpb24gKi9cblx0dmFyIHByZXNlcnZlID0gMCAvKiBwcmVzZXJ2ZSBlbXB0eSBzZWxlY3RvcnMgKi9cblxuXHQvKiBlbXB0eSByZWZlcmVuY2UgKi9cblx0dmFyIGFycmF5ID0gW11cblxuXHQvKiBwbHVnaW5zICovXG5cdHZhciBwbHVnaW5zID0gW11cblx0dmFyIHBsdWdnZWQgPSAwXG5cdHZhciBzaG91bGQgPSBudWxsXG5cblx0LyogcGx1Z2luIGNvbnRleHQgKi9cblx0dmFyIFBPU1RTID0gLTJcblx0dmFyIFBSRVBTID0gLTFcblx0dmFyIFVOS1dOID0gMFxuXHR2YXIgUFJPUFMgPSAxXG5cdHZhciBCTENLUyA9IDJcblx0dmFyIEFUUlVMID0gM1xuXG5cdC8qIHBsdWdpbiBuZXdsaW5lIGNvbnRleHQgKi9cblx0dmFyIHVua3duID0gMFxuXG5cdC8qIGtleWZyYW1lIGFuaW1hdGlvbiAqL1xuXHR2YXIga2V5ZWQgPSAxXG5cdHZhciBrZXkgPSAnJ1xuXG5cdC8qIHNlbGVjdG9yIG5hbWVzcGFjZSAqL1xuXHR2YXIgbnNjb3BlYWx0ID0gJydcblx0dmFyIG5zY29wZSA9ICcnXG5cblx0LyoqXG5cdCAqIENvbXBpbGVcblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBwYXJlbnRcblx0ICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBjdXJyZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBib2R5XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGVwdGhcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gY29tcGlsZSAocGFyZW50LCBjdXJyZW50LCBib2R5LCBpZCwgZGVwdGgpIHtcblx0XHR2YXIgYnJhY2tldCA9IDAgLyogYnJhY2tldHMgW10gKi9cblx0XHR2YXIgY29tbWVudCA9IDAgLyogY29tbWVudHMgLyogLy8gb3IgLyogKi9cblx0XHR2YXIgcGFyZW50aGVzZXMgPSAwIC8qIGZ1bmN0aW9ucyAoKSAqL1xuXHRcdHZhciBxdW90ZSA9IDAgLyogcXVvdGVzICcnLCBcIlwiICovXG5cblx0XHR2YXIgZmlyc3QgPSAwIC8qIGZpcnN0IGNoYXJhY3RlciBjb2RlICovXG5cdFx0dmFyIHNlY29uZCA9IDAgLyogc2Vjb25kIGNoYXJhY3RlciBjb2RlICovXG5cdFx0dmFyIGNvZGUgPSAwIC8qIGN1cnJlbnQgY2hhcmFjdGVyIGNvZGUgKi9cblx0XHR2YXIgdGFpbCA9IDAgLyogcHJldmlvdXMgY2hhcmFjdGVyIGNvZGUgKi9cblx0XHR2YXIgdHJhaWwgPSAwIC8qIGNoYXJhY3RlciBiZWZvcmUgcHJldmlvdXMgY29kZSAqL1xuXHRcdHZhciBwZWFrID0gMCAvKiBwcmV2aW91cyBub24td2hpdGVzcGFjZSBjb2RlICovXG5cblx0XHR2YXIgY291bnRlciA9IDAgLyogY291bnQgc2VxdWVuY2UgdGVybWluYXRpb24gKi9cblx0XHR2YXIgY29udGV4dCA9IDAgLyogdHJhY2sgY3VycmVudCBjb250ZXh0ICovXG5cdFx0dmFyIGF0cnVsZSA9IDAgLyogdHJhY2sgQGF0LXJ1bGUgY29udGV4dCAqL1xuXHRcdHZhciBwc2V1ZG8gPSAwIC8qIHRyYWNrIHBzZXVkbyB0b2tlbiBpbmRleCAqL1xuXHRcdHZhciBjYXJldCA9IDAgLyogY3VycmVudCBjaGFyYWN0ZXIgaW5kZXggKi9cblx0XHR2YXIgZm9ybWF0ID0gMCAvKiBjb250cm9sIGNoYXJhY3RlciBmb3JtYXRpbmcgY29udGV4dCAqL1xuXHRcdHZhciBpbnNlcnQgPSAwIC8qIGF1dG8gc2VtaWNvbG9uIGluc2VydGlvbiAqL1xuXHRcdHZhciBpbnZlcnQgPSAwIC8qIGludmVydGVkIHNlbGVjdG9yIHBhdHRlcm4gKi9cblx0XHR2YXIgbGVuZ3RoID0gMCAvKiBnZW5lcmljIGxlbmd0aCBhZGRyZXNzICovXG5cdFx0dmFyIGVvZiA9IGJvZHkubGVuZ3RoIC8qIGVuZCBvZiBmaWxlKGxlbmd0aCkgKi9cblx0XHR2YXIgZW9sID0gZW9mIC0gMSAvKiBlbmQgb2YgZmlsZShjaGFyYWN0ZXJzKSAqL1xuXG5cdFx0dmFyIGNoYXIgPSAnJyAvKiBjdXJyZW50IGNoYXJhY3RlciAqL1xuXHRcdHZhciBjaGFycyA9ICcnIC8qIGN1cnJlbnQgYnVmZmVyIG9mIGNoYXJhY3RlcnMgKi9cblx0XHR2YXIgY2hpbGQgPSAnJyAvKiBuZXh0IGJ1ZmZlciBvZiBjaGFyYWN0ZXJzICovXG5cdFx0dmFyIG91dCA9ICcnIC8qIGNvbXBpbGVkIGJvZHkgKi9cblx0XHR2YXIgY2hpbGRyZW4gPSAnJyAvKiBjb21waWxlZCBjaGlsZHJlbiAqL1xuXHRcdHZhciBmbGF0ID0gJycgLyogY29tcGlsZWQgbGVhZnMgKi9cblx0XHR2YXIgc2VsZWN0b3IgLyogZ2VuZXJpYyBzZWxlY3RvciBhZGRyZXNzICovXG5cdFx0dmFyIHJlc3VsdCAvKiBnZW5lcmljIGFkZHJlc3MgKi9cblxuXHRcdC8vIC4uLmJ1aWxkIGJvZHlcblx0XHR3aGlsZSAoY2FyZXQgPCBlb2YpIHtcblx0XHRcdGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoY2FyZXQpXG5cblx0XHRcdC8vIGVvZiB2YXJpZW50XG5cdFx0XHRpZiAoY2FyZXQgPT09IGVvbCkge1xuXHRcdFx0XHQvLyBsYXN0IGNoYXJhY3RlciArIG5vb3AgY29udGV4dCwgYWRkIHN5bnRoZXRpYyBwYWRkaW5nIGZvciBub29wIGNvbnRleHQgdG8gdGVybWluYXRlXG5cdFx0XHRcdGlmIChjb21tZW50ICsgcXVvdGUgKyBwYXJlbnRoZXNlcyArIGJyYWNrZXQgIT09IDApIHtcblx0XHRcdFx0XHRpZiAoY29tbWVudCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0Y29kZSA9IGNvbW1lbnQgPT09IEZPV0FSRFNMQVNIID8gTkVXTElORSA6IEZPV0FSRFNMQVNIXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cXVvdGUgPSBwYXJlbnRoZXNlcyA9IGJyYWNrZXQgPSAwXG5cdFx0XHRcdFx0ZW9mKytcblx0XHRcdFx0XHRlb2wrK1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjb21tZW50ICsgcXVvdGUgKyBwYXJlbnRoZXNlcyArIGJyYWNrZXQgPT09IDApIHtcblx0XHRcdFx0Ly8gZW9mIHZhcmllbnRcblx0XHRcdFx0aWYgKGNhcmV0ID09PSBlb2wpIHtcblx0XHRcdFx0XHRpZiAoZm9ybWF0ID4gMCkge1xuXHRcdFx0XHRcdFx0Y2hhcnMgPSBjaGFycy5yZXBsYWNlKGZvcm1hdHB0biwgJycpXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGNoYXJzLnRyaW0oKS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSBTUEFDRTpcblx0XHRcdFx0XHRcdFx0Y2FzZSBUQUI6XG5cdFx0XHRcdFx0XHRcdGNhc2UgU0VNSUNPTE9OOlxuXHRcdFx0XHRcdFx0XHRjYXNlIENBUlJJQUdFOlxuXHRcdFx0XHRcdFx0XHRjYXNlIE5FV0xJTkU6IHtcblx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0XHRjaGFycyArPSBib2R5LmNoYXJBdChjYXJldClcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb2RlID0gU0VNSUNPTE9OXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYXV0byBzZW1pY29sb24gaW5zZXJ0aW9uXG5cdFx0XHRcdGlmIChpbnNlcnQgPT09IDEpIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdFx0XHRcdC8vIGZhbHNlIGZsYWdzXG5cdFx0XHRcdFx0XHRjYXNlIE9QRU5CUkFDRVM6XG5cdFx0XHRcdFx0XHRjYXNlIENMT1NFQlJBQ0VTOlxuXHRcdFx0XHRcdFx0Y2FzZSBTRU1JQ09MT046XG5cdFx0XHRcdFx0XHRjYXNlIERPVUJMRVFVT1RFOlxuXHRcdFx0XHRcdFx0Y2FzZSBTSU5HTEVRVU9URTpcblx0XHRcdFx0XHRcdGNhc2UgT1BFTlBBUkVOVEhFU0VTOlxuXHRcdFx0XHRcdFx0Y2FzZSBDTE9TRVBBUkVOVEhFU0VTOlxuXHRcdFx0XHRcdFx0Y2FzZSBDT01NQToge1xuXHRcdFx0XHRcdFx0XHRpbnNlcnQgPSAwXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBpZ25vcmVcblx0XHRcdFx0XHRcdGNhc2UgVEFCOlxuXHRcdFx0XHRcdFx0Y2FzZSBDQVJSSUFHRTpcblx0XHRcdFx0XHRcdGNhc2UgTkVXTElORTpcblx0XHRcdFx0XHRcdGNhc2UgU1BBQ0U6IHtcblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIHZhbGlkXG5cdFx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHRcdGluc2VydCA9IDBcblx0XHRcdFx0XHRcdFx0bGVuZ3RoID0gY2FyZXRcblx0XHRcdFx0XHRcdFx0Zmlyc3QgPSBjb2RlXG5cdFx0XHRcdFx0XHRcdGNhcmV0LS1cblx0XHRcdFx0XHRcdFx0Y29kZSA9IFNFTUlDT0xPTlxuXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChsZW5ndGggPCBlb2YpIHtcblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGJvZHkuY2hhckNvZGVBdChsZW5ndGgrKykpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgTkVXTElORTpcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgQ0FSUklBR0U6XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFNFTUlDT0xPTjoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2NhcmV0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvZGUgPSBmaXJzdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZW5ndGggPSBlb2Zcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgQ09MT046IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGZvcm1hdCA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQrK2NhcmV0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29kZSA9IGZpcnN0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgT1BFTkJSQUNFUzoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZW5ndGggPSBlb2Zcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB0b2tlbiB2YXJpZW50XG5cdFx0XHRcdHN3aXRjaCAoY29kZSkge1xuXHRcdFx0XHRcdGNhc2UgT1BFTkJSQUNFUzoge1xuXHRcdFx0XHRcdFx0Y2hhcnMgPSBjaGFycy50cmltKClcblx0XHRcdFx0XHRcdGZpcnN0ID0gY2hhcnMuY2hhckNvZGVBdCgwKVxuXHRcdFx0XHRcdFx0Y291bnRlciA9IDFcblx0XHRcdFx0XHRcdGxlbmd0aCA9ICsrY2FyZXRcblxuXHRcdFx0XHRcdFx0d2hpbGUgKGNhcmV0IDwgZW9mKSB7XG5cdFx0XHRcdFx0XHRcdGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoY2FyZXQpXG5cblx0XHRcdFx0XHRcdFx0c3dpdGNoIChjb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBPUEVOQlJBQ0VTOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb3VudGVyKytcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgQ0xPU0VCUkFDRVM6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvdW50ZXItLVxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoY291bnRlciA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRjYXJldCsrXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNoaWxkID0gYm9keS5zdWJzdHJpbmcobGVuZ3RoLCBjYXJldClcblxuXHRcdFx0XHRcdFx0aWYgKGZpcnN0ID09PSBOVUxMKSB7XG5cdFx0XHRcdFx0XHRcdGZpcnN0ID0gKGNoYXJzID0gY2hhcnMucmVwbGFjZShudWxscHRuLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoZmlyc3QpIHtcblx0XHRcdFx0XHRcdFx0Ly8gQGF0LXJ1bGVcblx0XHRcdFx0XHRcdFx0Y2FzZSBBVDoge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChmb3JtYXQgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjaGFycyA9IGNoYXJzLnJlcGxhY2UoZm9ybWF0cHRuLCAnJylcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRzZWNvbmQgPSBjaGFycy5jaGFyQ29kZUF0KDEpXG5cblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2ggKHNlY29uZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBET0NVTUVOVDpcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgTUVESUE6XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFNVUFBPUlRTOlxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBEQVNIOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGVjdG9yID0gY3VycmVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxlY3RvciA9IGFycmF5XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGQgPSBjb21waWxlKGN1cnJlbnQsIHNlbGVjdG9yLCBjaGlsZCwgc2Vjb25kLCBkZXB0aCsxKVxuXHRcdFx0XHRcdFx0XHRcdGxlbmd0aCA9IGNoaWxkLmxlbmd0aFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcHJlc2VydmUgZW1wdHkgQGF0LXJ1bGVcblx0XHRcdFx0XHRcdFx0XHRpZiAocHJlc2VydmUgPiAwICYmIGxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGVuZ3RoID0gY2hhcnMubGVuZ3RoXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXhlY3V0ZSBwbHVnaW5zLCBAYXQtcnVsZSBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHBsdWdnZWQgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZWxlY3RvciA9IHNlbGVjdChhcnJheSwgY2hhcnMsIGludmVydClcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdCA9IHByb3h5KEFUUlVMLCBjaGlsZCwgc2VsZWN0b3IsIGN1cnJlbnQsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBzZWNvbmQsIGRlcHRoLCBpZClcblx0XHRcdFx0XHRcdFx0XHRcdGNoYXJzID0gc2VsZWN0b3Iuam9pbignJylcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHJlc3VsdCAhPT0gdm9pZCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICgobGVuZ3RoID0gKGNoaWxkID0gcmVzdWx0LnRyaW0oKSkubGVuZ3RoKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNlY29uZCA9IDBcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjaGlsZCA9ICcnXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAobGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChzZWNvbmQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBTVVBQT1JUUzoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoYXJzID0gY2hhcnMucmVwbGFjZShzdXBwb3J0c3B0biwgc3VwcG9ydHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBET0NVTUVOVDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBNRURJQTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBEQVNIOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hpbGQgPSBjaGFycyArICd7JyArIGNoaWxkICsgJ30nXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlIEtFWUZSQU1FOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hhcnMgPSBjaGFycy5yZXBsYWNlKGtleWZyYW1lcHRuLCAnJDEgJDInICsgKGtleWVkID4gMCA/IGtleSA6ICcnKSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjaGlsZCA9IGNoYXJzICsgJ3snICsgY2hpbGQgKyAnfSdcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChwcmVmaXggPT09IDEgfHwgKHByZWZpeCA9PT0gMiAmJiB2ZW5kb3IoJ0AnK2NoaWxkLCAzKSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoaWxkID0gJ0AnICsgd2Via2l0ICsgY2hpbGQgKyAnQCcgKyBjaGlsZFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjaGlsZCA9ICdAJyArIGNoaWxkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoaWxkID0gY2hhcnMgKyBjaGlsZFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGlkID09PSBQQUdFKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjaGlsZCA9IChvdXQgKz0gY2hpbGQsICcnKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjaGlsZCA9ICcnXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQvLyBzZWxlY3RvclxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGQgPSBjb21waWxlKGN1cnJlbnQsIHNlbGVjdChjdXJyZW50LCBjaGFycywgaW52ZXJ0KSwgY2hpbGQsIGlkLCBkZXB0aCsxKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNoaWxkcmVuICs9IGNoaWxkXG5cblx0XHRcdFx0XHRcdC8vIHJlc2V0XG5cdFx0XHRcdFx0XHRjb250ZXh0ID0gMFxuXHRcdFx0XHRcdFx0aW5zZXJ0ID0gMFxuXHRcdFx0XHRcdFx0cHNldWRvID0gMFxuXHRcdFx0XHRcdFx0Zm9ybWF0ID0gMFxuXHRcdFx0XHRcdFx0aW52ZXJ0ID0gMFxuXHRcdFx0XHRcdFx0YXRydWxlID0gMFxuXHRcdFx0XHRcdFx0Y2hhcnMgPSAnJ1xuXHRcdFx0XHRcdFx0Y2hpbGQgPSAnJ1xuXHRcdFx0XHRcdFx0Y29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK2NhcmV0KVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2FzZSBDTE9TRUJSQUNFUzpcblx0XHRcdFx0XHRjYXNlIFNFTUlDT0xPTjoge1xuXHRcdFx0XHRcdFx0Y2hhcnMgPSAoZm9ybWF0ID4gMCA/IGNoYXJzLnJlcGxhY2UoZm9ybWF0cHRuLCAnJykgOiBjaGFycykudHJpbSgpXG5cblx0XHRcdFx0XHRcdGlmICgobGVuZ3RoID0gY2hhcnMubGVuZ3RoKSA+IDEpIHtcblx0XHRcdFx0XHRcdFx0Ly8gbW9ua2V5LXBhdGNoIG1pc3NpbmcgY29sb25cblx0XHRcdFx0XHRcdFx0aWYgKHBzZXVkbyA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGZpcnN0ID0gY2hhcnMuY2hhckNvZGVBdCgwKVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZmlyc3QgY2hhcmFjdGVyIGlzIGEgbGV0dGVyIG9yIGRhc2gsIGJ1ZmZlciBoYXMgYSBzcGFjZSBjaGFyYWN0ZXJcblx0XHRcdFx0XHRcdFx0XHRpZiAoKGZpcnN0ID09PSBEQVNIIHx8IGZpcnN0ID4gOTYgJiYgZmlyc3QgPCAxMjMpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsZW5ndGggPSAoY2hhcnMgPSBjaGFycy5yZXBsYWNlKCcgJywgJzonKSkubGVuZ3RoXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gZXhlY3V0ZSBwbHVnaW5zLCBwcm9wZXJ0eSBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdGlmIChwbHVnZ2VkID4gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICgocmVzdWx0ID0gcHJveHkoUFJPUFMsIGNoYXJzLCBjdXJyZW50LCBwYXJlbnQsIGxpbmUsIGNvbHVtbiwgb3V0Lmxlbmd0aCwgaWQsIGRlcHRoLCBpZCkpICE9PSB2b2lkIDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICgobGVuZ3RoID0gKGNoYXJzID0gcmVzdWx0LnRyaW0oKSkubGVuZ3RoKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjaGFycyA9ICdcXDBcXDAnXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Zmlyc3QgPSBjaGFycy5jaGFyQ29kZUF0KDApXG5cdFx0XHRcdFx0XHRcdHNlY29uZCA9IGNoYXJzLmNoYXJDb2RlQXQoMSlcblxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGZpcnN0ICsgc2Vjb25kKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBOVUxMOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjYXNlIElNUE9SVDpcblx0XHRcdFx0XHRcdFx0XHRjYXNlIENIQVJTRVQ6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGZsYXQgKz0gY2hhcnMgKyBib2R5LmNoYXJBdChjYXJldClcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChjaGFycy5jaGFyQ29kZUF0KGxlbmd0aC0xKSA9PT0gQ09MT04pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cblx0XHRcdFx0XHRcdFx0XHRcdG91dCArPSBwcm9wZXJ0eShjaGFycywgZmlyc3QsIHNlY29uZCwgY2hhcnMuY2hhckNvZGVBdCgyKSlcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gcmVzZXRcblx0XHRcdFx0XHRcdGNvbnRleHQgPSAwXG5cdFx0XHRcdFx0XHRpbnNlcnQgPSAwXG5cdFx0XHRcdFx0XHRwc2V1ZG8gPSAwXG5cdFx0XHRcdFx0XHRmb3JtYXQgPSAwXG5cdFx0XHRcdFx0XHRpbnZlcnQgPSAwXG5cdFx0XHRcdFx0XHRjaGFycyA9ICcnXG5cdFx0XHRcdFx0XHRjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrY2FyZXQpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBwYXJzZSBjaGFyYWN0ZXJzXG5cdFx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdFx0Y2FzZSBDQVJSSUFHRTpcblx0XHRcdFx0Y2FzZSBORVdMSU5FOiB7XG5cdFx0XHRcdFx0Ly8gYXV0byBpbnNlcnQgc2VtaWNvbG9uXG5cdFx0XHRcdFx0aWYgKGNvbW1lbnQgKyBxdW90ZSArIHBhcmVudGhlc2VzICsgYnJhY2tldCArIHNlbWljb2xvbiA9PT0gMCkge1xuXHRcdFx0XHRcdFx0Ly8gdmFsaWQgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyB0aGF0XG5cdFx0XHRcdFx0XHQvLyBtYXkgcHJlY2VkZSBhIG5ld2xpbmVcblx0XHRcdFx0XHRcdHN3aXRjaCAocGVhaykge1xuXHRcdFx0XHRcdFx0XHRjYXNlIENMT1NFUEFSRU5USEVTRVM6XG5cdFx0XHRcdFx0XHRcdGNhc2UgU0lOR0xFUVVPVEU6XG5cdFx0XHRcdFx0XHRcdGNhc2UgRE9VQkxFUVVPVEU6XG5cdFx0XHRcdFx0XHRcdGNhc2UgQVQ6XG5cdFx0XHRcdFx0XHRcdGNhc2UgVElMREU6XG5cdFx0XHRcdFx0XHRcdGNhc2UgR1JFQVRFUlRIQU46XG5cdFx0XHRcdFx0XHRcdGNhc2UgU1RBUjpcblx0XHRcdFx0XHRcdFx0Y2FzZSBQTFVTOlxuXHRcdFx0XHRcdFx0XHRjYXNlIEZPV0FSRFNMQVNIOlxuXHRcdFx0XHRcdFx0XHRjYXNlIERBU0g6XG5cdFx0XHRcdFx0XHRcdGNhc2UgQ09MT046XG5cdFx0XHRcdFx0XHRcdGNhc2UgQ09NTUE6XG5cdFx0XHRcdFx0XHRcdGNhc2UgU0VNSUNPTE9OOlxuXHRcdFx0XHRcdFx0XHRjYXNlIE9QRU5CUkFDRVM6XG5cdFx0XHRcdFx0XHRcdGNhc2UgQ0xPU0VCUkFDRVM6IHtcblx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0XHQvLyBjdXJyZW50IGJ1ZmZlciBoYXMgYSBjb2xvblxuXHRcdFx0XHRcdFx0XHRcdGlmIChwc2V1ZG8gPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpbnNlcnQgPSAxXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGVybWluYXRlIGxpbmUgY29tbWVudFxuXHRcdFx0XHRcdGlmIChjb21tZW50ID09PSBGT1dBUkRTTEFTSCkge1xuXHRcdFx0XHRcdFx0Y29tbWVudCA9IDBcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNhc2NhZGUgKyBjb250ZXh0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRmb3JtYXQgPSAxXG5cdFx0XHRcdFx0XHRjaGFycyArPSAnXFwwJ1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGV4ZWN1dGUgcGx1Z2lucywgbmV3bGluZSBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKHBsdWdnZWQgKiB1bmt3biA+IDApIHtcblx0XHRcdFx0XHRcdHByb3h5KFVOS1dOLCBjaGFycywgY3VycmVudCwgcGFyZW50LCBsaW5lLCBjb2x1bW4sIG91dC5sZW5ndGgsIGlkLCBkZXB0aCwgaWQpXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gbmV4dCBsaW5lLCByZXNldCBjb2x1bW4gcG9zaXRpb25cblx0XHRcdFx0XHRjb2x1bW4gPSAxXG5cdFx0XHRcdFx0bGluZSsrXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIFNFTUlDT0xPTjpcblx0XHRcdFx0Y2FzZSBDTE9TRUJSQUNFUzoge1xuXHRcdFx0XHRcdGlmIChjb21tZW50ICsgcXVvdGUgKyBwYXJlbnRoZXNlcyArIGJyYWNrZXQgPT09IDApIHtcblx0XHRcdFx0XHRcdGNvbHVtbisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0Ly8gaW5jcmVtZW50IGNvbHVtbiBwb3NpdGlvblxuXHRcdFx0XHRcdGNvbHVtbisrXG5cblx0XHRcdFx0XHQvLyBjdXJyZW50IGNoYXJhY3RlclxuXHRcdFx0XHRcdGNoYXIgPSBib2R5LmNoYXJBdChjYXJldClcblxuXHRcdFx0XHRcdC8vIHJlbW92ZSBjb21tZW50cywgZXNjYXBlIGZ1bmN0aW9ucywgc3RyaW5ncywgYXR0cmlidXRlcyBhbmQgcHJlcGFyZSBzZWxlY3RvcnNcblx0XHRcdFx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgVEFCOlxuXHRcdFx0XHRcdFx0Y2FzZSBTUEFDRToge1xuXHRcdFx0XHRcdFx0XHRpZiAocXVvdGUgKyBicmFja2V0ICsgY29tbWVudCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAodGFpbCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBDT01NQTpcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgQ09MT046XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFRBQjpcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgU1BBQ0U6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hhciA9ICcnXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChjb2RlICE9PSBTUEFDRSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoYXIgPSAnICdcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gZXNjYXBlIGJyZWFraW5nIGNvbnRyb2wgY2hhcmFjdGVyc1xuXHRcdFx0XHRcdFx0Y2FzZSBOVUxMOiB7XG5cdFx0XHRcdFx0XHRcdGNoYXIgPSAnXFxcXDAnXG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjYXNlIEZPUk1GRUVEOiB7XG5cdFx0XHRcdFx0XHRcdGNoYXIgPSAnXFxcXGYnXG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjYXNlIFZFUlRJQ0FMVEFCOiB7XG5cdFx0XHRcdFx0XHRcdGNoYXIgPSAnXFxcXHYnXG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0XHRjYXNlIEFORDoge1xuXHRcdFx0XHRcdFx0XHQvLyBpbnZlcnRlZCBzZWxlY3RvciBwYXR0ZXJuIGkuZSBodG1sICZcblx0XHRcdFx0XHRcdFx0aWYgKHF1b3RlICsgY29tbWVudCArIGJyYWNrZXQgPT09IDAgJiYgY2FzY2FkZSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRpbnZlcnQgPSAxXG5cdFx0XHRcdFx0XHRcdFx0Zm9ybWF0ID0gMVxuXHRcdFx0XHRcdFx0XHRcdGNoYXIgPSAnXFxmJyArIGNoYXJcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gOjpwPGw+YWNlaG9sZGVyLCBsXG5cdFx0XHRcdFx0XHQvLyA6cmVhZC1vbjxsPnksIGxcblx0XHRcdFx0XHRcdGNhc2UgMTA4OiB7XG5cdFx0XHRcdFx0XHRcdGlmIChxdW90ZSArIGNvbW1lbnQgKyBicmFja2V0ICsgcGF0dGVybiA9PT0gMCAmJiBwc2V1ZG8gPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChjYXJldCAtIHBzZXVkbykge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gOjpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAyOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh0YWlsID09PSBQTEFDRUhPTERFUiAmJiBib2R5LmNoYXJDb2RlQXQoY2FyZXQtMykgPT09IENPTE9OKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGF0dGVybiA9IHRhaWxcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gOnJlYWQtb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSA4OiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh0cmFpbCA9PT0gUkVBRE9OTFkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwYXR0ZXJuID0gdHJhaWxcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gOjxwYXR0ZXJuPlxuXHRcdFx0XHRcdFx0Y2FzZSBDT0xPTjoge1xuXHRcdFx0XHRcdFx0XHRpZiAocXVvdGUgKyBjb21tZW50ICsgYnJhY2tldCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHBzZXVkbyA9IGNhcmV0XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIHNlbGVjdG9yc1xuXHRcdFx0XHRcdFx0Y2FzZSBDT01NQToge1xuXHRcdFx0XHRcdFx0XHRpZiAoY29tbWVudCArIHBhcmVudGhlc2VzICsgcXVvdGUgKyBicmFja2V0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9ybWF0ID0gMVxuXHRcdFx0XHRcdFx0XHRcdGNoYXIgKz0gJ1xccidcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcXVvdGVzXG5cdFx0XHRcdFx0XHRjYXNlIERPVUJMRVFVT1RFOiB7XG5cdFx0XHRcdFx0XHRcdGlmIChjb21tZW50ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cXVvdGUgPSBxdW90ZSA9PT0gY29kZSA/IDAgOiAocXVvdGUgPT09IDAgPyBjb2RlIDogcXVvdGUpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNhc2UgU0lOR0xFUVVPVEU6IHtcblx0XHRcdFx0XHRcdFx0aWYgKGNvbW1lbnQgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRxdW90ZSA9IHF1b3RlID09PSBjb2RlID8gMCA6IChxdW90ZSA9PT0gMCA/IGNvZGUgOiBxdW90ZSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0Y2FzZSBPUEVOQlJBQ0tFVDoge1xuXHRcdFx0XHRcdFx0XHRpZiAocXVvdGUgKyBjb21tZW50ICsgcGFyZW50aGVzZXMgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRicmFja2V0Kytcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y2FzZSBDTE9TRUJSQUNLRVQ6IHtcblx0XHRcdFx0XHRcdFx0aWYgKHF1b3RlICsgY29tbWVudCArIHBhcmVudGhlc2VzID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJhY2tldC0tXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIGZ1bmN0aW9uc1xuXHRcdFx0XHRcdFx0Y2FzZSBDTE9TRVBBUkVOVEhFU0VTOiB7XG5cdFx0XHRcdFx0XHRcdGlmIChxdW90ZSArIGNvbW1lbnQgKyBicmFja2V0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGFyZW50aGVzZXMtLVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjYXNlIE9QRU5QQVJFTlRIRVNFUzoge1xuXHRcdFx0XHRcdFx0XHRpZiAocXVvdGUgKyBjb21tZW50ICsgYnJhY2tldCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjb250ZXh0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzd2l0Y2ggKHRhaWwqMiArIHRyYWlsKjMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gOm1hdGNoZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSA1MzM6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIDpnbG9iYWwsIDpub3QsIDpudGgtY2hpbGQgZXRjLi4uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb3VudGVyID0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRleHQgPSAxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRwYXJlbnRoZXNlcysrXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNhc2UgQVQ6IHtcblx0XHRcdFx0XHRcdFx0aWYgKGNvbW1lbnQgKyBwYXJlbnRoZXNlcyArIHF1b3RlICsgYnJhY2tldCArIHBzZXVkbyArIGF0cnVsZSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGF0cnVsZSA9IDFcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gYmxvY2svbGluZSBjb21tZW50c1xuXHRcdFx0XHRcdFx0Y2FzZSBTVEFSOlxuXHRcdFx0XHRcdFx0Y2FzZSBGT1dBUkRTTEFTSDoge1xuXHRcdFx0XHRcdFx0XHRpZiAocXVvdGUgKyBicmFja2V0ICsgcGFyZW50aGVzZXMgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoY29tbWVudCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIGluaXRpYWxpemUgbGluZS9ibG9jayBjb21tZW50IGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IHtcblx0XHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoY29kZSoyICsgYm9keS5jaGFyQ29kZUF0KGNhcmV0KzEpKjMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLy9cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAyMzU6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb21tZW50ID0gRk9XQVJEU0xBU0hcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC8qXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMjIwOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGVuZ3RoID0gY2FyZXRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb21tZW50ID0gU1RBUlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIGVuZCBibG9jayBjb21tZW50IGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRjYXNlIFNUQVI6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChjb2RlID09PSBGT1dBUkRTTEFTSCAmJiB0YWlsID09PSBTVEFSKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC8qPCE+IC4uLiAqLywgIVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoYm9keS5jaGFyQ29kZUF0KGxlbmd0aCsyKSA9PT0gMzMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXQgKz0gYm9keS5zdWJzdHJpbmcobGVuZ3RoLCBjYXJldCsxKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNoYXIgPSAnJ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb21tZW50ID0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlnbm9yZSBjb21tZW50IGJsb2Nrc1xuXHRcdFx0XHRcdGlmIChjb21tZW50ID09PSAwKSB7XG5cdFx0XHRcdFx0XHQvLyBhZ2dyZXNzaXZlIGlzb2xhdGlvbiBtb2RlLCBkaXZpZGUgZWFjaCBpbmRpdmlkdWFsIHNlbGVjdG9yXG5cdFx0XHRcdFx0XHQvLyBpbmNsdWRpbmcgc2VsZWN0b3JzIGluIDpub3QgZnVuY3Rpb24gYnV0IGV4Y2x1ZGluZyBzZWxlY3RvcnMgaW4gOmdsb2JhbCBmdW5jdGlvblxuXHRcdFx0XHRcdFx0aWYgKGNhc2NhZGUgKyBxdW90ZSArIGJyYWNrZXQgKyBhdHJ1bGUgPT09IDAgJiYgaWQgIT09IEtFWUZSQU1FICYmIGNvZGUgIT09IFNFTUlDT0xPTikge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIENPTU1BOlxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgVElMREU6XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBHUkVBVEVSVEhBTjpcblx0XHRcdFx0XHRcdFx0XHRjYXNlIFBMVVM6XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBDTE9TRVBBUkVOVEhFU0VTOlxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgT1BFTlBBUkVOVEhFU0VTOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoY29udGV4dCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBvdXRzaWRlIG9mIGFuIGlzb2xhdGVkIGNvbnRleHQgaS5lIG50aC1jaGlsZCg8Li4uPilcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3dpdGNoICh0YWlsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBUQUI6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBTUEFDRTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlIE5FV0xJTkU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBDQVJSSUFHRToge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hhciA9IGNoYXIgKyAnXFwwJ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hhciA9ICdcXDAnICsgY2hhciArIChjb2RlID09PSBDT01NQSA/ICcnIDogJ1xcMCcpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvcm1hdCA9IDFcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHdpdGhpbiBhbiBpc29sYXRlZCBjb250ZXh0LCBzbGVlcCB1bnRpbGwgaXQncyB0ZXJtaW5hdGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoY29kZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgT1BFTlBBUkVOVEhFU0VTOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb250ZXh0ID0gKytjb3VudGVyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlIENMT1NFUEFSRU5USEVTRVM6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICgoY29udGV4dCA9IC0tY291bnRlcikgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9ybWF0ID0gMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjaGFyICs9ICdcXDAnXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBUQUI6XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBTUEFDRToge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3dpdGNoICh0YWlsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgTlVMTDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBPUEVOQlJBQ0VTOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlIENMT1NFQlJBQ0VTOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFNFTUlDT0xPTjpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBDT01NQTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBGT1JNRkVFRDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBUQUI6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgU1BBQ0U6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgTkVXTElORTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBDQVJSSUFHRToge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGlnbm9yZSBpbiBpc29sYXRlZCBjb250ZXh0c1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChjb250ZXh0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb3JtYXQgPSAxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjaGFyICs9ICdcXDAnXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIGNvbmNhdCBidWZmZXIgb2YgY2hhcmFjdGVyc1xuXHRcdFx0XHRcdFx0Y2hhcnMgKz0gY2hhclxuXG5cdFx0XHRcdFx0XHQvLyBwcmV2aW91cyBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIgY29kZVxuXHRcdFx0XHRcdFx0aWYgKGNvZGUgIT09IFNQQUNFICYmIGNvZGUgIT09IFRBQikge1xuXHRcdFx0XHRcdFx0XHRwZWFrID0gY29kZVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0YWlsIGNoYXJhY3RlciBjb2Rlc1xuXHRcdFx0dHJhaWwgPSB0YWlsXG5cdFx0XHR0YWlsID0gY29kZVxuXG5cdFx0XHQvLyB2aXNpdCBldmVyeSBjaGFyYWN0ZXJcblx0XHRcdGNhcmV0Kytcblx0XHR9XG5cblx0XHRsZW5ndGggPSBvdXQubGVuZ3RoXG5cblx0XHQvLyBwcmVzZXJ2ZSBlbXB0eSBzZWxlY3RvclxuIFx0XHRpZiAocHJlc2VydmUgPiAwKSB7XG4gXHRcdFx0aWYgKGxlbmd0aCA9PT0gMCAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDAgJiYgKGN1cnJlbnRbMF0ubGVuZ3RoID09PSAwKSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGlmIChpZCAhPT0gTUVESUEgfHwgKGN1cnJlbnQubGVuZ3RoID09PSAxICYmIChjYXNjYWRlID4gMCA/IG5zY29wZWFsdCA6IG5zY29wZSkgPT09IGN1cnJlbnRbMF0pKSB7XG5cdFx0XHRcdFx0bGVuZ3RoID0gY3VycmVudC5qb2luKCcsJykubGVuZ3RoICsgMlxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobGVuZ3RoID4gMCkge1xuXHRcdFx0Ly8gY2FzY2FkZSBpc29sYXRpb24gbW9kZT9cblx0XHRcdHNlbGVjdG9yID0gY2FzY2FkZSA9PT0gMCAmJiBpZCAhPT0gS0VZRlJBTUUgPyBpc29sYXRlKGN1cnJlbnQpIDogY3VycmVudFxuXG5cdFx0XHQvLyBleGVjdXRlIHBsdWdpbnMsIGJsb2NrIGNvbnRleHRcblx0XHRcdGlmIChwbHVnZ2VkID4gMCkge1xuXHRcdFx0XHRyZXN1bHQgPSBwcm94eShCTENLUywgb3V0LCBzZWxlY3RvciwgcGFyZW50LCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgaWQsIGRlcHRoLCBpZClcblxuXHRcdFx0XHRpZiAocmVzdWx0ICE9PSB2b2lkIDAgJiYgKG91dCA9IHJlc3VsdCkubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZsYXQgKyBvdXQgKyBjaGlsZHJlblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IHNlbGVjdG9yLmpvaW4oJywnKSArICd7JyArIG91dCArICd9J1xuXG5cdFx0XHRpZiAocHJlZml4KnBhdHRlcm4gIT09IDApIHtcblx0XHRcdFx0aWYgKHByZWZpeCA9PT0gMiAmJiAhdmVuZG9yKG91dCwgMikpXG5cdFx0XHRcdFx0cGF0dGVybiA9IDBcblxuXHRcdFx0XHRzd2l0Y2ggKHBhdHRlcm4pIHtcblx0XHRcdFx0XHQvLyA6OnJlYWQtb25seVxuXHRcdFx0XHRcdGNhc2UgUkVBRE9OTFk6IHtcblx0XHRcdFx0XHRcdG91dCA9IG91dC5yZXBsYWNlKHJlYWRvbmx5cHRuLCAnOicrbW96KyckMScpK291dFxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gOjpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdGNhc2UgUExBQ0VIT0xERVI6IHtcblx0XHRcdFx0XHRcdG91dCA9IChcblx0XHRcdFx0XHRcdFx0b3V0LnJlcGxhY2UocGxjaG9sZHJwdG4sICc6OicgKyB3ZWJraXQgKyAnaW5wdXQtJDEnKSArXG5cdFx0XHRcdFx0XHRcdG91dC5yZXBsYWNlKHBsY2hvbGRycHRuLCAnOjonICsgbW96ICsgJyQxJykgK1xuXHRcdFx0XHRcdFx0XHRvdXQucmVwbGFjZShwbGNob2xkcnB0biwgJzonICsgbXMgKyAnaW5wdXQtJDEnKSArIG91dFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwYXR0ZXJuID0gMFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmbGF0ICsgb3V0ICsgY2hpbGRyZW5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZWxlY3Rcblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBwYXJlbnRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnRcblx0ICogQHBhcmFtIHtudW1iZXJ9IGludmVydFxuXHQgKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fVxuXHQgKi9cblx0ZnVuY3Rpb24gc2VsZWN0IChwYXJlbnQsIGN1cnJlbnQsIGludmVydCkge1xuXHRcdHZhciBzZWxlY3RvcnMgPSBjdXJyZW50LnRyaW0oKS5zcGxpdChzZWxlY3RvcnB0bilcblx0XHR2YXIgb3V0ID0gc2VsZWN0b3JzXG5cblx0XHR2YXIgbGVuZ3RoID0gc2VsZWN0b3JzLmxlbmd0aFxuXHRcdHZhciBsID0gcGFyZW50Lmxlbmd0aFxuXG5cdFx0c3dpdGNoIChsKSB7XG5cdFx0XHQvLyAwLTEgcGFyZW50IHNlbGVjdG9yc1xuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0Y2FzZSAxOiB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBzZWxlY3RvciA9IGwgPT09IDAgPyAnJyA6IHBhcmVudFswXSArICcgJzsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0b3V0W2ldID0gc2NvcGUoc2VsZWN0b3IsIG91dFtpXSwgaW52ZXJ0LCBsKS50cmltKClcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0Ly8gPjIgcGFyZW50IHNlbGVjdG9ycywgbmVzdGVkXG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBqID0gMCwgb3V0ID0gW107IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgbDsgKytrKSB7XG5cdFx0XHRcdFx0XHRvdXRbaisrXSA9IHNjb3BlKHBhcmVudFtrXSArICcgJywgc2VsZWN0b3JzW2ldLCBpbnZlcnQsIGwpLnRyaW0oKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRcblx0fVxuXG5cdC8qKlxuXHQgKiBTY29wZVxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbnZlcnRcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxldmVsXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIHNjb3BlIChwYXJlbnQsIGN1cnJlbnQsIGludmVydCwgbGV2ZWwpIHtcblx0XHR2YXIgc2VsZWN0b3IgPSBjdXJyZW50XG5cdFx0dmFyIGNvZGUgPSBzZWxlY3Rvci5jaGFyQ29kZUF0KDApXG5cblx0XHQvLyB0cmltIGxlYWRpbmcgd2hpdGVzcGFjZVxuXHRcdGlmIChjb2RlIDwgMzMpIHtcblx0XHRcdGNvZGUgPSAoc2VsZWN0b3IgPSBzZWxlY3Rvci50cmltKCkpLmNoYXJDb2RlQXQoMClcblx0XHR9XG5cblx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdC8vICZcblx0XHRcdGNhc2UgQU5EOiB7XG5cdFx0XHRcdHN3aXRjaCAoY2FzY2FkZSArIGxldmVsKSB7XG5cdFx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdGNhc2UgMToge1xuXHRcdFx0XHRcdFx0aWYgKHBhcmVudC50cmltKCkubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKGFuZHB0biwgJyQxJytwYXJlbnQudHJpbSgpKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0Ly8gOlxuXHRcdFx0Y2FzZSBDT0xPTjoge1xuXHRcdFx0XHRzd2l0Y2ggKHNlbGVjdG9yLmNoYXJDb2RlQXQoMSkpIHtcblx0XHRcdFx0XHQvLyBnIGluIDpnbG9iYWxcblx0XHRcdFx0XHRjYXNlIDEwMzoge1xuXHRcdFx0XHRcdFx0aWYgKGVzY2FwZSA+IDAgJiYgY2FzY2FkZSA+IDApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoZXNjYXBlcHRuLCAnJDEnKS5yZXBsYWNlKGFuZHB0biwgJyQxJytuc2NvcGUpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHQvLyA6aG92ZXJcblx0XHRcdFx0XHRcdHJldHVybiBwYXJlbnQudHJpbSgpICsgc2VsZWN0b3IucmVwbGFjZShhbmRwdG4sICckMScrcGFyZW50LnRyaW0oKSlcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0Ly8gaHRtbCAmXG5cdFx0XHRcdGlmIChpbnZlcnQqY2FzY2FkZSA+IDAgJiYgc2VsZWN0b3IuaW5kZXhPZignXFxmJykgPiAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoYW5kcHRuLCAocGFyZW50LmNoYXJDb2RlQXQoMCkgPT09IENPTE9OID8gJycgOiAnJDEnKStwYXJlbnQudHJpbSgpKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhcmVudCArIHNlbGVjdG9yXG5cdH1cblxuXHQvKipcblx0ICogUHJvcGVydHlcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmaXJzdFxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aGlyZFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRmdW5jdGlvbiBwcm9wZXJ0eSAoaW5wdXQsIGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG5cdFx0dmFyIGluZGV4ID0gMFxuXHRcdHZhciBvdXQgPSBpbnB1dCArICc7J1xuXHRcdHZhciBoYXNoID0gKGZpcnN0KjIpICsgKHNlY29uZCozKSArICh0aGlyZCo0KVxuXHRcdHZhciBjYWNoZVxuXG5cdFx0Ly8gYW5pbWF0aW9uOiBhLCBuLCBpIGNoYXJhY3RlcnNcblx0XHRpZiAoaGFzaCA9PT0gOTQ0KSB7XG5cdFx0XHRyZXR1cm4gYW5pbWF0aW9uKG91dClcblx0XHR9IGVsc2UgaWYgKHByZWZpeCA9PT0gMCB8fCAocHJlZml4ID09PSAyICYmICF2ZW5kb3Iob3V0LCAxKSkpIHtcblx0XHRcdHJldHVybiBvdXRcblx0XHR9XG5cblx0XHQvLyB2ZW5kb3IgcHJlZml4XG5cdFx0c3dpdGNoIChoYXNoKSB7XG5cdFx0XHQvLyB0ZXh0LWRlY29yYXRpb24vdGV4dC1zaXplLWFkanVzdC90ZXh0LXNoYWRvdy90ZXh0LWFsaWduL3RleHQtdHJhbnNmb3JtOiB0LCBlLCB4XG5cdFx0XHRjYXNlIDEwMTU6IHtcblx0XHRcdFx0Ly8gdGV4dC1zaGFkb3cvdGV4dC1hbGlnbi90ZXh0LXRyYW5zZm9ybSwgYVxuXHRcdFx0XHRyZXR1cm4gb3V0LmNoYXJDb2RlQXQoMTApID09PSA5NyA/IHdlYmtpdCArIG91dCArIG91dCA6IG91dFxuXHRcdFx0fVxuXHRcdFx0Ly8gZmlsdGVyL2ZpbGwgZiwgaSwgbFxuXHRcdFx0Y2FzZSA5NTE6IHtcblx0XHRcdFx0Ly8gZmlsdGVyLCB0XG5cdFx0XHRcdHJldHVybiBvdXQuY2hhckNvZGVBdCgzKSA9PT0gMTE2ID8gd2Via2l0ICsgb3V0ICsgb3V0IDogb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBjb2xvci9jb2x1bW4sIGMsIG8sIGxcblx0XHRcdGNhc2UgOTYzOiB7XG5cdFx0XHRcdC8vIGNvbHVtbiwgblxuXHRcdFx0XHRyZXR1cm4gb3V0LmNoYXJDb2RlQXQoNSkgPT09IDExMCA/IHdlYmtpdCArIG91dCArIG91dCA6IG91dFxuXHRcdFx0fVxuXHRcdFx0Ly8gYm94LWRlY29yYXRpb24tYnJlYWssIGIsIG8sIHhcblx0XHRcdGNhc2UgMTAwOToge1xuXHRcdFx0XHRpZiAob3V0LmNoYXJDb2RlQXQoNCkgIT09IDEwMCkge1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIG1hc2ssIG0sIGEsIHNcblx0XHRcdC8vIGNsaXAtcGF0aCwgYywgbCwgaVxuXHRcdFx0Y2FzZSA5Njk6XG5cdFx0XHRjYXNlIDk0Mjoge1xuXHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgb3V0ICsgb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBhcHBlYXJhbmNlOiBhLCBwLCBwXG5cdFx0XHRjYXNlIDk3ODoge1xuXHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgb3V0ICsgbW96ICsgb3V0ICsgb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBoeXBoZW5zOiBoLCB5LCBwXG5cdFx0XHQvLyB1c2VyLXNlbGVjdDogdSwgcywgZVxuXHRcdFx0Y2FzZSAxMDE5OlxuXHRcdFx0Y2FzZSA5ODM6IHtcblx0XHRcdFx0cmV0dXJuIHdlYmtpdCArIG91dCArIG1veiArIG91dCArIG1zICsgb3V0ICsgb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBiYWNrZ3JvdW5kL2JhY2tmYWNlLXZpc2liaWxpdHksIGIsIGEsIGNcblx0XHRcdGNhc2UgODgzOiB7XG5cdFx0XHRcdC8vIGJhY2tmYWNlLXZpc2liaWxpdHksIC1cblx0XHRcdFx0cmV0dXJuIG91dC5jaGFyQ29kZUF0KDgpID09PSBEQVNIID8gd2Via2l0ICsgb3V0ICsgb3V0IDogb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBmbGV4OiBmLCBsLCBlXG5cdFx0XHRjYXNlIDkzMjoge1xuXHRcdFx0XHRpZiAob3V0LmNoYXJDb2RlQXQoNCkgPT09IERBU0gpIHtcblx0XHRcdFx0XHRzd2l0Y2ggKG91dC5jaGFyQ29kZUF0KDUpKSB7XG5cdFx0XHRcdFx0XHQvLyBmbGV4LWdyb3csIGdcblx0XHRcdFx0XHRcdGNhc2UgMTAzOiB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB3ZWJraXQgKyAnYm94LScgKyBvdXQucmVwbGFjZSgnLWdyb3cnLCAnJykgKyB3ZWJraXQgKyBvdXQgKyBtcyArIG91dC5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBvdXRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIGZsZXgtc2hyaW5rLCBzXG5cdFx0XHRcdFx0XHRjYXNlIDExNToge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgb3V0ICsgbXMgKyBvdXQucmVwbGFjZSgnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyBvdXRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIGZsZXgtYmFzaXMsIGJcblx0XHRcdFx0XHRcdGNhc2UgOTg6IHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHdlYmtpdCArIG91dCArIG1zICsgb3V0LnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBvdXRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgb3V0ICsgbXMgKyBvdXQgKyBvdXRcblx0XHRcdH1cblx0XHRcdC8vIG9yZGVyOiBvLCByLCBkXG5cdFx0XHRjYXNlIDk2NDoge1xuXHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgb3V0ICsgbXMgKyAnZmxleCcgKyAnLScgKyBvdXQgKyBvdXRcblx0XHRcdH1cblx0XHRcdC8vIGp1c3RpZnktaXRlbXMvanVzdGlmeS1jb250ZW50LCBqLCB1LCBzXG5cdFx0XHRjYXNlIDEwMjM6IHtcblx0XHRcdFx0Ly8ganVzdGlmeS1jb250ZW50LCBjXG5cdFx0XHRcdGlmIChvdXQuY2hhckNvZGVBdCg4KSAhPT0gOTkpIHtcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FjaGUgPSBvdXQuc3Vic3RyaW5nKG91dC5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKVxuXHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgJ2JveC1wYWNrJyArIGNhY2hlICsgd2Via2l0ICsgb3V0ICsgbXMgKyAnZmxleC1wYWNrJyArIGNhY2hlICsgb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBjdXJzb3IsIGMsIHUsIHJcblx0XHRcdGNhc2UgMTAwNToge1xuXHRcdFx0XHRyZXR1cm4gY3Vyc29ycHRuLnRlc3Qob3V0KSA/IG91dC5yZXBsYWNlKGNvbG9ucHRuLCAnOicgKyB3ZWJraXQpICsgb3V0LnJlcGxhY2UoY29sb25wdG4sICc6JyArIG1veikgKyBvdXQgOiBvdXRcblx0XHRcdH1cblx0XHRcdC8vIHdyaXRpbmctbW9kZSwgdywgciwgaVxuXHRcdFx0Y2FzZSAxMDAwOiB7XG5cdFx0XHRcdGNhY2hlID0gb3V0LnN1YnN0cmluZygxMykudHJpbSgpXG5cdFx0XHRcdGluZGV4ID0gY2FjaGUuaW5kZXhPZignLScpICsgMVxuXG5cdFx0XHRcdHN3aXRjaCAoY2FjaGUuY2hhckNvZGVBdCgwKStjYWNoZS5jaGFyQ29kZUF0KGluZGV4KSkge1xuXHRcdFx0XHRcdC8vIHZlcnRpY2FsLWxyXG5cdFx0XHRcdFx0Y2FzZSAyMjY6IHtcblx0XHRcdFx0XHRcdGNhY2hlID0gb3V0LnJlcGxhY2Uod3JpdGluZ3B0biwgJ3RiJylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHZlcnRpY2FsLXJsXG5cdFx0XHRcdFx0Y2FzZSAyMzI6IHtcblx0XHRcdFx0XHRcdGNhY2hlID0gb3V0LnJlcGxhY2Uod3JpdGluZ3B0biwgJ3RiLXJsJylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGhvcml6b250YWwtdGJcblx0XHRcdFx0XHRjYXNlIDIyMDoge1xuXHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXQucmVwbGFjZSh3cml0aW5ncHRuLCAnbHInKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG91dFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB3ZWJraXQgKyBvdXQgKyBtcyArIGNhY2hlICsgb3V0XG5cdFx0XHR9XG5cdFx0XHQvLyBwb3NpdGlvbjogc3RpY2t5XG5cdFx0XHRjYXNlIDEwMTc6IHtcblx0XHRcdFx0aWYgKG91dC5pbmRleE9mKCdzdGlja3knLCA5KSA9PT0gLTEpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3V0XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIGRpc3BsYXkoZmxleC9pbmxpbmUtZmxleC9pbmxpbmUtYm94KTogZCwgaSwgc1xuXHRcdFx0Y2FzZSA5NzU6IHtcblx0XHRcdFx0aW5kZXggPSAob3V0ID0gaW5wdXQpLmxlbmd0aCAtIDEwXG5cdFx0XHRcdGNhY2hlID0gKG91dC5jaGFyQ29kZUF0KGluZGV4KSA9PT0gMzMgPyBvdXQuc3Vic3RyaW5nKDAsIGluZGV4KSA6IG91dCkuc3Vic3RyaW5nKGlucHV0LmluZGV4T2YoJzonLCA3KSArIDEpLnRyaW0oKVxuXG5cdFx0XHRcdHN3aXRjaCAoaGFzaCA9IGNhY2hlLmNoYXJDb2RlQXQoMCkgKyAoY2FjaGUuY2hhckNvZGVBdCg3KXwwKSkge1xuXHRcdFx0XHRcdC8vIGlubGluZS1cblx0XHRcdFx0XHRjYXNlIDIwMzoge1xuXHRcdFx0XHRcdFx0Ly8gaW5saW5lLWJveFxuXHRcdFx0XHRcdFx0aWYgKGNhY2hlLmNoYXJDb2RlQXQoOCkgPCAxMTEpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gaW5saW5lLWJveC9zdGlja3lcblx0XHRcdFx0XHRjYXNlIDExNToge1xuXHRcdFx0XHRcdFx0b3V0ID0gb3V0LnJlcGxhY2UoY2FjaGUsIHdlYmtpdCtjYWNoZSkrJzsnK291dFxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gaW5saW5lLWZsZXhcblx0XHRcdFx0XHQvLyBmbGV4XG5cdFx0XHRcdFx0Y2FzZSAyMDc6XG5cdFx0XHRcdFx0Y2FzZSAxMDI6IHtcblx0XHRcdFx0XHRcdG91dCA9IChcblx0XHRcdFx0XHRcdFx0b3V0LnJlcGxhY2UoY2FjaGUsIHdlYmtpdCsoaGFzaCA+IDEwMiA/ICdpbmxpbmUtJyA6ICcnKSsnYm94JykrJzsnK1xuXHRcdFx0XHRcdFx0XHRvdXQucmVwbGFjZShjYWNoZSwgd2Via2l0K2NhY2hlKSsnOycrXG5cdFx0XHRcdFx0XHRcdG91dC5yZXBsYWNlKGNhY2hlLCBtcytjYWNoZSsnYm94JykrJzsnK1xuXHRcdFx0XHRcdFx0XHRvdXRcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gb3V0ICsgJzsnXG5cdFx0XHR9XG5cdFx0XHQvLyBhbGlnbi1pdGVtcywgYWxpZ24tY2VudGVyLCBhbGlnbi1zZWxmOiBhLCBsLCBpLCAtXG5cdFx0XHRjYXNlIDkzODoge1xuXHRcdFx0XHRpZiAob3V0LmNoYXJDb2RlQXQoNSkgPT09IERBU0gpIHtcblx0XHRcdFx0XHRzd2l0Y2ggKG91dC5jaGFyQ29kZUF0KDYpKSB7XG5cdFx0XHRcdFx0XHQvLyBhbGlnbi1pdGVtcywgaVxuXHRcdFx0XHRcdFx0Y2FzZSAxMDU6IHtcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXQucmVwbGFjZSgnLWl0ZW1zJywgJycpXG5cdFx0XHRcdFx0XHRcdHJldHVybiB3ZWJraXQgKyBvdXQgKyB3ZWJraXQgKyAnYm94LScgKyBjYWNoZSArIG1zICsgJ2ZsZXgtJyArIGNhY2hlICsgb3V0XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBhbGlnbi1zZWxmLCBzXG5cdFx0XHRcdFx0XHRjYXNlIDExNToge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gd2Via2l0ICsgb3V0ICsgbXMgKyAnZmxleC1pdGVtLScgKyBvdXQucmVwbGFjZShzZWxmcHRuLCAnJykgKyBvdXRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIGFsaWduLWNvbnRlbnRcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHdlYmtpdCArIG91dCArIG1zICsgJ2ZsZXgtbGluZS1wYWNrJyArIG91dC5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2Uoc2VsZnB0biwgJycpICsgb3V0XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0XHQvLyBtaW4vbWF4XG5cdFx0XHRjYXNlIDk3Mzpcblx0XHRcdGNhc2UgOTg5OiB7XG5cdFx0XHRcdC8vIG1pbi0vbWF4LSBoZWlnaHQvd2lkdGgvYmxvY2stc2l6ZS9pbmxpbmUtc2l6ZVxuXHRcdFx0XHRpZiAob3V0LmNoYXJDb2RlQXQoMykgIT09IERBU0ggfHwgb3V0LmNoYXJDb2RlQXQoNCkgPT09IDEyMikge1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIGhlaWdodC93aWR0aDogbWluLWNvbnRlbnQgLyB3aWR0aDogbWF4LWNvbnRlbnRcblx0XHRcdGNhc2UgOTMxOlxuXHRcdFx0Y2FzZSA5NTM6IHtcblx0XHRcdFx0aWYgKGRpbWVuc2lvbnB0bi50ZXN0KGlucHV0KSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdC8vIHN0cmV0Y2hcblx0XHRcdFx0XHRpZiAoKGNhY2hlID0gaW5wdXQuc3Vic3RyaW5nKGlucHV0LmluZGV4T2YoJzonKSArIDEpKS5jaGFyQ29kZUF0KDApID09PSAxMTUpXG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvcGVydHkoaW5wdXQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBmaXJzdCwgc2Vjb25kLCB0aGlyZCkucmVwbGFjZSgnOmZpbGwtYXZhaWxhYmxlJywgJzpzdHJldGNoJylcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRyZXR1cm4gb3V0LnJlcGxhY2UoY2FjaGUsIHdlYmtpdCArIGNhY2hlKSArIG91dC5yZXBsYWNlKGNhY2hlLCBtb3ogKyBjYWNoZS5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBvdXRcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0Ly8gdHJhbnNmb3JtLCB0cmFuc2l0aW9uOiB0LCByLCBhXG5cdFx0XHRjYXNlIDk2Mjoge1xuXHRcdFx0XHRvdXQgPSB3ZWJraXQgKyBvdXQgKyAob3V0LmNoYXJDb2RlQXQoNSkgPT09IDEwMiA/IG1zICsgb3V0IDogJycpICsgb3V0XG5cblx0XHRcdFx0Ly8gdHJhbnNpdGlvbnNcblx0XHRcdFx0aWYgKHNlY29uZCArIHRoaXJkID09PSAyMTEgJiYgb3V0LmNoYXJDb2RlQXQoMTMpID09PSAxMDUgJiYgb3V0LmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSA+IDApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3V0LnN1YnN0cmluZygwLCBvdXQuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UodHJhbnNmb3JtcHRuLCAnJDEnICsgd2Via2l0ICsgJyQyJykgKyBvdXRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dFxuXHR9XG5cblx0LyoqXG5cdCAqIFZlbmRvclxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuXHQgKiBAcGFyYW0ge251bWJlcn0gY29udGV4dFxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKi9cblx0ZnVuY3Rpb24gdmVuZG9yIChjb250ZW50LCBjb250ZXh0KSB7XG5cdFx0dmFyIGluZGV4ID0gY29udGVudC5pbmRleE9mKGNvbnRleHQgPT09IDEgPyAnOicgOiAneycpXG5cdFx0dmFyIGtleSA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGNvbnRleHQgIT09IDMgPyBpbmRleCA6IDEwKVxuXHRcdHZhciB2YWx1ZSA9IGNvbnRlbnQuc3Vic3RyaW5nKGluZGV4ICsgMSwgY29udGVudC5sZW5ndGggLSAxKVxuXG5cdFx0cmV0dXJuIHNob3VsZChjb250ZXh0ICE9PSAyID8ga2V5IDoga2V5LnJlcGxhY2UocHNldWRvZm10LCAnJDEnKSwgdmFsdWUsIGNvbnRleHQpXG5cdH1cblxuXHQvKipcblx0ICogU3VwcG9ydHNcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBncm91cFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRmdW5jdGlvbiBzdXBwb3J0cyAobWF0Y2gsIGdyb3VwKSB7XG5cdFx0dmFyIG91dCA9IHByb3BlcnR5KGdyb3VwLCBncm91cC5jaGFyQ29kZUF0KDApLCBncm91cC5jaGFyQ29kZUF0KDEpLCBncm91cC5jaGFyQ29kZUF0KDIpKVxuXG5cdFx0cmV0dXJuIG91dCAhPT0gZ3JvdXArJzsnID8gb3V0LnJlcGxhY2UocHJvcGVydHlwdG4sICcgb3IgKCQxKScpLnN1YnN0cmluZyg0KSA6ICcoJytncm91cCsnKSdcblx0fVxuXG5cdC8qKlxuXHQgKiBBbmltYXRpb25cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIGFuaW1hdGlvbiAoaW5wdXQpIHtcblx0XHR2YXIgbGVuZ3RoID0gaW5wdXQubGVuZ3RoXG5cdFx0dmFyIGluZGV4ID0gaW5wdXQuaW5kZXhPZignOicsIDkpICsgMVxuXHRcdHZhciBkZWNsYXJlID0gaW5wdXQuc3Vic3RyaW5nKDAsIGluZGV4KS50cmltKClcblx0XHR2YXIgb3V0ID0gaW5wdXQuc3Vic3RyaW5nKGluZGV4LCBsZW5ndGgtMSkudHJpbSgpXG5cblx0XHRzd2l0Y2ggKGlucHV0LmNoYXJDb2RlQXQoOSkqa2V5ZWQpIHtcblx0XHRcdGNhc2UgMDoge1xuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0Ly8gYW5pbWF0aW9uLSosIC1cblx0XHRcdGNhc2UgREFTSDoge1xuXHRcdFx0XHQvLyBhbmltYXRpb24tbmFtZSwgblxuXHRcdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdCgxMCkgIT09IDExMCkge1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIGFuaW1hdGlvbi9hbmltYXRpb24tbmFtZVxuXHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHQvLyBzcGxpdCBpbiBjYXNlIG9mIG11bHRpcGxlIGFuaW1hdGlvbnNcblx0XHRcdFx0dmFyIGxpc3QgPSBvdXQuc3BsaXQoKG91dCA9ICcnLCBhbmltYXRpb25wdG4pKVxuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbmRleCA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpbmRleCA9IDAsICsraSkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IGxpc3RbaV1cblx0XHRcdFx0XHR2YXIgaXRlbXMgPSB2YWx1ZS5zcGxpdChwcm9wZXJ0aWVzcHRuKVxuXG5cdFx0XHRcdFx0d2hpbGUgKHZhbHVlID0gaXRlbXNbaW5kZXhdKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGVhayA9IHZhbHVlLmNoYXJDb2RlQXQoMClcblxuXHRcdFx0XHRcdFx0aWYgKGtleWVkID09PSAxICYmIChcblx0XHRcdFx0XHRcdFx0Ly8gbGV0dGVyc1xuXHRcdFx0XHRcdFx0XHQocGVhayA+IEFUICYmIHBlYWsgPCA5MCkgfHwgKHBlYWsgPiA5NiAmJiBwZWFrIDwgMTIzKSB8fCBwZWFrID09PSBVTkRFUlNDT1JFIHx8XG5cdFx0XHRcdFx0XHRcdC8vIGRhc2ggYnV0IG5vdCBpbiBzZXF1ZW5jZSBpLmUgLS1cblx0XHRcdFx0XHRcdFx0KHBlYWsgPT09IERBU0ggJiYgdmFsdWUuY2hhckNvZGVBdCgxKSAhPT0gREFTSClcblx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0Ly8gbm90IGEgbnVtYmVyL2Z1bmN0aW9uXG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHZhbHVlLmluZGV4T2YoJygnKSAhPT0gLTEpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAxOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzd2l0Y2ggKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIG5vdCBhIHZhbGlkIHJlc2VydmVkIGtleXdvcmRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAnaW5maW5pdGUnOiBjYXNlICdhbHRlcm5hdGUnOiBjYXNlICdiYWNrd2FyZHMnOiBjYXNlICdydW5uaW5nJzpcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAnbm9ybWFsJzogY2FzZSAnZm9yd2FyZHMnOiBjYXNlICdib3RoJzogY2FzZSAnbm9uZSc6IGNhc2UgJ2xpbmVhcic6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2Vhc2UnOiBjYXNlICdlYXNlLWluJzogY2FzZSAnZWFzZS1vdXQnOiBjYXNlICdlYXNlLWluLW91dCc6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3BhdXNlZCc6IGNhc2UgJ3JldmVyc2UnOiBjYXNlICdhbHRlcm5hdGUtcmV2ZXJzZSc6IGNhc2UgJ2luaGVyaXQnOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlICdpbml0aWFsJzogY2FzZSAndW5zZXQnOiBjYXNlICdzdGVwLXN0YXJ0JzogY2FzZSAnc3RlcC1lbmQnOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgKz0ga2V5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aXRlbXNbaW5kZXgrK10gPSB2YWx1ZVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dCArPSAoaSA9PT0gMCA/ICcnIDogJywnKSArIGl0ZW1zLmpvaW4oJyAnKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0b3V0ID0gZGVjbGFyZSArIG91dCArICc7J1xuXG5cdFx0aWYgKHByZWZpeCA9PT0gMSB8fCAocHJlZml4ID09PSAyICYmIHZlbmRvcihvdXQsIDEpKSlcblx0XHRcdHJldHVybiB3ZWJraXQgKyBvdXQgKyBvdXRcblxuXHRcdHJldHVybiBvdXRcblx0fVxuXG5cdC8qKlxuXHQgKiBJc29sYXRlXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gY3VycmVudFxuXHQgKi9cblx0ZnVuY3Rpb24gaXNvbGF0ZSAoY3VycmVudCkge1xuXHRcdGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjdXJyZW50Lmxlbmd0aCwgc2VsZWN0b3IgPSBBcnJheShsZW5ndGgpLCBwYWRkaW5nLCBlbGVtZW50OyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdC8vIHNwbGl0IGluZGl2aWR1YWwgZWxlbWVudHMgaW4gYSBzZWxlY3RvciBpLmUgaDEgaDIgPT09IFtoMSwgaDJdXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBjdXJyZW50W2ldLnNwbGl0KGVsZW1lbnRwdG4pXG5cdFx0XHR2YXIgb3V0ID0gJydcblxuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIHNpemUgPSAwLCB0YWlsID0gMCwgY29kZSA9IDAsIGwgPSBlbGVtZW50cy5sZW5ndGg7IGogPCBsOyArK2opIHtcblx0XHRcdFx0Ly8gZW1wdHkgZWxlbWVudFxuXHRcdFx0XHRpZiAoKHNpemUgPSAoZWxlbWVudCA9IGVsZW1lbnRzW2pdKS5sZW5ndGgpID09PSAwICYmIGwgPiAxKSB7XG5cdFx0XHRcdFx0Y29udGludWVcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRhaWwgPSBvdXQuY2hhckNvZGVBdChvdXQubGVuZ3RoLTEpXG5cdFx0XHRcdGNvZGUgPSBlbGVtZW50LmNoYXJDb2RlQXQoMClcblx0XHRcdFx0cGFkZGluZyA9ICcnXG5cblx0XHRcdFx0aWYgKGogIT09IDApIHtcblx0XHRcdFx0XHQvLyBkZXRlcm1pbmUgaWYgd2UgbmVlZCBwYWRkaW5nXG5cdFx0XHRcdFx0c3dpdGNoICh0YWlsKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFNUQVI6XG5cdFx0XHRcdFx0XHRjYXNlIFRJTERFOlxuXHRcdFx0XHRcdFx0Y2FzZSBHUkVBVEVSVEhBTjpcblx0XHRcdFx0XHRcdGNhc2UgUExVUzpcblx0XHRcdFx0XHRcdGNhc2UgU1BBQ0U6XG5cdFx0XHRcdFx0XHRjYXNlIE9QRU5QQVJFTlRIRVNFUzogIHtcblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0cGFkZGluZyA9ICcgJ1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN3aXRjaCAoY29kZSkge1xuXHRcdFx0XHRcdGNhc2UgQU5EOiB7XG5cdFx0XHRcdFx0XHRlbGVtZW50ID0gcGFkZGluZyArIG5zY29wZWFsdFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIFRJTERFOlxuXHRcdFx0XHRcdGNhc2UgR1JFQVRFUlRIQU46XG5cdFx0XHRcdFx0Y2FzZSBQTFVTOlxuXHRcdFx0XHRcdGNhc2UgU1BBQ0U6XG5cdFx0XHRcdFx0Y2FzZSBDTE9TRVBBUkVOVEhFU0VTOlxuXHRcdFx0XHRcdGNhc2UgT1BFTlBBUkVOVEhFU0VTOiB7XG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIE9QRU5CUkFDS0VUOiB7XG5cdFx0XHRcdFx0XHRlbGVtZW50ID0gcGFkZGluZyArIGVsZW1lbnQgKyBuc2NvcGVhbHRcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgQ09MT046IHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoZWxlbWVudC5jaGFyQ29kZUF0KDEpKjIgKyBlbGVtZW50LmNoYXJDb2RlQXQoMikqMykge1xuXHRcdFx0XHRcdFx0XHQvLyA6Z2xvYmFsXG5cdFx0XHRcdFx0XHRcdGNhc2UgNTMwOiB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVzY2FwZSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQgPSBwYWRkaW5nICsgZWxlbWVudC5zdWJzdHJpbmcoOCwgc2l6ZSAtIDEpXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQvLyA6aG92ZXIsIDpudGgtY2hpbGQoKSwgLi4uXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoaiA8IDEgfHwgZWxlbWVudHNbai0xXS5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50ID0gcGFkZGluZyArIG5zY29wZWFsdCArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgQ09NTUE6IHtcblx0XHRcdFx0XHRcdHBhZGRpbmcgPSAnJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHRpZiAoc2l6ZSA+IDEgJiYgZWxlbWVudC5pbmRleE9mKCc6JykgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQgPSBwYWRkaW5nICsgZWxlbWVudC5yZXBsYWNlKHBzZXVkb3B0biwgJyQxJyArIG5zY29wZWFsdCArICckMicpXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbGVtZW50ID0gcGFkZGluZyArIGVsZW1lbnQgKyBuc2NvcGVhbHRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvdXQgKz0gZWxlbWVudFxuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvcltpXSA9IG91dC5yZXBsYWNlKGZvcm1hdHB0biwgJycpLnRyaW0oKVxuXHRcdH1cblxuXHRcdHJldHVybiBzZWxlY3RvclxuXHR9XG5cblx0LyoqXG5cdCAqIFByb3h5XG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb250ZXh0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG5cdCAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc2VsZWN0b3JzXG5cdCAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gcGFyZW50c1xuXHQgKiBAcGFyYW0ge251bWJlcn0gbGluZVxuXHQgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcblx0ICogQHBhcmFtIHtudW1iZXJ9IGlkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aFxuXHQgKiBAcGFyYW0ge251bWJlcn0gYXRcblx0ICogQHJldHVybiB7KHN0cmluZ3x2b2lkfCopfVxuXHQgKi9cblx0ZnVuY3Rpb24gcHJveHkgKGNvbnRleHQsIGNvbnRlbnQsIHNlbGVjdG9ycywgcGFyZW50cywgbGluZSwgY29sdW1uLCBsZW5ndGgsIGlkLCBkZXB0aCwgYXQpIHtcblx0XHRmb3IgKHZhciBpID0gMCwgb3V0ID0gY29udGVudCwgbmV4dDsgaSA8IHBsdWdnZWQ7ICsraSkge1xuXHRcdFx0c3dpdGNoIChuZXh0ID0gcGx1Z2luc1tpXS5jYWxsKHN0eWxpcywgY29udGV4dCwgb3V0LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBpZCwgZGVwdGgsIGF0KSkge1xuXHRcdFx0XHRjYXNlIHZvaWQgMDpcblx0XHRcdFx0Y2FzZSBmYWxzZTpcblx0XHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0XHRjYXNlIG51bGw6IHtcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRvdXQgPSBuZXh0XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRzd2l0Y2ggKG91dCkge1xuXHRcdFx0Y2FzZSB2b2lkIDA6XG5cdFx0XHRjYXNlIGZhbHNlOlxuXHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0Y2FzZSBudWxsOlxuXHRcdFx0Y2FzZSBjb250ZW50OiB7XG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdHJldHVybiBvdXRcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWluaWZ5XG5cdCAqXG5cdCAqIEBwYXJhbSB7KHN0cmluZ3wqKX0gb3V0cHV0XG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIG1pbmlmeSAob3V0cHV0KSB7XG5cdFx0cmV0dXJuIG91dHB1dFxuXHRcdFx0LnJlcGxhY2UoZm9ybWF0cHRuLCAnJylcblx0XHRcdC5yZXBsYWNlKGJlZm9yZXB0biwgJycpXG5cdFx0XHQucmVwbGFjZShhZnRlcnB0biwgJyQxJylcblx0XHRcdC5yZXBsYWNlKHRhaWxwdG4sICckMScpXG5cdFx0XHQucmVwbGFjZSh3aGl0ZXB0biwgJyAnKVxuXHR9XG5cblx0LyoqXG5cdCAqIFVzZVxuXHQgKlxuXHQgKiBAcGFyYW0geyhBcnJheTxmdW5jdGlvbiguLi4/KT58ZnVuY3Rpb24oLi4uPyl8bnVtYmVyfHZvaWQpP30gcGx1Z2luXG5cdCAqL1xuXHRmdW5jdGlvbiB1c2UgKHBsdWdpbikge1xuXHRcdHN3aXRjaCAocGx1Z2luKSB7XG5cdFx0XHRjYXNlIHZvaWQgMDpcblx0XHRcdGNhc2UgbnVsbDoge1xuXHRcdFx0XHRwbHVnZ2VkID0gcGx1Z2lucy5sZW5ndGggPSAwXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdHN3aXRjaCAocGx1Z2luLmNvbnN0cnVjdG9yKSB7XG5cdFx0XHRcdFx0Y2FzZSBBcnJheToge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHBsdWdpbi5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdFx0XHR1c2UocGx1Z2luW2ldKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2FzZSBGdW5jdGlvbjoge1xuXHRcdFx0XHRcdFx0cGx1Z2luc1twbHVnZ2VkKytdID0gcGx1Z2luXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIEJvb2xlYW46IHtcblx0XHRcdFx0XHRcdHVua3duID0gISFwbHVnaW58MFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHVzZVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldFxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IG9wdGlvbnNcblx0ICovXG5cdGZ1bmN0aW9uIHNldCAob3B0aW9ucykge1xuXHRcdGZvciAodmFyIG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0dmFyIHZhbHVlID0gb3B0aW9uc1tuYW1lXVxuXHRcdFx0c3dpdGNoIChuYW1lKSB7XG5cdFx0XHRcdGNhc2UgJ2tleWZyYW1lJzoga2V5ZWQgPSB2YWx1ZXwwOyBicmVha1xuXHRcdFx0XHRjYXNlICdnbG9iYWwnOiBlc2NhcGUgPSB2YWx1ZXwwOyBicmVha1xuXHRcdFx0XHRjYXNlICdjYXNjYWRlJzogY2FzY2FkZSA9IHZhbHVlfDA7IGJyZWFrXG5cdFx0XHRcdGNhc2UgJ2NvbXByZXNzJzogY29tcHJlc3MgPSB2YWx1ZXwwOyBicmVha1xuXHRcdFx0XHRjYXNlICdzZW1pY29sb24nOiBzZW1pY29sb24gPSB2YWx1ZXwwOyBicmVha1xuXHRcdFx0XHRjYXNlICdwcmVzZXJ2ZSc6IHByZXNlcnZlID0gdmFsdWV8MDsgYnJlYWtcblx0XHRcdFx0Y2FzZSAncHJlZml4Jzpcblx0XHRcdFx0XHRzaG91bGQgPSBudWxsXG5cblx0XHRcdFx0XHRpZiAoIXZhbHVlKSB7XG5cdFx0XHRcdFx0XHRwcmVmaXggPSAwXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdHByZWZpeCA9IDFcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHJlZml4ID0gMlxuXHRcdFx0XHRcdFx0c2hvdWxkID0gdmFsdWVcblx0XHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFxuXHR9XG5cblx0LyoqXG5cdCAqIFN0eWxpc1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3Jcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG5cdCAqIEByZXR1cm4geyp9XG5cdCAqL1xuXHRmdW5jdGlvbiBzdHlsaXMgKHNlbGVjdG9yLCBpbnB1dCkge1xuXHRcdGlmICh0aGlzICE9PSB2b2lkIDAgJiYgdGhpcy5jb25zdHJ1Y3RvciA9PT0gc3R5bGlzKSB7XG5cdFx0XHRyZXR1cm4gZmFjdG9yeShzZWxlY3Rvcilcblx0XHR9XG5cblx0XHQvLyBzZXR1cFxuXHRcdHZhciBucyA9IHNlbGVjdG9yXG5cdFx0dmFyIGNvZGUgPSBucy5jaGFyQ29kZUF0KDApXG5cblx0XHQvLyB0cmltIGxlYWRpbmcgd2hpdGVzcGFjZVxuXHRcdGlmIChjb2RlIDwgMzMpIHtcblx0XHRcdGNvZGUgPSAobnMgPSBucy50cmltKCkpLmNoYXJDb2RlQXQoMClcblx0XHR9XG5cblx0XHQvLyBrZXlmcmFtZS9hbmltYXRpb24gbmFtZXNwYWNlXG5cdFx0aWYgKGtleWVkID4gMCkge1xuXHRcdFx0a2V5ID0gbnMucmVwbGFjZShpbnZhbGlkcHRuLCBjb2RlID09PSBPUEVOQlJBQ0tFVCA/ICcnIDogJy0nKVxuXHRcdH1cblxuXHRcdC8vIHJlc2V0LCB1c2VkIHRvIGFzc2VydCBpZiBhIHBsdWdpbiBpcyBtb25la3ktcGF0Y2hpbmcgdGhlIHJldHVybiB2YWx1ZVxuXHRcdGNvZGUgPSAxXG5cblx0XHQvLyBjYXNjYWRlL2lzb2xhdGVcblx0XHRpZiAoY2FzY2FkZSA9PT0gMSkge1xuXHRcdFx0bnNjb3BlID0gbnNcblx0XHR9IGVsc2Uge1xuXHRcdFx0bnNjb3BlYWx0ID0gbnNcblx0XHR9XG5cblx0XHR2YXIgc2VsZWN0b3JzID0gW25zY29wZV1cblx0XHR2YXIgcmVzdWx0XG5cblx0XHQvLyBleGVjdXRlIHBsdWdpbnMsIHByZS1wcm9jZXNzIGNvbnRleHRcblx0XHRpZiAocGx1Z2dlZCA+IDApIHtcblx0XHRcdHJlc3VsdCA9IHByb3h5KFBSRVBTLCBpbnB1dCwgc2VsZWN0b3JzLCBzZWxlY3RvcnMsIGxpbmUsIGNvbHVtbiwgMCwgMCwgMCwgMClcblxuXHRcdFx0aWYgKHJlc3VsdCAhPT0gdm9pZCAwICYmIHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGlucHV0ID0gcmVzdWx0XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGRcblx0XHR2YXIgb3V0cHV0ID0gY29tcGlsZShhcnJheSwgc2VsZWN0b3JzLCBpbnB1dCwgMCwgMClcblxuXHRcdC8vIGV4ZWN1dGUgcGx1Z2lucywgcG9zdC1wcm9jZXNzIGNvbnRleHRcblx0XHRpZiAocGx1Z2dlZCA+IDApIHtcblx0XHRcdHJlc3VsdCA9IHByb3h5KFBPU1RTLCBvdXRwdXQsIHNlbGVjdG9ycywgc2VsZWN0b3JzLCBsaW5lLCBjb2x1bW4sIG91dHB1dC5sZW5ndGgsIDAsIDAsIDApXG5cblx0XHRcdC8vIGJ5cGFzcyBtaW5pZmljYXRpb25cblx0XHRcdGlmIChyZXN1bHQgIT09IHZvaWQgMCAmJiB0eXBlb2Yob3V0cHV0ID0gcmVzdWx0KSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Y29kZSA9IDBcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyByZXNldFxuXHRcdGtleSA9ICcnXG5cdFx0bnNjb3BlID0gJydcblx0XHRuc2NvcGVhbHQgPSAnJ1xuXHRcdHBhdHRlcm4gPSAwXG5cdFx0bGluZSA9IDFcblx0XHRjb2x1bW4gPSAxXG5cblx0XHRyZXR1cm4gY29tcHJlc3MqY29kZSA9PT0gMCA/IG91dHB1dCA6IG1pbmlmeShvdXRwdXQpXG5cdH1cblxuXHRzdHlsaXNbJ3VzZSddID0gdXNlXG5cdHN0eWxpc1snc2V0J10gPSBzZXRcblxuXHRpZiAob3B0aW9ucyAhPT0gdm9pZCAwKSB7XG5cdFx0c2V0KG9wdGlvbnMpXG5cdH1cblxuXHRyZXR1cm4gc3R5bGlzXG59KSk7XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcclxuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IEhlYWRlciwgSGVhZGluZyB9IGZyb20gJy4uL3N0eWxlcy9OYXZiYXInXHJcblxyXG5jb25zdCBOYXZiYXIgPSAoKSA9PiAoXHJcbiAgPEhlYWRlcj5cclxuICAgIDxIZWFkaW5nPkxvcmVtIElwc3VtIEdlbmVyYXRvcjwvSGVhZGluZz5cclxuICA8L0hlYWRlcj5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2YmFyXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xyXG5cclxuaW1wb3J0IHsgQ29udGFpbmVyLCBJbnB1dCwgU2VsZWN0LCBCdXR0b24gfSBmcm9tICcuLi9zdHlsZXMvT3B0aW9ucydcclxuXHJcbmNvbnN0IE9wdGlvbnMgPSBwcm9wcyA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxDb250YWluZXI+XHJcbiAgICAgIDxmb3JtIG9uU3VibWl0PXtwcm9wcy5zdWJtaXR9PlxyXG4gICAgICAgIDxJbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJwYXJhc1wiIG9uQ2hhbmdlPXtwcm9wcy5jaGFuZ2VkTnVtfSB2YWx1ZT17cHJvcHMubnVtfSAvPlxyXG4gICAgICAgIDxTZWxlY3Qgb25DaGFuZ2U9e3Byb3BzLmNoYW5nZWRUeXBlfSB2YWx1ZT17cHJvcHMudHlwZX0+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicGFyYVwiPlBhcmFncmFwaHM8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsaW5rXCI+TGlua3M8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJvbFwiPk9yZGVyZWQgbGlzdDwvb3B0aW9uPlxyXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInVsXCI+VW5vcmRlcmVkIGxpc3Q8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkbFwiPkRlc2NyaXB0aW9uIExpc3Q8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwbGFpbnRleHRcIj5QbGFpbiBUZXh0PC9vcHRpb24+XHJcbiAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgPFNlbGVjdCBvbkNoYW5nZT17cHJvcHMuY2hhbmdlZExlbmd0aH0gaWQ9XCJsZW5ndGhcIiB2YWx1ZT17cHJvcHMubGVuZ3RofT5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJzaG9ydFwiPlNob3J0PC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibWVkaXVtXCI+TWVkaXVtPC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibG9uZ1wiPkxvbmc8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ2ZXJ5bG9uZ1wiPlZlcnkgTG9uZzwvb3B0aW9uPlxyXG4gICAgICAgIDwvU2VsZWN0PlxyXG5cclxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5HZXQgVGV4dDwvQnV0dG9uPlxyXG4gICAgICA8L2Zvcm0+XHJcbiAgICA8L0NvbnRhaW5lcj5cclxuICApXHJcbn1cclxuXHJcbk9wdGlvbnMucHJvcFR5cGVzID0ge1xyXG4gIGNoYW5nZWRMZW5ndGg6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgY2hhbmdlZE51bTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICBjaGFuZ2VkVHlwZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICBsZW5ndGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICBudW06IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuICBzdWJtaXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE9wdGlvbnNcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uL3N0eWxlcy9PdXRwdXQnXHJcbmltcG9ydCB7IFB1bHNlTG9hZGVyIH0gZnJvbSAncmVhY3Qtc3Bpbm5lcnMnXHJcblxyXG5jb25zdCBPdXRwdXQgPSBwcm9wcyA9PiB7XHJcbiAgbGV0IG91dHB1dCA9ICcnXHJcbiAgaWYgKHByb3BzLnRleHQgPT09ICcnKSB7XHJcbiAgICBvdXRwdXQgPSA8UHVsc2VMb2FkZXIgc2l6ZT17MzB9IGNvbG9yPVwiI2ZkYTQwM1wiIG1hcmdpbj1cIjEwcHhcIiAvPlxyXG4gIH0gZWxzZSB7XHJcbiAgICBvdXRwdXQgPSBwcm9wcy50ZXh0XHJcbiAgfVxyXG5cclxuICByZXR1cm4gPENvbnRhaW5lcj57b3V0cHV0fTwvQ29udGFpbmVyPlxyXG59XHJcblxyXG5PdXRwdXQucHJvcFR5cGVzID0ge1xyXG4gIHRleHQ6IFByb3BUeXBlcy5zdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3V0cHV0XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vc3R5bGVzL0FwcCdcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5pbXBvcnQgT3B0aW9ucyBmcm9tICcuLi9jb21wb25lbnRzL09wdGlvbnMnXHJcbmltcG9ydCBPdXRwdXQgZnJvbSAnLi4vY29tcG9uZW50cy9PdXRwdXQnXHJcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi4vY29tcG9uZW50cy9OYXZiYXInXHJcblxyXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICB0ZXh0OiAnJyxcclxuICAgICAgbnVtT2ZQYXJhZ3JhcGhzOiAyLFxyXG4gICAgICBsZW5ndGg6ICdzaG9ydCcsXHJcbiAgICAgIHR5cGU6ICdwYXJhJ1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2hhbmdlZExlbmd0aEhhbmRsZXIgPSB0aGlzLmNoYW5nZWRMZW5ndGhIYW5kbGVyLmJpbmQodGhpcylcclxuICAgIHRoaXMuY2hhbmdlZE51bUhhbmRsZXIgPSB0aGlzLmNoYW5nZWROdW1IYW5kbGVyLmJpbmQodGhpcylcclxuICAgIHRoaXMuY2hhbmdlZFR5cGVIYW5kbGVyID0gdGhpcy5jaGFuZ2VkVHlwZUhhbmRsZXIuYmluZCh0aGlzKVxyXG4gICAgdGhpcy5mZXRjaFRleHQgPSB0aGlzLmZldGNoVGV4dC5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICB0aGlzLmZldGNoVGV4dCgpXHJcbiAgfVxyXG5cclxuICBjaGFuZ2VkTGVuZ3RoSGFuZGxlciAoZXZlbnQpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBsZW5ndGg6IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGNoYW5nZWROdW1IYW5kbGVyIChldmVudCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIG51bU9mUGFyYWdyYXBoczogZXZlbnQudGFyZ2V0LnZhbHVlXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY2hhbmdlZFR5cGVIYW5kbGVyIChldmVudCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHR5cGU6IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGZldGNoVGV4dCAoZXZlbnQgPSBmYWxzZSkge1xyXG4gICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbnVtT2ZQYXJhZ3JhcGhzLCBsZW5ndGgsIHR5cGUgfSA9IHRoaXMuc3RhdGVcclxuICAgIGNvbnN0IHByb3h5ID0gJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLydcclxuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly9sb3JpcHN1bS5uZXQvYXBpLyR7bnVtT2ZQYXJhZ3JhcGhzfS8ke2xlbmd0aH0vJHt0eXBlfWBcclxuXHJcbiAgICBpZiAodHlwZSA9PT0gJ3BhcmEnKSB7XHJcbiAgICAgIHVybCA9IGBodHRwczovL2xvcmlwc3VtLm5ldC9hcGkvJHtudW1PZlBhcmFncmFwaHN9LyR7bGVuZ3RofWBcclxuICAgIH1cclxuXHJcbiAgICBheGlvcy5nZXQoYCR7cHJveHl9JHt1cmx9YCkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gcmVzcG9uc2VcclxuXHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHRleHQ6IGRhdGFcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPENvbnRhaW5lcj5cclxuICAgICAgICA8TmF2YmFyIC8+XHJcbiAgICAgICAgPE9wdGlvbnNcclxuICAgICAgICAgIGNoYW5nZWRMZW5ndGg9e3RoaXMuY2hhbmdlZExlbmd0aEhhbmRsZXJ9XHJcbiAgICAgICAgICBsZW5ndGg9e3RoaXMuc3RhdGUubGVuZ3RofVxyXG4gICAgICAgICAgY2hhbmdlZE51bT17dGhpcy5jaGFuZ2VkTnVtSGFuZGxlcn1cclxuICAgICAgICAgIG51bT17dGhpcy5zdGF0ZS5udW1PZlBhcmFncmFwaHN9XHJcbiAgICAgICAgICBjaGFuZ2VkVHlwZT17dGhpcy5jaGFuZ2VkVHlwZUhhbmRsZXJ9XHJcbiAgICAgICAgICB0eXBlPXt0aGlzLnN0YXRlLnR5cGV9XHJcbiAgICAgICAgICBzdWJtaXQ9e3RoaXMuZmV0Y2hUZXh0fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPE91dHB1dCB0ZXh0PXt0aGlzLnN0YXRlLnRleHR9IC8+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vY29udGFpbmVycy9BcHAnXHJcblxyXG5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSlcclxuXHJcbmlmIChtb2R1bGUuaG90KSB7XHJcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxyXG59XHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcblxyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBgXHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGVyID0gc3R5bGVkLmhlYWRlcmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRhNDAzO1xyXG4gIGNvbG9yOiAjMTExO1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgcGFkZGluZzogMTJweDtcclxuXHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICBwYWRkaW5nOiA2cHg7XHJcbiAgfVxyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGluZyA9IHN0eWxlZC5oMWBcclxuICBmb250LWZhbWlseTogQ2FiaW4sIHNhbnMtc2VyaWY7XHJcbiAgZm9udC1zaXplOiAzMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5gXHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcblxyXG5jb25zdCBpbnB1dEhlaWdodCA9ICczMHB4J1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIHdpZHRoOiA4MCU7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcclxuICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xyXG4gIGZvbnQtZmFtaWx5OiBDYWJpbiwgc2Fucy1zZXJpZjtcclxuICBoZWlnaHQ6ICR7aW5wdXRIZWlnaHR9O1xyXG4gIG1hcmdpbi1yaWdodDogMTBweDtcclxuICBwYWRkaW5nOiA1cHg7XHJcbiAgd2lkdGg6IDYwcHg7XHJcbmBcclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3QgPSBzdHlsZWQuc2VsZWN0YFxyXG4gIGJvcmRlcjogMnB4IHNvbGlkICNjY2M7XHJcbiAgZm9udC1mYW1pbHk6IENhYmluLCBzYW5zLXNlcmlmO1xyXG4gIGhlaWdodDogJHtpbnB1dEhlaWdodH07XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG5gXHJcblxyXG5leHBvcnQgY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRhNDAzO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgYm94LXNoYWRvdzogM3B4IDJweCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LWZhbWlseTogQ2FiaW4sIHNhbnMtc2VyaWY7XHJcbiAgZm9udC1zaXplOiAxNnB4O1xyXG4gIG1hcmdpbjogMTBweCBhdXRvO1xyXG4gIHBhZGRpbmc6IDEwcHggMTVweDtcclxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDQwMG1zLCBjb2xvciA0MDBtcywgdHJhbnNmb3JtIDMwMG1zO1xyXG5cclxuICAmOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZGFkMWM7XHJcbiAgICBib3gtc2hhZG93OiBub25lO1xyXG4gICAgY29sb3I6ICNmMmYyZjI7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzcHgsIDJweCk7XHJcbiAgfVxyXG5gXHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXHJcblxyXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICNkZGQ7XHJcbiAgYm94LXNoYWRvdzogMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICBmb250LWZhbWlseTogJ09sZCBTdGFuZGFyZCBUVCcsIHNlcmlmO1xyXG4gIGZvbnQtc2l6ZTogMThweDtcclxuICBsaW5lLWhlaWdodDogMnJlbTtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBtYXgtd2lkdGg6IDEyMDBweDtcclxuICBwYWRkaW5nOiAzMHB4O1xyXG4gIHdpZHRoOiA4MCU7XHJcbmBcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==